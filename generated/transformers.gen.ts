// This file is auto-generated by @hey-api/openapi-ts

import type {
	CreateBlogImageParagraphResponse,
	CreateBlogResponse,
	CreateBlogTextParagraphResponse,
	CreateCareerPartnerResponse,
	CreateEventResponse,
	CreateGroupMembershipResponse,
	CreateMemberResponse,
	CreateMembershipStatusResponse,
	CreateNewsResponse,
	CreateOrganisationMembershipResponse,
	CreateProductResponse,
	CreateSaleInvoiceResponse,
	CreateTicketTypeResponse,
	GetV30GroupsFoldersRecursiveResponse,
	ListBackgroundProcessesResponse,
	ListBankMutationsResponse,
	ListBlogsResponse,
	ListCareerPartnersResponse,
	ListEventParticipationsResponse,
	ListEventsResponse,
	ListGalleryAlbumsResponse,
	ListGroupFoldersRecursiveResponse,
	ListGroupMembershipsResponse,
	ListGroupsResponse,
	ListMembershipStatusesResponse,
	ListMembersResponse,
	ListNewsResponse,
	ListOrganisationMembershipsResponse,
	ListProductFoldersRecursiveResponse,
	ListProductsResponse,
	ListSaleInvoicesResponse,
	ListSaleInvoiceWorkflowsResponse,
	ListTasksResponse,
	ListTicketTypesResponse,
	ListWebhookCallsResponse,
	ListWebpagesResponse,
	ListWebsiteWebpagesResponse,
	RetrieveBackgroundProcessResponse,
	RetrieveBankMutationResponse,
	RetrieveBlogImageParagraphResponse,
	RetrieveBlogResponse,
	RetrieveBlogTextParagraphResponse,
	RetrieveCareerPartnerResponse,
	RetrieveEventParticipationResponse,
	RetrieveEventResponse,
	RetrieveGalleryAlbumResponse,
	RetrieveGroupMembershipResponse,
	RetrieveGroupResponse,
	RetrieveMemberResponse,
	RetrieveMembershipStatusResponse,
	RetrieveNewsResponse,
	RetrieveOrganisationMembershipResponse,
	RetrieveProductResponse,
	RetrieveSaleInvoiceResponse,
	RetrieveTicketTypeResponse,
	RetrieveWebpageResponse,
	SearchMembersResponse,
	UpdateBlogImageParagraphResponse,
	UpdateBlogResponse,
	UpdateBlogTextParagraphResponse,
	UpdateCareerPartnerResponse,
	UpdateEventParticipationResponse,
	UpdateEventResponse,
	UpdateGroupMembershipResponse,
	UpdateGroupResponse,
	UpdateMemberResponse,
	UpdateMembershipStatusResponse,
	UpdateNewsResponse,
	UpdateOrganisationMembershipResponse,
	UpdateProductResponse,
	UpdateSaleInvoiceResponse,
	UpdateTaskResponse,
	UpdateTicketTypeResponse,
} from './types.gen'

const backgroundProcessSchemaResponseTransformer = (data: any) => {
	if (data.created) {
		data.created = new Date(data.created)
	}
	if (data.modified) {
		data.modified = new Date(data.modified)
	}
	return data
}

const backgroundProcessPaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return backgroundProcessSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listBackgroundProcessesResponseTransformer = async (
	data: any,
): Promise<ListBackgroundProcessesResponse> => {
	data = backgroundProcessPaginationSchemaResponseTransformer(data)
	return data
}

export const retrieveBackgroundProcessResponseTransformer = async (
	data: any,
): Promise<RetrieveBackgroundProcessResponse> => {
	data = backgroundProcessSchemaResponseTransformer(data)
	return data
}

const bankImportSchemaResponseTransformer = (data: any) => {
	if (data.created_at) {
		data.created_at = new Date(data.created_at)
	}
	return data
}

const bankStatementSchemaResponseTransformer = (data: any) => {
	if (data.bank_import) {
		data.bank_import = bankImportSchemaResponseTransformer(data.bank_import)
	}
	if (data.begin) {
		data.begin = new Date(data.begin)
	}
	if (data.end) {
		data.end = new Date(data.end)
	}
	return data
}

const bankMutationSchemaResponseTransformer = (data: any) => {
	if (data.bank_statement) {
		data.bank_statement = bankStatementSchemaResponseTransformer(data.bank_statement)
	}
	if (data.mutation_date) {
		data.mutation_date = new Date(data.mutation_date)
	}
	return data
}

const bankMutationPaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return bankMutationSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listBankMutationsResponseTransformer = async (data: any): Promise<ListBankMutationsResponse> => {
	data = bankMutationPaginationSchemaResponseTransformer(data)
	return data
}

export const retrieveBankMutationResponseTransformer = async (data: any): Promise<RetrieveBankMutationResponse> => {
	data = bankMutationSchemaResponseTransformer(data)
	return data
}

const blogSchemaResponseTransformer = (data: any) => {
	if (data.published_from) {
		data.published_from = new Date(data.published_from)
	}
	return data
}

const blogPaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return blogSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listBlogsResponseTransformer = async (data: any): Promise<ListBlogsResponse> => {
	data = blogPaginationSchemaResponseTransformer(data)
	return data
}

export const createBlogResponseTransformer = async (data: any): Promise<CreateBlogResponse> => {
	data = blogSchemaResponseTransformer(data)
	return data
}

const blogWithParagraphSchemaResponseTransformer = (data: any) => {
	if (data.published_from) {
		data.published_from = new Date(data.published_from)
	}
	return data
}

export const retrieveBlogResponseTransformer = async (data: any): Promise<RetrieveBlogResponse> => {
	data = blogWithParagraphSchemaResponseTransformer(data)
	return data
}

export const updateBlogResponseTransformer = async (data: any): Promise<UpdateBlogResponse> => {
	data = blogWithParagraphSchemaResponseTransformer(data)
	return data
}

const blogTextParagraphSchemaResponseTransformer = (data: any) => {
	if (data.created) {
		data.created = new Date(data.created)
	}
	if (data.modified) {
		data.modified = new Date(data.modified)
	}
	return data
}

export const createBlogTextParagraphResponseTransformer = async (
	data: any,
): Promise<CreateBlogTextParagraphResponse> => {
	data = blogTextParagraphSchemaResponseTransformer(data)
	return data
}

const blogImageParagraphSchemaResponseTransformer = (data: any) => {
	if (data.created) {
		data.created = new Date(data.created)
	}
	if (data.modified) {
		data.modified = new Date(data.modified)
	}
	return data
}

export const createBlogImageParagraphResponseTransformer = async (
	data: any,
): Promise<CreateBlogImageParagraphResponse> => {
	data = blogImageParagraphSchemaResponseTransformer(data)
	return data
}

export const retrieveBlogTextParagraphResponseTransformer = async (
	data: any,
): Promise<RetrieveBlogTextParagraphResponse> => {
	data = blogTextParagraphSchemaResponseTransformer(data)
	return data
}

export const updateBlogTextParagraphResponseTransformer = async (
	data: any,
): Promise<UpdateBlogTextParagraphResponse> => {
	data = blogTextParagraphSchemaResponseTransformer(data)
	return data
}

export const retrieveBlogImageParagraphResponseTransformer = async (
	data: any,
): Promise<RetrieveBlogImageParagraphResponse> => {
	data = blogImageParagraphSchemaResponseTransformer(data)
	return data
}

export const updateBlogImageParagraphResponseTransformer = async (
	data: any,
): Promise<UpdateBlogImageParagraphResponse> => {
	data = blogImageParagraphSchemaResponseTransformer(data)
	return data
}

const eventCommentSchemaResponseTransformer = (data: any) => {
	if (data.created) {
		data.created = new Date(data.created)
	}
	if (data.modified) {
		data.modified = new Date(data.modified)
	}
	return data
}

const baseEventSchemaResponseTransformer = (data: any) => {
	if (data.start) {
		data.start = new Date(data.start)
	}
	if (data.end) {
		data.end = new Date(data.end)
	}
	if (data.comments) {
		data.comments = data.comments.map((item: any) => {
			return eventCommentSchemaResponseTransformer(item)
		})
	}
	return data
}

const careerPartnerSchemaResponseTransformer = (data: any) => {
	if (data.events) {
		data.events = data.events.map((item: any) => {
			return baseEventSchemaResponseTransformer(item)
		})
	}
	return data
}

const careerPartnerPaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return careerPartnerSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listCareerPartnersResponseTransformer = async (data: any): Promise<ListCareerPartnersResponse> => {
	data = careerPartnerPaginationSchemaResponseTransformer(data)
	return data
}

export const createCareerPartnerResponseTransformer = async (data: any): Promise<CreateCareerPartnerResponse> => {
	data = careerPartnerSchemaResponseTransformer(data)
	return data
}

export const retrieveCareerPartnerResponseTransformer = async (data: any): Promise<RetrieveCareerPartnerResponse> => {
	data = careerPartnerSchemaResponseTransformer(data)
	return data
}

export const updateCareerPartnerResponseTransformer = async (data: any): Promise<UpdateCareerPartnerResponse> => {
	data = careerPartnerSchemaResponseTransformer(data)
	return data
}

const eventTicketTypeSchemaResponseTransformer = (data: any) => {
	if (data.available_from) {
		data.available_from = new Date(data.available_from)
	}
	if (data.available_to) {
		data.available_to = new Date(data.available_to)
	}
	if (data.cancel_to) {
		data.cancel_to = new Date(data.cancel_to)
	}
	if (data.modified) {
		data.modified = new Date(data.modified)
	}
	return data
}

const eventSchemaResponseTransformer = (data: any) => {
	if (data.start) {
		data.start = new Date(data.start)
	}
	if (data.end) {
		data.end = new Date(data.end)
	}
	if (data.ticket_types) {
		data.ticket_types = data.ticket_types.map((item: any) => {
			return eventTicketTypeSchemaResponseTransformer(item)
		})
	}
	if (data.comments) {
		data.comments = data.comments.map((item: any) => {
			return eventCommentSchemaResponseTransformer(item)
		})
	}
	return data
}

const eventPaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return eventSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listEventsResponseTransformer = async (data: any): Promise<ListEventsResponse> => {
	data = eventPaginationSchemaResponseTransformer(data)
	return data
}

export const createEventResponseTransformer = async (data: any): Promise<CreateEventResponse> => {
	data = eventSchemaResponseTransformer(data)
	return data
}

export const retrieveEventResponseTransformer = async (data: any): Promise<RetrieveEventResponse> => {
	data = eventSchemaResponseTransformer(data)
	return data
}

export const updateEventResponseTransformer = async (data: any): Promise<UpdateEventResponse> => {
	data = eventSchemaResponseTransformer(data)
	return data
}

const eventParticipationSchemaResponseTransformer = (data: any) => {
	if (data.participation_certificates_date_override) {
		data.participation_certificates_date_override = new Date(data.participation_certificates_date_override)
	}
	return data
}

const eventParticipationPaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return eventParticipationSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listEventParticipationsResponseTransformer = async (
	data: any,
): Promise<ListEventParticipationsResponse> => {
	data = eventParticipationPaginationSchemaResponseTransformer(data)
	return data
}

const membershipStatusSchemaResponseTransformer = (data: any) => {
	if (data.member_from) {
		data.member_from = new Date(data.member_from)
	}
	if (data.member_to) {
		data.member_to = new Date(data.member_to)
	}
	return data
}

const memberWithoutRelationsSchemaResponseTransformer = (data: any) => {
	if (data.status) {
		data.status = membershipStatusSchemaResponseTransformer(data.status)
	}
	if (data.date_of_birth) {
		data.date_of_birth = new Date(data.date_of_birth)
	}
	return data
}

const saleInvoiceSchemaResponseTransformer = (data: any) => {
	if (data.invoice_date) {
		data.invoice_date = new Date(data.invoice_date)
	}
	if (data.invoice_send_date_time) {
		data.invoice_send_date_time = new Date(data.invoice_send_date_time)
	}
	if (data.invoice_due_date) {
		data.invoice_due_date = new Date(data.invoice_due_date)
	}
	if (data.invoice_reminded_date_time) {
		data.invoice_reminded_date_time = new Date(data.invoice_reminded_date_time)
	}
	if (data.invoice_next_due_date) {
		data.invoice_next_due_date = new Date(data.invoice_next_due_date)
	}
	if (data.contribution_start) {
		data.contribution_start = new Date(data.contribution_start)
	}
	if (data.contribution_end) {
		data.contribution_end = new Date(data.contribution_end)
	}
	if (data.created) {
		data.created = new Date(data.created)
	}
	if (data.modified) {
		data.modified = new Date(data.modified)
	}
	return data
}

const rentalReservationSchemaResponseTransformer = (data: any) => {
	if (data.start) {
		data.start = new Date(data.start)
	}
	if (data.end) {
		data.end = new Date(data.end)
	}
	if (data.sale_invoice) {
		data.sale_invoice = saleInvoiceSchemaResponseTransformer(data.sale_invoice)
	}
	return data
}

const eventParticipationWithRelationsSchemaResponseTransformer = (data: any) => {
	if (data.participation_certificates_date_override) {
		data.participation_certificates_date_override = new Date(data.participation_certificates_date_override)
	}
	if (data.event) {
		data.event = eventSchemaResponseTransformer(data.event)
	}
	if (data.member) {
		data.member = memberWithoutRelationsSchemaResponseTransformer(data.member)
	}
	if (data.sale_invoice) {
		data.sale_invoice = saleInvoiceSchemaResponseTransformer(data.sale_invoice)
	}
	if (data.rental_reservation) {
		data.rental_reservation = rentalReservationSchemaResponseTransformer(data.rental_reservation)
	}
	return data
}

export const retrieveEventParticipationResponseTransformer = async (
	data: any,
): Promise<RetrieveEventParticipationResponse> => {
	data = eventParticipationWithRelationsSchemaResponseTransformer(data)
	return data
}

export const updateEventParticipationResponseTransformer = async (
	data: any,
): Promise<UpdateEventParticipationResponse> => {
	data = eventParticipationWithRelationsSchemaResponseTransformer(data)
	return data
}

const ticketTypePaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return eventTicketTypeSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listTicketTypesResponseTransformer = async (data: any): Promise<ListTicketTypesResponse> => {
	data = ticketTypePaginationSchemaResponseTransformer(data)
	return data
}

export const createTicketTypeResponseTransformer = async (data: any): Promise<CreateTicketTypeResponse> => {
	data = eventTicketTypeSchemaResponseTransformer(data)
	return data
}

export const retrieveTicketTypeResponseTransformer = async (data: any): Promise<RetrieveTicketTypeResponse> => {
	data = eventTicketTypeSchemaResponseTransformer(data)
	return data
}

export const updateTicketTypeResponseTransformer = async (data: any): Promise<UpdateTicketTypeResponse> => {
	data = eventTicketTypeSchemaResponseTransformer(data)
	return data
}

const galleryAlbumSchemaResponseTransformer = (data: any) => {
	if (data.date) {
		data.date = new Date(data.date)
	}
	return data
}

const galleryAlbumPaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return galleryAlbumSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listGalleryAlbumsResponseTransformer = async (data: any): Promise<ListGalleryAlbumsResponse> => {
	data = galleryAlbumPaginationSchemaResponseTransformer(data)
	return data
}

export const retrieveGalleryAlbumResponseTransformer = async (data: any): Promise<RetrieveGalleryAlbumResponse> => {
	data = galleryAlbumSchemaResponseTransformer(data)
	return data
}

const groupFolderWithChildrenSchemaResponseTransformer = (data: any) => {
	if (data.children) {
		data.children = data.children.map((item: any) => {
			return groupFolderWithChildrenSchemaResponseTransformer(item)
		})
	}
	return data
}

const groupFolderListRecursivePaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return groupFolderWithChildrenSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listGroupFoldersRecursiveResponseTransformer = async (
	data: any,
): Promise<ListGroupFoldersRecursiveResponse> => {
	data = groupFolderListRecursivePaginationSchemaResponseTransformer(data)
	return data
}

export const getV30GroupsFoldersRecursiveResponseTransformer = async (
	data: any,
): Promise<GetV30GroupsFoldersRecursiveResponse> => {
	data = groupFolderListRecursivePaginationSchemaResponseTransformer(data)
	return data
}

const groupSchemaResponseTransformer = (data: any) => {
	data.start = new Date(data.start)
	if (data.end) {
		data.end = new Date(data.end)
	}
	return data
}

const groupPaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return groupSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listGroupsResponseTransformer = async (data: any): Promise<ListGroupsResponse> => {
	data = groupPaginationSchemaResponseTransformer(data)
	return data
}

const collectionMembershipSchemaResponseTransformer = (data: any) => {
	data.start = new Date(data.start)
	if (data.end) {
		data.end = new Date(data.end)
	}
	return data
}

const groupWithMembershipsSchemaResponseTransformer = (data: any) => {
	data.start = new Date(data.start)
	if (data.end) {
		data.end = new Date(data.end)
	}
	if (data.memberships) {
		data.memberships = data.memberships.map((item: any) => {
			return collectionMembershipSchemaResponseTransformer(item)
		})
	}
	return data
}

export const retrieveGroupResponseTransformer = async (data: any): Promise<RetrieveGroupResponse> => {
	data = groupWithMembershipsSchemaResponseTransformer(data)
	return data
}

export const updateGroupResponseTransformer = async (data: any): Promise<UpdateGroupResponse> => {
	data = groupWithMembershipsSchemaResponseTransformer(data)
	return data
}

const groupMembershipSchemaResponseTransformer = (data: any) => {
	data.start = new Date(data.start)
	if (data.end) {
		data.end = new Date(data.end)
	}
	if (data.group) {
		data.group = groupSchemaResponseTransformer(data.group)
	}
	return data
}

const groupMembershipPaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return groupMembershipSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listGroupMembershipsResponseTransformer = async (data: any): Promise<ListGroupMembershipsResponse> => {
	data = groupMembershipPaginationSchemaResponseTransformer(data)
	return data
}

export const createGroupMembershipResponseTransformer = async (data: any): Promise<CreateGroupMembershipResponse> => {
	data = groupMembershipSchemaResponseTransformer(data)
	return data
}

export const retrieveGroupMembershipResponseTransformer = async (
	data: any,
): Promise<RetrieveGroupMembershipResponse> => {
	data = groupMembershipSchemaResponseTransformer(data)
	return data
}

export const updateGroupMembershipResponseTransformer = async (data: any): Promise<UpdateGroupMembershipResponse> => {
	data = groupMembershipSchemaResponseTransformer(data)
	return data
}

const taskSchemaResponseTransformer = (data: any) => {
	if (data.created) {
		data.created = new Date(data.created)
	}
	if (data.modified) {
		data.modified = new Date(data.modified)
	}
	if (data.completed) {
		data.completed = new Date(data.completed)
	}
	return data
}

const taskPaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return taskSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listTasksResponseTransformer = async (data: any): Promise<ListTasksResponse> => {
	data = taskPaginationSchemaResponseTransformer(data)
	return data
}

export const updateTaskResponseTransformer = async (data: any): Promise<UpdateTaskResponse> => {
	data = taskSchemaResponseTransformer(data)
	return data
}

const memberSchemaResponseTransformer = (data: any) => {
	if (data.status) {
		data.status = membershipStatusSchemaResponseTransformer(data.status)
	}
	if (data.statuses) {
		data.statuses = data.statuses.map((item: any) => {
			return membershipStatusSchemaResponseTransformer(item)
		})
	}
	if (data.date_of_birth) {
		data.date_of_birth = new Date(data.date_of_birth)
	}
	if (data.modified) {
		data.modified = new Date(data.modified)
	}
	return data
}

const memberPaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return memberSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listMembersResponseTransformer = async (data: any): Promise<ListMembersResponse> => {
	data = memberPaginationSchemaResponseTransformer(data)
	return data
}

export const createMemberResponseTransformer = async (data: any): Promise<CreateMemberResponse> => {
	data = memberSchemaResponseTransformer(data)
	return data
}

const memberWithCustomFieldsSchemaResponseTransformer = (data: any) => {
	if (data.status) {
		data.status = membershipStatusSchemaResponseTransformer(data.status)
	}
	if (data.statuses) {
		data.statuses = data.statuses.map((item: any) => {
			return membershipStatusSchemaResponseTransformer(item)
		})
	}
	if (data.date_of_birth) {
		data.date_of_birth = new Date(data.date_of_birth)
	}
	if (data.modified) {
		data.modified = new Date(data.modified)
	}
	return data
}

export const retrieveMemberResponseTransformer = async (data: any): Promise<RetrieveMemberResponse> => {
	data = memberWithCustomFieldsSchemaResponseTransformer(data)
	return data
}

export const updateMemberResponseTransformer = async (data: any): Promise<UpdateMemberResponse> => {
	data = memberWithCustomFieldsSchemaResponseTransformer(data)
	return data
}

const membershipStatusPaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return membershipStatusSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listMembershipStatusesResponseTransformer = async (data: any): Promise<ListMembershipStatusesResponse> => {
	data = membershipStatusPaginationSchemaResponseTransformer(data)
	return data
}

export const createMembershipStatusResponseTransformer = async (data: any): Promise<CreateMembershipStatusResponse> => {
	data = membershipStatusSchemaResponseTransformer(data)
	return data
}

export const retrieveMembershipStatusResponseTransformer = async (
	data: any,
): Promise<RetrieveMembershipStatusResponse> => {
	data = membershipStatusSchemaResponseTransformer(data)
	return data
}

export const updateMembershipStatusResponseTransformer = async (data: any): Promise<UpdateMembershipStatusResponse> => {
	data = membershipStatusSchemaResponseTransformer(data)
	return data
}

const elasticMemberSchemaResponseTransformer = (data: any) => {
	if (data.membership_start) {
		data.membership_start = new Date(data.membership_start)
	}
	if (data.membership_end) {
		data.membership_end = new Date(data.membership_end)
	}
	return data
}

const elasticMemberPaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return elasticMemberSchemaResponseTransformer(item)
		})
	}
	return data
}

export const searchMembersResponseTransformer = async (data: any): Promise<SearchMembersResponse> => {
	data = elasticMemberPaginationSchemaResponseTransformer(data)
	return data
}

const newsCommentSchemaResponseTransformer = (data: any) => {
	if (data.created) {
		data.created = new Date(data.created)
	}
	if (data.modified) {
		data.modified = new Date(data.modified)
	}
	return data
}

const newsSchemaResponseTransformer = (data: any) => {
	data.published_from = new Date(data.published_from)
	data.actual_to = new Date(data.actual_to)
	if (data.comments) {
		data.comments = data.comments.map((item: any) => {
			return newsCommentSchemaResponseTransformer(item)
		})
	}
	return data
}

const newsPaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return newsSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listNewsResponseTransformer = async (data: any): Promise<ListNewsResponse> => {
	data = newsPaginationSchemaResponseTransformer(data)
	return data
}

export const createNewsResponseTransformer = async (data: any): Promise<CreateNewsResponse> => {
	data = newsSchemaResponseTransformer(data)
	return data
}

export const retrieveNewsResponseTransformer = async (data: any): Promise<RetrieveNewsResponse> => {
	data = newsSchemaResponseTransformer(data)
	return data
}

export const updateNewsResponseTransformer = async (data: any): Promise<UpdateNewsResponse> => {
	data = newsSchemaResponseTransformer(data)
	return data
}

const organisationMembershipSchemaResponseTransformer = (data: any) => {
	data.start = new Date(data.start)
	if (data.end) {
		data.end = new Date(data.end)
	}
	if (data.organisation) {
		data.organisation = groupSchemaResponseTransformer(data.organisation)
	}
	return data
}

const organisationMembershipPaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return organisationMembershipSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listOrganisationMembershipsResponseTransformer = async (
	data: any,
): Promise<ListOrganisationMembershipsResponse> => {
	data = organisationMembershipPaginationSchemaResponseTransformer(data)
	return data
}

export const createOrganisationMembershipResponseTransformer = async (
	data: any,
): Promise<CreateOrganisationMembershipResponse> => {
	data = organisationMembershipSchemaResponseTransformer(data)
	return data
}

export const retrieveOrganisationMembershipResponseTransformer = async (
	data: any,
): Promise<RetrieveOrganisationMembershipResponse> => {
	data = organisationMembershipSchemaResponseTransformer(data)
	return data
}

export const updateOrganisationMembershipResponseTransformer = async (
	data: any,
): Promise<UpdateOrganisationMembershipResponse> => {
	data = organisationMembershipSchemaResponseTransformer(data)
	return data
}

const productFolderWithChildrenSchemaResponseTransformer = (data: any) => {
	if (data.children) {
		data.children = data.children.map((item: any) => {
			return productFolderWithChildrenSchemaResponseTransformer(item)
		})
	}
	return data
}

const productFolderListRecursivePaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return productFolderWithChildrenSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listProductFoldersRecursiveResponseTransformer = async (
	data: any,
): Promise<ListProductFoldersRecursiveResponse> => {
	data = productFolderListRecursivePaginationSchemaResponseTransformer(data)
	return data
}

const productSchemaResponseTransformer = (data: any) => {
	if (data.created) {
		data.created = new Date(data.created)
	}
	if (data.modified) {
		data.modified = new Date(data.modified)
	}
	return data
}

const productPaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return productSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listProductsResponseTransformer = async (data: any): Promise<ListProductsResponse> => {
	data = productPaginationSchemaResponseTransformer(data)
	return data
}

export const createProductResponseTransformer = async (data: any): Promise<CreateProductResponse> => {
	data = productSchemaResponseTransformer(data)
	return data
}

export const retrieveProductResponseTransformer = async (data: any): Promise<RetrieveProductResponse> => {
	data = productSchemaResponseTransformer(data)
	return data
}

export const updateProductResponseTransformer = async (data: any): Promise<UpdateProductResponse> => {
	data = productSchemaResponseTransformer(data)
	return data
}

const saleInvoicePaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return saleInvoiceSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listSaleInvoicesResponseTransformer = async (data: any): Promise<ListSaleInvoicesResponse> => {
	data = saleInvoicePaginationSchemaResponseTransformer(data)
	return data
}

export const createSaleInvoiceResponseTransformer = async (data: any): Promise<CreateSaleInvoiceResponse> => {
	data = saleInvoiceSchemaResponseTransformer(data)
	return data
}

export const retrieveSaleInvoiceResponseTransformer = async (data: any): Promise<RetrieveSaleInvoiceResponse> => {
	data = saleInvoiceSchemaResponseTransformer(data)
	return data
}

export const updateSaleInvoiceResponseTransformer = async (data: any): Promise<UpdateSaleInvoiceResponse> => {
	data = saleInvoiceSchemaResponseTransformer(data)
	return data
}

const saleInvoiceWorkflowSchemaResponseTransformer = (data: any) => {
	if (data.created) {
		data.created = new Date(data.created)
	}
	if (data.modified) {
		data.modified = new Date(data.modified)
	}
	return data
}

const saleInvoiceWorkflowPaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return saleInvoiceWorkflowSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listSaleInvoiceWorkflowsResponseTransformer = async (
	data: any,
): Promise<ListSaleInvoiceWorkflowsResponse> => {
	data = saleInvoiceWorkflowPaginationSchemaResponseTransformer(data)
	return data
}

const webhookResponseSchemaResponseTransformer = (data: any) => {
	if (data.requested_at) {
		data.requested_at = new Date(data.requested_at)
	}
	return data
}

const webhookCallSchemaResponseTransformer = (data: any) => {
	if (data.created) {
		data.created = new Date(data.created)
	}
	if (data.responses) {
		data.responses = data.responses.map((item: any) => {
			return webhookResponseSchemaResponseTransformer(item)
		})
	}
	return data
}

const webhookCallPaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return webhookCallSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listWebhookCallsResponseTransformer = async (data: any): Promise<ListWebhookCallsResponse> => {
	data = webhookCallPaginationSchemaResponseTransformer(data)
	return data
}

const webpageSchemaResponseTransformer = (data: any) => {
	if (data.children) {
		data.children = data.children.map((item: any) => {
			return webpageSchemaResponseTransformer(item)
		})
	}
	return data
}

const webpagePaginationSchemaResponseTransformer = (data: any) => {
	if (data.data) {
		data.data = data.data.map((item: any) => {
			return webpageSchemaResponseTransformer(item)
		})
	}
	return data
}

export const listWebpagesResponseTransformer = async (data: any): Promise<ListWebpagesResponse> => {
	data = webpagePaginationSchemaResponseTransformer(data)
	return data
}

const webpageWithContentSchemaResponseTransformer = (data: any) => {
	if (data.children) {
		data.children = data.children.map((item: any) => {
			return webpageSchemaResponseTransformer(item)
		})
	}
	return data
}

export const retrieveWebpageResponseTransformer = async (data: any): Promise<RetrieveWebpageResponse> => {
	data = webpageWithContentSchemaResponseTransformer(data)
	return data
}

export const listWebsiteWebpagesResponseTransformer = async (data: any): Promise<ListWebsiteWebpagesResponse> => {
	data = webpagePaginationSchemaResponseTransformer(data)
	return data
}
