// This file is auto-generated by @hey-api/openapi-ts

export type _Error = {
	/**
	 * Error code
	 */
	code?: number
	/**
	 * Error name
	 */
	status?: string
	/**
	 * Error message
	 */
	message?: string
	/**
	 * Errors
	 */
	errors?: {
		[key: string]: unknown
	}
}

export type PaginationMetadata = {
	total?: number
	total_pages?: number
	first_page?: number
	last_page?: number
	page?: number
	previous_page?: number
	next_page?: number
}

export type BackgroundProcess = {
	readonly id?: number
	readonly uuid?: string | null
	readonly context?: string | null
	readonly state?: string | null
	readonly result?: unknown
	readonly humanized_message?: string
	readonly humanized_context?: string
	readonly task?: string | null
	readonly user_id?: unknown
	readonly created?: Date | null
	readonly modified?: Date | null
}

export type BackgroundProcessPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<BackgroundProcess>
}

export type BackgroundProcessResult = {
	readonly state?: string
	readonly result?: {
		[key: string]: unknown
	}
	readonly uuid?: string
}

export type BankImport = {
	readonly id?: number
	readonly created_at?: Date | null
	/**
	 * Match status for all mutations within this import
	 */
	status?: 'completed' | 'not completed'
}

export type BankStatement = {
	readonly id?: number
	bank_import?: BankImport
	readonly statement_id?: string | null
	readonly iban?: string | null
	readonly begin?: Date | null
	readonly end?: Date | null
}

export type SaleInvoicePayment = {
	readonly id?: unknown
	sale_invoice_id?: unknown
	payment_date_time?: unknown
	payment_type?: unknown
	payment_amount?: unknown
	payment_method?: unknown
	readonly payment_status?: unknown
	readonly created?: unknown
}

export type BankMutationMatch = {
	readonly id?: number
	readonly type?: string | null
	payment?: SaleInvoicePayment
	readonly payment_amount?: unknown
}

export type BankMutation = {
	readonly id?: number
	bank_statement?: BankStatement
	readonly matches?: Array<BankMutationMatch>
	/**
	 * Match status for this mutation
	 */
	status?: 'matched' | 'not mathced'
	readonly end_to_end_id?: string | null
	readonly mutation_date?: Date | null
	readonly iban?: string | null
	readonly name?: string | null
	readonly description?: string | null
	readonly amount?: number | null
	readonly prop_bank_code?: string | null
	readonly is_sdd?: boolean | null
	/**
	 * Reason code for reversed SEPA direct debit payments, only relevant when `is_sdd = true`
	 */
	readonly sdd_reason_code?: string | null
	/**
	 * Human readable information on the sdd_reason_code, only relevant when `is_sdd = true`
	 */
	readonly sdd_reason_code_description?: string | null
}

export type BankMutationPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<BankMutation>
}

export type SaleInvoiceBankMutationMatch = {
	sale_invoice_id?: number
	/**
	 * Amount to match. When empty, the unpaid amount for the sale invoice is used.
	 */
	amount?: number | null
}

export type StorageObject = {
	readonly id?: number
	url?: unknown
	url_sm?: unknown
	url_md?: unknown
	url_lg?: unknown
	is_image?: unknown
	type?: 'members' | 'files' | 'template' | 'groups' | 'user' | 'gallery' | 'contracts'
}

export type BlogAuthor = {
	readonly id?: number
	name: string
	description?: unknown
	image?: StorageObject
}

export type BlogAuthorPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<BlogAuthor>
}

export type Blog = {
	readonly id?: number
	title: string
	category_id: number
	author_id?: number | null
	issue_id?: number | null
	/**
	 * True when this blog is published on the website
	 */
	published?: boolean
	published_from?: Date | null
	/**
	 * Visibility level set for this blog
	 */
	visibility?: 'public' | 'protected' | 'private'
	/**
	 * True when only authenticated users are allowed to view this blog
	 */
	readonly authentication_required?: boolean
	/**
	 * Internal notes for this blog
	 */
	memo?: string
}

export type BlogPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<Blog>
}

export type BlogTextParagraph = {
	readonly id?: number
	template?: 'introduction' | 'normal' | 'quote'
	content: string
	order?: number | null
	readonly type?: string | null
	readonly created?: Date | null
	readonly modified?: Date | null
}

export type BlogImageParagraph = {
	readonly id?: number
	template?: 'full' | 'full-complete' | 'inline'
	caption?: string | null
	order?: number | null
	readonly type?: string | null
	readonly created?: Date | null
	readonly modified?: Date | null
	image?: StorageObject
}

export type BlogParagraph =
	| ({
			type: 'BlogTextParagraph'
	  } & BlogTextParagraph)
	| ({
			type: 'BlogImageParagraph'
	  } & BlogImageParagraph)

export type BlogWithParagraph = {
	readonly id?: number
	title: string
	category_id: number
	author_id?: number | null
	issue_id?: number | null
	/**
	 * True when this blog is published on the website
	 */
	published?: boolean
	published_from?: Date | null
	/**
	 * Visibility level set for this blog
	 */
	visibility?: 'public' | 'protected' | 'private'
	/**
	 * True when only authenticated users are allowed to view this blog
	 */
	readonly authentication_required?: boolean
	/**
	 * Internal notes for this blog
	 */
	memo?: string
	readonly paragraphs?: Array<BlogParagraph>
}

export type BaseWebsite = {
	readonly id?: number
	readonly name: string
	readonly url?: string
}

export type BlogCategory = {
	readonly id?: number
	name: string
	color?: string | null
	readonly slug?: string | null
	published?: boolean | null
	visibility?: 'public' | 'protected' | 'private'
	readonly websites?: Array<BaseWebsite>
}

export type BlogCategoryPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<BlogCategory>
}

export type BlogIssue = {
	readonly id?: number
	name: string
	description?: unknown
	image?: StorageObject
}

export type BlogIssuePagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<BlogIssue>
}

export type CareerPartnerCategory = {
	readonly id?: number
	name: string
	color?: string | null
	readonly slug?: string | null
	published?: boolean
	visibility?: 'public' | 'protected' | 'private'
	readonly websites?: Array<BaseWebsite>
}

export type CareerPartnerCategoryPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<CareerPartnerCategory>
}

export type Locale = {
	id?: number
	name?: string | null
	code?: string | null
}

export type Country = {
	readonly id?: number
	readonly name: string
	readonly name_local: string
	readonly name_locale_nl: string
	readonly name_locale_en?: string
	readonly country_code: string
	readonly calling_code: string
	default_locale?: Locale
}

export type Address = {
	address?: string | null
	zip: string | null
	city?: string | null
	province?: string | null
	country?: Country
	readonly lat?: number | null
	readonly lng?: number | null
	readonly location?: string | null
}

export type ClientEntity = {
	readonly id?: unknown
	client_id?: unknown
	fullname?: unknown
	name?: unknown
	address?: Address
	readonly currency?: unknown
	vat_number?: unknown
	coc_number?: unknown
}

export type EventCategoryBase = {
	id?: number
	/**
	 * Name of this category
	 */
	name: string
	/**
	 * Color for this category. A valid hex value is required. Default color is used when left blank.
	 */
	color?: string
	entity?: ClientEntity
}

export type CommentRate = {
	[key: string]: unknown
}

export type EventComment = {
	readonly id?: number
	member_id: number
	type?: string
	comment: string
	readonly rating?: number
	rates?: Array<CommentRate>
	readonly created?: Date
	readonly modified?: Date
	event_id?: number
}

export type BaseEvent = {
	readonly id?: number
	category?: EventCategoryBase
	/**
	 * Status for participating at this event
	 */
	status?: 'on sale' | 'waiting list' | 'sold out' | 'not on sale' | 'no participation'
	readonly slug?: string | null
	name: string
	description?: string | null
	/**
	 * True when this event is published on the website
	 */
	published?: boolean
	/**
	 * Visibility level set for this event
	 */
	visibility?: 'public' | 'protected' | 'private'
	/**
	 * True when only authenticated users are allowed to view this event
	 */
	readonly authentication_required?: boolean
	start?: Date
	end?: Date
	whole_day?: boolean | null
	location?: string | null
	/**
	 * Capacity for this event. Null means no capacity limit.
	 */
	num_tickets?: number | null
	/**
	 * Number of tickets that are sold for this event
	 */
	readonly num_tickets_sold?: number | null
	/**
	 * URL for this event on the website. If the association has multiple websites, the first available website on which this event is published, is used.
	 */
	readonly website_url?: string
	/**
	 * URL on the website to subscribe for this event. If the association has multiple websites, the first available website on which this event is published, is used.
	 */
	readonly website_subscribe_url?: string
	comments_open?: boolean | null
	readonly comments?: Array<EventComment> | null
	readonly media?: Array<StorageObject> | null
	/**
	 * Internal notes for this event
	 */
	memo?: string
}

export type CareerPartner = {
	readonly id: number
	name?: string | null
	/**
	 * Slug for this partner, used for navigation on the website
	 */
	slug: string
	category_id: number
	category?: CareerPartnerCategory
	address?: Address
	postal_address?: Address
	/**
	 * Description for this partner. HTML is allowed.
	 */
	description?: string
	/**
	 * Brief description for this partner. No HTML allowed.
	 */
	description_short?: string
	/**
	 * Email address for the partner
	 */
	email?: string
	url?: string
	logo?: StorageObject
	/**
	 * Internal notes for this partner
	 */
	memo?: string
	/**
	 * Invoice reference for this organisation
	 */
	invoice_reference?: string
	/**
	 * Invoice addressee attention for this organisation
	 */
	invoice_addressee_attention?: string
	/**
	 * Invoice address field for this organisation
	 */
	invoice_address_field: 'address' | 'postal_address'
	/**
	 * Invoice email address for this organisation. Leave empty to use the general email address.
	 */
	invoice_email?: string
	readonly events?: Array<BaseEvent>
}

export type CareerPartnerPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<CareerPartner>
}

export type SavedReply = {
	id?: number
	name: string
	category_id: number
	subject?: string | null
	message_json?: unknown
}

export type SavedReplyPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<SavedReply>
}

export type CountryPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<Country>
}

export type BasicFilter = {
	[key: string]: unknown
}

export type EventCategory = {
	id?: number
	/**
	 * Name of this category
	 */
	name: string
	/**
	 * Color for this category. A valid hex value is required. Default color is used when left blank.
	 */
	color?: string
	entity?: ClientEntity
	/**
	 * Set the publication of objects in this category.
	 */
	published?: boolean
	/**
	 * Set the visibility of objects in this category.
	 */
	visibility?: 'public' | 'protected' | 'private'
	filter?: BasicFilter
	readonly websites?: Array<BaseWebsite> | null
}

export type EventCategoryPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<EventCategory>
}

export type VatCategory = {
	readonly id?: unknown
	name?: unknown
	percentage?: unknown
}

export type EventTicketType = {
	/**
	 * Status for the availability of this ticket type. Ticket types with status "available", "limited" and "waiting list" are available for new participants.
	 */
	availability_status?: 'available' | 'limited' | 'waiting list' | 'sold out' | 'available soon' | 'unavailable'
	available_from?: Date | null
	available_to?: Date | null
	cancel_to?: Date | null
	/**
	 * Additional text added to the confirmation email for participants. Only added when the corresponding boolean is set to True
	 */
	confirmation_email_text?: string | null
	/**
	 * True when an additional text has to be added to the confirmation email for participants
	 */
	confirmation_email_text_enabled?: boolean
	/**
	 * Optional description for this ticket type
	 */
	description?: string | null
	readonly event_id?: number | null
	filter_id?: number | null
	readonly id?: number
	readonly modified?: Date | null
	/**
	 * Name for this ticket type
	 */
	name: string
	/**
	 * Max. number of tickets that could be sold for this ticket type
	 */
	num_tickets?: number
	readonly num_tickets_available?: unknown
	num_tickets_max?: number | null
	num_tickets_max_per?: string | null
	/**
	 * Number of tickets that are sold for this ticket type
	 */
	readonly num_tickets_sold?: number
	/**
	 * Price for this ticket. Set to 0 to show _free_, set to null to hide price.
	 */
	price?: number | null
	pricing_enabled?: boolean | null
	vat_category?: VatCategory
	visibility_level?: string
	waiting_list_enabled?: boolean | null
	/**
	 * Number of credits for the participation certificate. Set to 0 to disable certificate. Set to null to use the default value from the event.
	 */
	participation_certificate_credits?: number | null
}

export type RentalCategory = {
	id?: number
	/**
	 * Name of this category
	 */
	name: string
	/**
	 * Color for this category. A valid hex value is required. Default color is used when left blank.
	 */
	color?: string
}

export type CareerPartner1 = {
	readonly id: number
	name?: string | null
	/**
	 * Slug for this partner, used for navigation on the website
	 */
	slug: string
	category_id: number
	category?: CareerPartnerCategory
	address?: Address
	postal_address?: Address
	/**
	 * Description for this partner. HTML is allowed.
	 */
	description?: string
	/**
	 * Brief description for this partner. No HTML allowed.
	 */
	description_short?: string
	/**
	 * Email address for the partner
	 */
	email?: string
	url?: string
	logo?: StorageObject
	/**
	 * Internal notes for this partner
	 */
	memo?: string
	/**
	 * Invoice reference for this organisation
	 */
	invoice_reference?: string
	/**
	 * Invoice addressee attention for this organisation
	 */
	invoice_addressee_attention?: string
	/**
	 * Invoice address field for this organisation
	 */
	invoice_address_field: 'address' | 'postal_address'
	/**
	 * Invoice email address for this organisation. Leave empty to use the general email address.
	 */
	invoice_email?: string
}

export type Event = {
	readonly id?: number
	category?: EventCategoryBase
	/**
	 * Status for participating at this event
	 */
	status?: 'on sale' | 'waiting list' | 'sold out' | 'not on sale' | 'no participation'
	readonly slug?: string | null
	name: string
	description?: string | null
	/**
	 * True when this event is published on the website
	 */
	published?: boolean
	/**
	 * Visibility level set for this event
	 */
	visibility?: 'public' | 'protected' | 'private'
	/**
	 * True when only authenticated users are allowed to view this event
	 */
	readonly authentication_required?: boolean
	start?: Date
	end?: Date
	whole_day?: boolean | null
	location?: string | null
	show_participants?: boolean | null
	show_waiting_list?: boolean | null
	show_rented_items?: boolean | null
	/**
	 * Enable sign up for this event
	 */
	participation_enabled?: boolean
	/**
	 * Participation mode for this event. Use `"single"` for registration (one ticket) or `"ticketing"` for multiple tickets per participation.
	 */
	participation_mode?: 'none' | 'single' | 'ticketing'
	/**
	 * Enable billing for this event. When enabled, Congressus will handle invoicing and payments.
	 */
	participation_billing_enabled?: boolean
	/**
	 * Define if the participant is billed direct or later. When set to `"later"`, it is possible to update prices after the event, before invoices are sent.
	 */
	participation_billing_type?: 'direct' | 'later'
	/**
	 * Enable payment method `iDeal`
	 */
	participation_payment_ideal?: boolean
	/**
	 * Enable payment method `direct debit`
	 */
	participation_payment_direct_debit?: boolean
	/**
	 * Enable payment method `on invoice`
	 */
	participation_payment_on_invoice?: boolean
	/**
	 * Define if name and email is required per participation or per ticket.
	 */
	participation_information_collection_type?: 'order' | 'ticket'
	/**
	 * When enabled, Congressus generates tickets with a QR code which could be used to scan tickets at the door of the event. _Please note: additional charges apply for QR tickets_
	 */
	qr_ticketing_enabled?: boolean
	readonly ticket_types?: Array<EventTicketType>
	/**
	 * Capacity for this event. Null means no capacity limit.
	 */
	num_tickets?: number | null
	/**
	 * Number of tickets that are sold for this event
	 */
	readonly num_tickets_sold?: number | null
	/**
	 * Max. number of tickets that can be ordered at once. Only relevant for participation_mode=`"ticketing"`.
	 */
	num_tickets_max_per_order?: number
	/**
	 * Enables participants to add remarks to their order
	 */
	participant_remarks_enabled?: boolean
	/**
	 * Placeholder text for the participant remarks. Could be used for questions etc.
	 */
	participant_remarks_placeholder?: string
	/**
	 * Enables rental for participants. Only available when module rental is enabled.
	 */
	rental_enabled?: boolean
	/**
	 * Rental categories from which participants can rent items
	 */
	rental_categories?: Array<RentalCategory>
	/**
	 * Max. rental price per participation. When set to null, no limit is used.
	 */
	rental_max_price?: number | null
	readonly career_partners?: Array<CareerPartner1> | null
	/**
	 * URL for this event on the website. If the association has multiple websites, the first available website on which this event is published, is used.
	 */
	readonly website_url?: string
	/**
	 * URL on the website to subscribe for this event. If the association has multiple websites, the first available website on which this event is published, is used.
	 */
	readonly website_subscribe_url?: string
	comments_open?: boolean | null
	readonly comments?: Array<EventComment> | null
	readonly media?: Array<StorageObject> | null
	/**
	 * Internal notes for this event
	 */
	memo?: string
}

export type EventPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<Event>
}

export type EventParticipation = {
	readonly id?: number
	event_id: number
	member_id?: number
	readonly sale_invoice_id?: number
	readonly form_entry_id?: number
	rental_reservation_id?: number
	readonly addressee?: string
	readonly email?: string
	/**
	 * Number of tickets sold for this participation
	 */
	readonly num_tickets_sold?: number
	readonly uuid?: string
	/**
	 * Status for this participation. You can update this status with action endpoints.
	 */
	readonly status?: string
	readonly access_key?: string
	/**
	 * Remarks added by the participant during order
	 */
	remarks?: string
	/**
	 * Number of credits for the participation certificate. Set to 0 to disable certificate. Set to null to use the default value from the event.
	 */
	participation_certificates_credits_override?: number | null
	/**
	 * Date override for the participation certificate. Set to null to use the default value from the event.
	 */
	participation_certificates_date_override?: Date | null
}

export type EventParticipationPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<EventParticipation>
}

export type MembershipStatus = {
	readonly id?: number
	readonly name?: string
	status_id: number
	member_from?: Date
	readonly member_to?: Date
	/**
	 * Archived memberships are not able to log in on the website(s)
	 */
	readonly archived?: boolean
	/**
	 * Flag for deceased members, only available in our Enterprise plan
	 */
	readonly deceased?: boolean
}

export type MemberWithoutRelations = {
	readonly id: number
	username?: string
	status?: MembershipStatus
	statuses?: unknown
	gender?: 'm' | 'f' | 'o' | ''
	prefix?: string | null
	initials?: string | null
	nickname?: string | null
	given_name?: string | null
	first_name?: string | null
	primary_last_name_main?: string | null
	primary_last_name_prefix?: string | null
	readonly primary_last_name?: string
	secondary_last_name_main?: string | null
	secondary_last_name_prefix?: string | null
	readonly secondary_last_name?: string | null
	last_name_display?: string | null
	readonly last_name?: string
	readonly search_name?: string | null
	suffix?: string | null
	date_of_birth?: Date | null
	email?: string | null
}

export type EventParticipationTicket = {
	readonly id?: number
	name?: string | null
	email?: string | null
	readonly access_key?: string
	/**
	 * Status for the presence of this participation.
	 */
	status_presence?: 'unknown' | 'present' | 'not present'
	/**
	 * Base64 encoded QR code
	 */
	readonly ticket_qrcode?: string
}

export type SaleInvoiceItem = {
	readonly id?: unknown
	readonly sale_invoice_id?: unknown
	/**
	 * id of the product offer (variant) for this item
	 */
	product_offer_id: number
	readonly name?: string
	readonly description?: string
	/**
	 * quantity of the item, default is 1
	 */
	quantity?: number
	/**
	 * price for a single item, default is the price of the product offer
	 */
	price?: number
	sort_order?: unknown
	readonly vat_percentage?: unknown
	readonly vat_category_id?: unknown
	readonly vat_category?: string
	readonly uuid?: unknown
}

export type SaleInvoice = {
	readonly id?: number
	readonly uuid?: string | null
	/**
	 * ID of the entity to use for this sale invoice.
	 */
	entity_id?: number
	entity?: ClientEntity
	invoice_date?: Date | null
	readonly invoice_source: string
	invoice_type?: 'event_participation' | 'webshop' | 'contribution' | 'planning' | 'rental'
	readonly delivery_method?: string | null
	readonly invoice_send_date_time?: Date | null
	readonly invoice_due_date?: Date | null
	readonly invoice_reminded_date_time?: Date | null
	readonly invoice_num_reminders_send?: number | null
	readonly invoice_next_due_date?: Date | null
	/**
	 * Status of the sale invoice. Follows the workflow. Cannot be set directly; use actions `send`, `remind` and `pay` instead.
	 */
	readonly invoice_status?: string
	invoice_reference?: string | null
	readonly invoice_number?: string | null
	member_id?: number
	/**
	 * ID of the collection (Group / Organisation) to which this sale invoice is addressed. Optional.
	 */
	collection_id?: number
	/**
	 * Set a contribution start date when this invoice contains contribution.
	 */
	contribution_start?: Date | null
	/**
	 * Set a contribution end date when this invoice contains contribution for a given period.
	 */
	contribution_end?: Date | null
	/**
	 * Set to true to use direct debit to collect this sale invoice. Take care: this value is normally set automatically when the associated member has a valid direct debit mandate, the workflow has direct debit enabled and the association has a valid direct debit contract with the bank.
	 */
	use_direct_debit?: boolean | null
	/**
	 * ID for the sale invoice workflow for this sale invoice. When omitted, the default workflow for the API is used.
	 */
	invoice_workflow_id?: number | null
	/**
	 * Required when collection_id and member_id are omitted.
	 */
	addressee?: string
	/**
	 * Attention of the addressee, commonly used when the addressee is a company.
	 */
	addressee_attention?: string
	email?: string
	address?: Address
	items: Array<SaleInvoiceItem>
	readonly payments?: Array<SaleInvoicePayment>
	readonly price_inclusive_vat?: unknown
	readonly price_exclusive_vat?: unknown
	readonly vat?: unknown
	readonly price_paid?: unknown
	readonly price_unpaid?: unknown
	readonly currency?: unknown
	readonly created?: Date | null
	readonly modified?: Date | null
}

export type RentalItem = {
	id?: number
	category?: RentalCategory
	name?: unknown
	description?: unknown
}

export type RentalReservation = {
	id?: number
	type?: string | null
	start?: Date
	end?: Date
	whole_day?: boolean
	readonly rental_items?: Array<RentalItem>
	sale_invoice?: SaleInvoice
	readonly access_key?: string
}

export type EventParticipationWithRelations = {
	readonly id?: number
	readonly event_id: number
	readonly member_id?: number
	readonly sale_invoice_id?: number
	readonly form_entry_id?: number
	readonly rental_reservation_id?: number
	readonly addressee?: string
	readonly email?: string
	/**
	 * Number of tickets sold for this participation
	 */
	readonly num_tickets_sold?: number
	readonly uuid?: string
	/**
	 * Status for this participation. You can update this status with action endpoints.
	 */
	readonly status?: string
	readonly access_key?: string
	/**
	 * Remarks added by the participant during order
	 */
	remarks?: string
	/**
	 * Number of credits for the participation certificate. Set to 0 to disable certificate. Set to null to use the default value from the event.
	 */
	participation_certificates_credits_override?: number | null
	/**
	 * Date override for the participation certificate. Set to null to use the default value from the event.
	 */
	participation_certificates_date_override?: Date | null
	event?: Event
	member?: MemberWithoutRelations
	readonly tickets?: Array<EventParticipationTicket>
	sale_invoice?: SaleInvoice
	rental_reservation?: RentalReservation
}

export type EventParticipationPresence = {
	/**
	 * Status for the presence of all tickets in this participation.
	 */
	status_presence: 'unknown' | 'present' | 'not present'
	/**
	 * Number of credits for the participation certificate. Set to 0 to disable certificate. Set to null to use the default value from the event.
	 */
	participation_certificates_credits_override?: number | null
	/**
	 * Date override for the participation certificate. Set to null to use the default value from the event.
	 */
	participation_certificates_date_override?: Date | null
}

export type EventParticipationConditional = {
	/**
	 * Check conditions for this transition. When set to False, the transition is always performed.
	 */
	check_conditions?: boolean
}

export type EventParticipationFine = {
	/**
	 * Percentage of the ticket price that is charged as a fine. Set to 0 to disable fines.
	 */
	fine_percentage?: number
}

export type EventParticipationBuilderTicket = {
	name?: string | null
	email?: string
	ticket_type_id?: number
}

export type EventParticipationBuilder = {
	addressee?: string | null
	email?: string
	tickets: Array<EventParticipationBuilderTicket>
	member_id?: number
	remarks?: string | null
	invoice_addressee?: string | null
	invoice_email?: string | null
	invoice_invoice_reference?: string | null
	invoice_address?: Address
}

export type TicketTypePagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<EventTicketType>
}

export type GalleryAlbum = {
	readonly id?: number
	readonly title?: string
	readonly description?: string
	readonly date?: Date
	readonly sort?: string
	readonly order?: number
	readonly breadcrumbs?: string
	readonly photo_count?: unknown
}

export type GalleryAlbumPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<GalleryAlbum>
}

export type GalleryPhoto = {
	readonly id?: number
	readonly title?: string
	readonly description?: string
	readonly width?: unknown
	readonly height?: unknown
	readonly urls?: unknown
}

export type GalleryPhotoPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<GalleryPhoto>
}

export type GroupFolderWithChildren = {
	readonly id?: number
	parent_id?: number | null
	name: string | null
	/**
	 * Slug for this group folder, used for navigation on the website
	 */
	slug: string
	/**
	 * Path used on the website for groups in this folder, based on the slugs of this folder and parent folders
	 */
	readonly path?: string
	/**
	 * True if this folder is published
	 */
	published?: boolean
	/**
	 * Order preference for memberships
	 */
	order_type?: 'lastname' | 'date' | 'sorted' | 'function'
	readonly children?: Array<GroupFolderWithChildren>
}

export type GroupFolderListRecursivePagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<GroupFolderWithChildren>
}

export type GroupFolder = {
	readonly id?: number
	parent_id?: number | null
	name: string | null
	/**
	 * Slug for this group folder, used for navigation on the website
	 */
	slug: string
	/**
	 * Path used on the website for groups in this folder, based on the slugs of this folder and parent folders
	 */
	readonly path?: string
	/**
	 * True if this folder is published
	 */
	published?: boolean
	/**
	 * Order preference for memberships
	 */
	order_type?: 'lastname' | 'date' | 'sorted' | 'function'
}

export type GroupFolderPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<GroupFolder>
}

export type Group = {
	readonly id: number
	folder_id?: number | null
	folder?: GroupFolder
	name?: string | null
	address?: Address
	postal_address?: Address
	/**
	 * Description for this group. HTML is allowed.
	 */
	description?: string
	/**
	 * Brief description for this group. No HTML allowed.
	 */
	description_short?: string
	/**
	 * Email address for the group
	 */
	email?: string
	url?: string
	logo?: StorageObject
	/**
	 * Slug for this group, used for navigation on the website
	 */
	slug: string
	/**
	 * Full path to this group, including the folder path
	 */
	readonly path?: string
	published?: boolean
	/**
	 * Start date of the group
	 */
	start: Date
	/**
	 * Optional end date of the group
	 */
	end?: Date
	/**
	 * Internal notes for this group
	 */
	memo?: string
}

export type GroupPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<Group>
}

export type CollectionMembership = {
	readonly id?: number
	member_id: number
	/**
	 * Start date of the membership
	 */
	start: Date
	/**
	 * Optional end date of the membership
	 */
	end?: Date
	function?: string | null
	may_edit_profile?: boolean
	may_manage_memberships?: boolean
	may_manage_storage_objects?: boolean
	/**
	 * True when the member self enrolled to this collection
	 */
	readonly is_self_enroll?: boolean
	/**
	 * Order preference for memberships, defined by the GroupFolder or OrganisationCategory resource
	 */
	order_type?: 'lastname' | 'date' | 'sorted' | 'function'
	/**
	 * Order for this membership, only used when `order_type` is set to 'sorted'
	 */
	order?: number
}

export type GroupWithMemberships = {
	readonly id: number
	folder_id?: number | null
	folder?: GroupFolder
	name?: string | null
	address?: Address
	postal_address?: Address
	/**
	 * Description for this group. HTML is allowed.
	 */
	description?: string
	/**
	 * Brief description for this group. No HTML allowed.
	 */
	description_short?: string
	/**
	 * Email address for the group
	 */
	email?: string
	url?: string
	logo?: StorageObject
	/**
	 * Slug for this group, used for navigation on the website
	 */
	slug: string
	/**
	 * Full path to this group, including the folder path
	 */
	readonly path?: string
	published?: boolean
	/**
	 * Start date of the group
	 */
	start: Date
	/**
	 * Optional end date of the group
	 */
	end?: Date
	/**
	 * Internal notes for this group
	 */
	memo?: string
	readonly memberships?: Array<CollectionMembership>
}

export type GroupMembership = {
	readonly id?: number
	member_id: number
	/**
	 * Start date of the membership
	 */
	start: Date
	/**
	 * Optional end date of the membership
	 */
	end?: Date
	function?: string | null
	may_edit_profile?: boolean
	may_manage_memberships?: boolean
	may_manage_storage_objects?: boolean
	/**
	 * True when the member self enrolled to this collection
	 */
	readonly is_self_enroll?: boolean
	/**
	 * Order preference for memberships, defined by the GroupFolder or OrganisationCategory resource
	 */
	order_type?: 'lastname' | 'date' | 'sorted' | 'function'
	/**
	 * Order for this membership, only used when `order_type` is set to 'sorted'
	 */
	order?: number
	group_id: number
	group?: Group
}

export type GroupMembershipPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<GroupMembership>
}

export type LogEntryUser = {
	readonly id?: unknown
	readonly display_name?: unknown
}

export type LogEntrySubject = {
	readonly id?: unknown
	readonly display_name?: unknown
	readonly color?: unknown
	readonly absolute_url?: unknown
}

export type Task = {
	readonly id?: number
	readonly type: string
	text?: string | null
	readonly subject_type: string
	readonly subject_id: number
	readonly author_id?: number | null
	readonly created?: Date | null
	readonly modified?: Date | null
	author?: LogEntryUser
	subject?: LogEntrySubject
	assignee_type?: string | null
	assignee_id?: number | null
	assignee?: LogEntryUser
	is_completed?: boolean
	readonly completed?: Date | null
	completed_by_id?: number | null
	completed_by?: LogEntryUser
}

export type TaskPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<Task>
}

export type UpdateTask = {
	readonly id?: number
	readonly type: string
	text?: string | null
	readonly subject_type: string
	readonly subject_id: number
	readonly author_id?: number | null
	readonly created?: Date | null
	readonly modified?: Date | null
	author?: LogEntryUser
	subject?: LogEntrySubject
	assignee_type?: string
	assignee_id?: number
	assignee?: LogEntryUser
	is_completed?: boolean
	readonly completed?: Date | null
	completed_by_id?: number | null
	completed_by?: LogEntryUser
}

export type MemberStatus = {
	readonly id?: number
	name: string
	/**
	 * Description for this member status, used for online sign up
	 */
	description?: string
	/**
	 * Archived status, members are not able to log in on the website(s)
	 */
	archived?: boolean
	/**
	 * Former member statuses, not currently in use in the administration
	 */
	hidden?: boolean
	/**
	 * Deceased status for passed away members, only available in our Enterprise plan
	 */
	deceased?: boolean
	/**
	 * Display order
	 */
	order?: number
}

export type MemberStatusListPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<MemberStatus>
}

export type ProductOffer = {
	readonly id?: number
	price?: number | null
	name?: unknown
}

export type MemberStatusWithFieldSettings = {
	readonly id?: number
	name: string
	/**
	 * Description for this member status, used for online sign up
	 */
	description?: string
	/**
	 * Archived status, members are not able to log in on the website(s)
	 */
	archived?: boolean
	/**
	 * Former member statuses, not currently in use in the administration
	 */
	hidden?: boolean
	/**
	 * Deceased status for passed away members, only available in our Enterprise plan
	 */
	deceased?: boolean
	/**
	 * Display order
	 */
	order?: number
	/**
	 * True when new members can sign up online for this member status
	 */
	is_available_for_online_sign_up?: boolean
	registration_product_offer?: ProductOffer
	membership_fee_product_offer?: ProductOffer
	/**
	 * Website(s) on which this member status is able to log in. Only working for member statuses that are not archived
	 */
	readonly websites?: Array<BaseWebsite>
	/**
	 * Website(s) on which this member status is visible in the member list
	 */
	readonly websites_member_list?: Array<BaseWebsite>
}

export type MemberFieldOption = {
	option_id?: number
	readonly option_value?: string
}

export type MemberField = {
	id?: unknown
	/**
	 * Internal reference of the field.
	 */
	ref: string
	/**
	 * Tab title for the field.
	 */
	readonly tab?: string
	/**
	 * Set title for the field.
	 */
	readonly set?: string
	readonly tab_order?: number
	readonly set_order?: number
	order?: number | null
	/**
	 * Title of the field.
	 */
	title: string
	/**
	 * Description of the field.
	 */
	description?: string | null
	/**
	 * Type of the field.
	 */
	type: string
	/**
	 * Data type of the field.
	 */
	readonly data_type?: string
	/**
	 * Available choices for this field. Only available for fields with type 'option' or 'option_multiple'.
	 */
	readonly choices?: Array<MemberFieldOption>
}

export type CustomFieldPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<MemberField>
}

export type Note = {
	readonly id?: number
	readonly type: string
	text?: string | null
	readonly subject_type: string
	readonly subject_id: number
	readonly author_id?: number | null
	readonly created?: Date | null
	readonly modified?: Date | null
	author?: LogEntryUser
	subject?: LogEntrySubject
}

export type Action = {
	readonly id?: number
	readonly type: string
	readonly text?: string | null
	readonly subject_type: string
	readonly subject_id: number
	readonly author_id?: number | null
	readonly created?: Date | null
	readonly modified?: Date | null
	author?: LogEntryUser
	subject?: LogEntrySubject
	readonly action?: unknown
}

export type Change = {
	readonly id?: number
	readonly type: string
	readonly text?: string | null
	readonly subject_type: string
	readonly subject_id: number
	readonly author_id?: number | null
	readonly created?: Date | null
	readonly modified?: Date | null
	author?: LogEntryUser
	subject?: LogEntrySubject
	readonly changes: unknown
	readonly changes_pretty?: unknown
}

export type LogEntry =
	| ({
			type: 'Note'
	  } & Note)
	| ({
			type: 'Task'
	  } & Task)
	| ({
			type: 'Action'
	  } & Action)
	| ({
			type: 'Change'
	  } & Change)

export type LogEntryPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<LogEntry>
}

export type CreateNote = {
	readonly id?: number
	readonly type: string
	text?: string | null
	readonly subject_type: string
	readonly subject_id: number
	readonly author_id?: number | null
	readonly created?: Date | null
	readonly modified?: Date | null
	author?: LogEntryUser
	subject?: LogEntrySubject
}

export type CreateTask = {
	readonly id?: number
	readonly type: string
	text?: string | null
	readonly subject_type: string
	readonly subject_id: number
	readonly author_id?: number | null
	readonly created?: Date | null
	readonly modified?: Date | null
	author?: LogEntryUser
	subject?: LogEntrySubject
	assignee_type?: 'Administrator' | 'AdministratorGroup'
	assignee_id?: number
	assignee?: LogEntryUser
	readonly is_completed?: boolean
	readonly completed?: Date | null
	readonly completed_by_id?: number | null
	completed_by?: LogEntryUser
}

export type CreateLogEntry =
	| ({
			type: 'Note'
	  } & CreateNote)
	| ({
			type: 'Task'
	  } & CreateTask)

export type UpdateNote = {
	readonly id?: number
	readonly type: string
	text?: string | null
	readonly subject_type: string
	readonly subject_id: number
	readonly author_id?: number | null
	readonly created?: Date | null
	readonly modified?: Date | null
	author?: LogEntryUser
	subject?: LogEntrySubject
}

export type UpdateLogEntry =
	| ({
			type: 'Note'
	  } & UpdateNote)
	| ({
			type: 'Task'
	  } & UpdateTask)

export type PhoneNumber = {
	number?: string | null
	readonly number_full?: string | null
	readonly number_full_MSISDN?: string | null
	readonly number_formatted?: string | null
	country?: Country
}

export type SddMandate = {
	readonly entity_id?: number
	readonly entity_name?: string
	reference?: unknown
	date?: unknown
	date_cancelled?: unknown
	readonly is_valid?: boolean
}

export type BankAccount = {
	iban?: string | null
	bic?: string | null
	readonly iban_formatted?: string | null
	readonly iban_masked?: string | null
	readonly sdd_mandates?: Array<SddMandate> | null
}

export type Member = {
	readonly id: number
	username?: string
	status?: MembershipStatus
	readonly statuses?: Array<MembershipStatus>
	gender?: 'm' | 'f' | 'o' | ''
	prefix?: string | null
	initials?: string | null
	nickname?: string | null
	given_name?: string | null
	first_name?: string | null
	primary_last_name_main?: string | null
	primary_last_name_prefix?: string | null
	readonly primary_last_name?: string
	secondary_last_name_main?: string | null
	secondary_last_name_prefix?: string | null
	readonly secondary_last_name?: string | null
	last_name_display?: string | null
	readonly last_name?: string
	readonly search_name?: string | null
	suffix?: string | null
	date_of_birth?: Date | null
	email?: string | null
	phone_mobile?: PhoneNumber | null
	phone_home?: PhoneNumber | null
	address?: Address | null
	profile_picture_id?: number | null
	profile_picture?: StorageObject | null
	formal_picture_id?: number | null
	formal_picture?: StorageObject | null
	readonly deleted?: boolean | null
	receive_sms?: boolean
	receive_mailings?: boolean
	show_almanac?: boolean
	show_almanac_addresses?: boolean
	show_almanac_phonenumbers?: boolean
	show_almanac_email?: boolean
	show_almanac_date_of_birth?: boolean
	show_almanac_custom_fields?: boolean
	readonly modified?: Date | null
	/**
	 * Internal notes for this member
	 */
	memo?: string | null
	bank_account?: BankAccount | null
}

export type MemberPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<Member>
}

export type CreateMember = {
	readonly id: number
	username?: string
	status?: MembershipStatus
	readonly statuses?: Array<MembershipStatus>
	gender?: 'm' | 'f' | 'o' | ''
	prefix?: string | null
	initials?: string | null
	nickname?: string | null
	given_name?: string | null
	first_name?: string | null
	primary_last_name_main: string
	primary_last_name_prefix?: string | null
	readonly primary_last_name?: string
	secondary_last_name_main?: string | null
	secondary_last_name_prefix?: string | null
	readonly secondary_last_name?: string | null
	last_name_display?: string | null
	readonly last_name?: string
	readonly search_name?: string | null
	suffix?: string | null
	date_of_birth?: Date | null
	email?: string | null
	phone_mobile?: PhoneNumber | null
	phone_home?: PhoneNumber | null
	address?: Address | null
	profile_picture_id?: number | null
	profile_picture?: StorageObject | null
	formal_picture_id?: number | null
	formal_picture?: StorageObject | null
	readonly deleted?: boolean | null
	receive_sms?: boolean
	receive_mailings?: boolean
	show_almanac?: boolean
	show_almanac_addresses?: boolean
	show_almanac_phonenumbers?: boolean
	show_almanac_email?: boolean
	show_almanac_date_of_birth?: boolean
	show_almanac_custom_fields?: boolean
	readonly modified?: Date | null
	/**
	 * Internal notes for this member
	 */
	memo?: string | null
	bank_account?: BankAccount | null
}

export type MemberWithCustomFields = {
	readonly id: number
	username?: string
	status?: MembershipStatus
	readonly statuses?: Array<MembershipStatus>
	gender?: 'm' | 'f' | 'o' | ''
	prefix?: string | null
	initials?: string | null
	nickname?: string | null
	given_name?: string | null
	first_name?: string | null
	primary_last_name_main?: string | null
	primary_last_name_prefix?: string | null
	readonly primary_last_name?: string
	secondary_last_name_main?: string | null
	secondary_last_name_prefix?: string | null
	readonly secondary_last_name?: string | null
	last_name_display?: string | null
	readonly last_name?: string
	readonly search_name?: string | null
	suffix?: string | null
	date_of_birth?: Date | null
	email?: string | null
	phone_mobile?: PhoneNumber | null
	phone_home?: PhoneNumber | null
	address?: Address | null
	profile_picture_id?: number | null
	profile_picture?: StorageObject | null
	formal_picture_id?: number | null
	formal_picture?: StorageObject | null
	readonly deleted?: boolean | null
	receive_sms?: boolean
	receive_mailings?: boolean
	show_almanac?: boolean
	show_almanac_addresses?: boolean
	show_almanac_phonenumbers?: boolean
	show_almanac_email?: boolean
	show_almanac_date_of_birth?: boolean
	show_almanac_custom_fields?: boolean
	readonly modified?: Date | null
	/**
	 * Internal notes for this member
	 */
	memo?: string | null
	bank_account?: BankAccount | null
	/**
	 * List with information for this member in additional fields. Both the value and meta information for the field are provided. This field is deprecated and will be removed in the future. Use `custom_field_data` instead.
	 * @deprecated
	 */
	readonly custom_fields?: unknown
}

export type MembershipStatusPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<MembershipStatus>
}

export type ElasticMember = {
	_score?: number
	id?: number
	readonly value?: unknown
	readonly name?: unknown
	username?: string
	type?: unknown
	email?: string
	phone_mobile?: string
	phone_home?: string
	address?: string
	zip?: string
	city?: string
	province?: string
	country_id?: number
	country?: string
	membership_start?: Date
	membership_end?: Date
	current_member_status_name?: string
	current_member_status_id?: number
	readonly manager_uri?: unknown
}

export type ElasticMemberPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<ElasticMember>
}

export type NewsComment = {
	readonly id?: number
	member_id: number
	type?: string
	comment: string
	readonly rating?: number
	rates?: Array<CommentRate>
	readonly created?: Date
	readonly modified?: Date
	news_id?: number
}

export type News = {
	readonly id?: number
	title: string
	content?: unknown
	published_from: Date
	actual_to: Date
	readonly is_published?: boolean
	readonly is_actual?: boolean
	readonly media?: Array<StorageObject> | null
	readonly comments?: Array<NewsComment> | null
	/**
	 * Internal notes for this news
	 */
	memo?: string
	readonly websites?: Array<BaseWebsite>
}

export type NewsPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<News>
}

export type Message = {
	readonly message?: string
	readonly context?: string
	readonly url?: string
	readonly icon?: string
}

export type Notifications = {
	messages?: Array<Message>
	background_processes?: Array<BackgroundProcess>
}

export type NotificationPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
}

export type OrganisationCategory = {
	readonly id?: number
	name: string
	color?: string | null
	readonly slug?: unknown
	published?: boolean
	visibility?: 'public' | 'protected' | 'private'
	readonly websites?: Array<BaseWebsite>
	/**
	 * Order preference for memberships
	 */
	order_type?: 'lastname' | 'date' | 'sorted' | 'function'
}

export type OrganisationCategoryPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<OrganisationCategory>
}

export type Organisation = {
	readonly id: number
	name?: string | null
	/**
	 * Slug for this organisation, used for navigation on the website
	 */
	slug: string
	category_id: number
	category?: OrganisationCategory
	address?: Address
	postal_address?: Address
	/**
	 * Description for this organisation. HTML is allowed.
	 */
	description?: string
	/**
	 * Brief description for this organisation. No HTML allowed.
	 */
	description_short?: string
	/**
	 * Email address for the organisation
	 */
	email?: string
	url?: string
	logo?: StorageObject
	/**
	 * Internal notes for this organisation
	 */
	memo?: string
	/**
	 * Invoice reference for this organisation
	 */
	invoice_reference?: string
	/**
	 * Invoice addressee attention for this organisation
	 */
	invoice_addressee_attention?: string
	/**
	 * Invoice address field for this organisation
	 */
	invoice_address_field: 'address' | 'postal_address'
	/**
	 * Invoice email address for this organisation. Leave empty to use the general email address.
	 */
	invoice_email?: string
}

export type OrganisationPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<Organisation>
}

export type OrganisationMembership = {
	readonly id?: number
	member_id: number
	/**
	 * Start date of the membership
	 */
	start: Date
	/**
	 * Optional end date of the membership
	 */
	end?: Date
	function?: string | null
	may_edit_profile?: boolean
	may_manage_memberships?: boolean
	may_manage_storage_objects?: boolean
	/**
	 * True when the member self enrolled to this collection
	 */
	readonly is_self_enroll?: boolean
	/**
	 * Order preference for memberships, defined by the GroupFolder or OrganisationCategory resource
	 */
	order_type?: 'lastname' | 'date' | 'sorted' | 'function'
	/**
	 * Order for this membership, only used when `order_type` is set to 'sorted'
	 */
	order?: number
	organisation_id: number
	organisation?: Group
}

export type OrganisationMembershipPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<OrganisationMembership>
}

export type ProductFolderWithChildren = {
	readonly id?: number
	parent_id?: number | null
	name: string | null
	/**
	 * Slug for this product folder, used for navigation on the website
	 */
	slug: string
	/**
	 * True if this folder is published
	 */
	published?: boolean
	/**
	 * Path used on the website for products in this folder, based on the slugs of this folder and parent folders
	 */
	readonly path?: string
	readonly children?: Array<ProductFolderWithChildren>
}

export type ProductFolderListRecursivePagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<ProductFolderWithChildren>
}

export type ProductFolder = {
	readonly id?: number
	parent_id?: number | null
	name: string | null
	/**
	 * Slug for this product folder, used for navigation on the website
	 */
	slug: string
	/**
	 * True if this folder is published
	 */
	published?: boolean
	/**
	 * Path used on the website for products in this folder, based on the slugs of this folder and parent folders
	 */
	readonly path?: string
}

export type ProductFolderPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<ProductFolder>
}

export type Product = {
	readonly id?: number
	/**
	 * id for the product offer (variant)
	 */
	product_offer_id?: number
	/**
	 * id for the product folder
	 */
	folder_id: number
	folder?: ProductFolder
	name?: string | null
	description?: string | null
	readonly media?: Array<StorageObject>
	/**
	 * True when this product is published on the website
	 */
	published?: boolean
	/**
	 * Price including VAT
	 */
	price?: number
	vat_category?: VatCategory
	vat_percentage?: number
	readonly type?: string | null
	/**
	 * True when this product is archived
	 */
	is_archived?: boolean
	created?: Date | null
	modified?: Date | null
	/**
	 * Internal notes for this product
	 */
	memo?: string | null
}

export type ProductPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<Product>
}

export type SaleInvoicePagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<SaleInvoice>
}

export type SaleInvoiceSend = {
	delivery_method?: string
	email_subject?: string | null
	email_text?: string | null
}

export type Schema = {
	[key: string]: unknown
}

export type SaleInvoiceItemPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<SaleInvoiceItem>
}

export type SaleInvoiceWorkflow = {
	created?: Date | null
	modified?: Date | null
	id: number
	type?: string | null
	name?: string | null
	memo?: string | null
	deleted?: boolean | null
	payment_conditions?: string | null
	sale_invoice_default_delivery_method?: string | null
	sale_invoice_email_subject?: string | null
	sale_invoice_email_text?: string | null
	sale_invoice_due_interval?: number | null
	use_direct_debit?: boolean | null
	direct_debit_payment_conditions?: string | null
	direct_debit_default_delivery_method?: string | null
	direct_debit_email_subject?: string | null
	direct_debit_email_text?: string | null
	direct_debit_due_interval?: number | null
	first_reminder_enabled?: boolean | null
	first_reminder_email_text?: string | null
	first_reminder_email_subject?: string | null
	first_reminder_auto_send?: boolean | null
	first_reminder_due_interval?: number | null
	first_reminder_auto_send_in_days?: number | null
	second_reminder_enabled?: boolean | null
	second_reminder_email_text?: string | null
	second_reminder_email_subject?: string | null
	second_reminder_due_interval?: number | null
	second_reminder_auto_send?: boolean | null
	second_reminder_auto_send_in_days?: number | null
	last_reminder_enabled?: boolean | null
	last_reminder_email_text?: string | null
	last_reminder_email_subject?: string | null
	last_reminder_due_interval?: number | null
	last_reminder_auto_send?: boolean | null
	last_reminder_auto_send_in_days?: number | null
	paid_send_email?: boolean | null
	paid_email?: string | null
	paid_email_subject?: string | null
	direct_debit_paid_send_email?: boolean | null
	direct_debit_paid_email?: string | null
	direct_debit_storno_send_email?: boolean | null
	direct_debit_storno_email?: string | null
	direct_debit_storno_email_subject?: string | null
}

export type SaleInvoiceWorkflowPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<SaleInvoiceWorkflow>
}

export type StorageObjectPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<StorageObject>
}

export type FileUpload = {
	file?: unknown
}

export type Webhook = {
	readonly id?: number
	url?: string
	readonly version?: string
	signal?:
		| 'member'
		| 'member_added'
		| 'member_updated'
		| 'member_deleted'
		| 'event'
		| 'event_added'
		| 'event_updated'
		| 'event_deleted'
		| 'event_participation'
		| 'event_participation_added'
		| 'event_participation_updated'
		| 'event_participation_deleted'
		| 'sale_invoice'
		| 'sale_invoice_added'
		| 'sale_invoice_updated'
		| 'sale_invoice_deleted'
	technical_contact_email?: string
	readonly http_basic_auth_key?: string
	http_basic_auth_enabled?: boolean
}

export type WebhookPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<Webhook>
}

export type WebhookResponse = {
	readonly id?: number
	readonly status_code?: number | null
	readonly duration?: number | null
	readonly payload?: string | null
	readonly urlversion?: unknown
	readonly signal: string
	readonly requested_at?: Date | null
	readonly headers?: unknown
}

export type WebhookCall = {
	readonly id?: number
	status?: string
	object_id?: number | null
	object_type?: string | null
	triggered_signal?: string | null
	readonly created?: Date | null
	webhook?: Webhook
	readonly responses?: Array<WebhookResponse>
}

export type WebhookCallPagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<WebhookCall>
}

export type Webpage = {
	id?: number
	parent_id?: number | null
	website_id?: number | null
	template_id?: number | null
	order?: number | null
	children?: Array<Webpage>
	published?: boolean | null
	show_in_menu?: 'always' | 'authenticated' | 'not_authenticated' | 'not'
	redirect_url?: string | null
	title?: string | null
	menu_title?: string | null
	slug?: string | null
	url?: string
}

export type WebpagePagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<Webpage>
}

export type ContentItem = {
	id?: number
	webpage_id?: number | null
	order?: number | null
	type: string
	size?: '12' | '9' | '8' | '6' | '4' | '3'
	size_percentage?: number
	published?: boolean | null
	content?: unknown
}

export type ContentRow = {
	readonly order?: number
	readonly content_items?: Array<ContentItem>
}

export type WebpageWithContent = {
	id?: number
	parent_id?: number | null
	website_id?: number | null
	template_id?: number | null
	order?: number | null
	children?: Array<Webpage>
	published?: boolean | null
	show_in_menu?: 'always' | 'authenticated' | 'not_authenticated' | 'not'
	redirect_url?: string | null
	title?: string | null
	menu_title?: string | null
	slug?: string | null
	url?: string
}

export type Website = {
	readonly id?: number
	readonly name: string
	readonly url?: string
	active?: boolean | null
	locale?: Locale
	description?: string | null
	ga_tracking_id?: string | null
	custom_domain?: string | null
	domain_path?: string | null
	font_base?: string | null
	font_headings?: string | null
	color_primary?: string | null
	color_secondary?: string | null
	color_background?: string | null
	readonly template_id?: number | null
}

export type WebsitePagination = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<Website>
}

export type BackgroundProcessPaginationWritable = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<unknown>
}

export type SaleInvoicePaymentWritable = {
	sale_invoice_id?: unknown
	payment_date_time?: unknown
	payment_type?: unknown
	payment_amount?: unknown
	payment_method?: unknown
}

export type BankMutationMatchWritable = {
	[key: string]: unknown
}

export type BankMutationWritable = {
	[key: string]: unknown
}

export type StorageObjectWritable = {
	url?: unknown
	url_sm?: unknown
	url_md?: unknown
	url_lg?: unknown
	is_image?: unknown
	type?: 'members' | 'files' | 'template' | 'groups' | 'user' | 'gallery' | 'contracts'
}

export type BlogAuthorWritable = {
	name: string
	description?: unknown
	image?: StorageObjectWritable
}

export type BlogWritable = {
	title: string
	category_id: number
	author_id?: number | null
	issue_id?: number | null
	/**
	 * True when this blog is published on the website
	 */
	published?: boolean
	published_from?: Date | null
	/**
	 * Visibility level set for this blog
	 */
	visibility?: 'public' | 'protected' | 'private'
	/**
	 * Internal notes for this blog
	 */
	memo?: string
}

export type BlogTextParagraphWritable = {
	template?: 'introduction' | 'normal' | 'quote'
	content: string
	order?: number | null
}

export type BlogImageParagraphWritable = {
	template?: 'full' | 'full-complete' | 'inline'
	caption?: string | null
	order?: number | null
	image_id?: number
}

export type BlogParagraphWritable =
	| ({
			type: 'BlogTextParagraphWritable'
	  } & BlogTextParagraphWritable)
	| ({
			type: 'BlogImageParagraphWritable'
	  } & BlogImageParagraphWritable)

export type BlogWithParagraphWritable = {
	title: string
	category_id: number
	author_id?: number | null
	issue_id?: number | null
	/**
	 * True when this blog is published on the website
	 */
	published?: boolean
	published_from?: Date | null
	/**
	 * Visibility level set for this blog
	 */
	visibility?: 'public' | 'protected' | 'private'
	/**
	 * Internal notes for this blog
	 */
	memo?: string
}

export type BlogCategoryWritable = {
	name: string
	color?: string | null
	published?: boolean | null
	visibility?: 'public' | 'protected' | 'private'
}

export type BlogIssueWritable = {
	name: string
	description?: unknown
	image?: StorageObjectWritable
}

export type CareerPartnerCategoryWritable = {
	name: string
	color?: string | null
	published?: boolean
	visibility?: 'public' | 'protected' | 'private'
}

export type CountryWritable = {
	[key: string]: unknown
}

export type AddressWritable = {
	address?: string | null
	zip: string | null
	city?: string | null
	province?: string | null
	country_id?: number
}

export type ClientEntityWritable = {
	client_id?: unknown
	fullname?: unknown
	name?: unknown
	address?: AddressWritable
	vat_number?: unknown
	coc_number?: unknown
}

export type CommentRateWritable = {
	[key: string]: unknown
}

export type EventCommentWritable = {
	member_id: number
	type?: string
	comment: string
	rates?: Array<CommentRateWritable>
	event_id?: number
}

export type BaseEventWritable = {
	category_id: number
	name: string
	description?: string | null
	/**
	 * True when this event is published on the website
	 */
	published?: boolean
	/**
	 * Visibility level set for this event
	 */
	visibility?: 'public' | 'protected' | 'private'
	start?: Date
	end?: Date
	whole_day?: boolean | null
	location?: string | null
	/**
	 * Capacity for this event. Null means no capacity limit.
	 */
	num_tickets?: number | null
	comments_open?: boolean | null
	/**
	 * Internal notes for this event
	 */
	memo?: string
}

export type CareerPartnerWritable = {
	name?: string | null
	/**
	 * Slug for this partner, used for navigation on the website
	 */
	slug: string
	category_id: number
	address?: AddressWritable
	postal_address?: AddressWritable
	/**
	 * Description for this partner. HTML is allowed.
	 */
	description?: string
	/**
	 * Brief description for this partner. No HTML allowed.
	 */
	description_short?: string
	/**
	 * Email address for the partner
	 */
	email?: string
	url?: string
	logo?: StorageObjectWritable
	/**
	 * Internal notes for this partner
	 */
	memo?: string
	/**
	 * Invoice reference for this organisation
	 */
	invoice_reference?: string
	/**
	 * Invoice addressee attention for this organisation
	 */
	invoice_addressee_attention?: string
	/**
	 * Invoice address field for this organisation
	 */
	invoice_address_field: 'address' | 'postal_address'
	/**
	 * Invoice email address for this organisation. Leave empty to use the general email address.
	 */
	invoice_email?: string
}

export type BasicFilterWritable = {
	[key: string]: unknown
}

export type EventCategoryWritable = {
	id?: number
	/**
	 * Name of this category
	 */
	name: string
	/**
	 * Color for this category. A valid hex value is required. Default color is used when left blank.
	 */
	color?: string
	entity?: ClientEntityWritable
	/**
	 * Set the publication of objects in this category.
	 */
	published?: boolean
	/**
	 * Set the visibility of objects in this category.
	 */
	visibility?: 'public' | 'protected' | 'private'
}

export type VatCategoryWritable = {
	name?: unknown
	percentage?: unknown
}

export type EventTicketTypeWritable = {
	available_from?: Date | null
	available_to?: Date | null
	cancel_to?: Date | null
	/**
	 * Additional text added to the confirmation email for participants. Only added when the corresponding boolean is set to True
	 */
	confirmation_email_text?: string | null
	/**
	 * True when an additional text has to be added to the confirmation email for participants
	 */
	confirmation_email_text_enabled?: boolean
	/**
	 * Optional description for this ticket type
	 */
	description?: string | null
	filter_id?: number | null
	/**
	 * Name for this ticket type
	 */
	name: string
	/**
	 * Max. number of tickets that could be sold for this ticket type
	 */
	num_tickets?: number
	num_tickets_max?: number | null
	num_tickets_max_per?: string | null
	/**
	 * Price for this ticket. Set to 0 to show _free_, set to null to hide price.
	 */
	price?: number | null
	pricing_enabled?: boolean | null
	vat_category_id: number | null
	visibility_level?: string
	waiting_list_enabled?: boolean | null
	/**
	 * Number of credits for the participation certificate. Set to 0 to disable certificate. Set to null to use the default value from the event.
	 */
	participation_certificate_credits?: number | null
}

export type CareerPartner1Writable = {
	name?: string | null
	/**
	 * Slug for this partner, used for navigation on the website
	 */
	slug: string
	category_id: number
	address?: AddressWritable
	postal_address?: AddressWritable
	/**
	 * Description for this partner. HTML is allowed.
	 */
	description?: string
	/**
	 * Brief description for this partner. No HTML allowed.
	 */
	description_short?: string
	/**
	 * Email address for the partner
	 */
	email?: string
	url?: string
	logo?: StorageObjectWritable
	/**
	 * Internal notes for this partner
	 */
	memo?: string
	/**
	 * Invoice reference for this organisation
	 */
	invoice_reference?: string
	/**
	 * Invoice addressee attention for this organisation
	 */
	invoice_addressee_attention?: string
	/**
	 * Invoice address field for this organisation
	 */
	invoice_address_field: 'address' | 'postal_address'
	/**
	 * Invoice email address for this organisation. Leave empty to use the general email address.
	 */
	invoice_email?: string
}

export type EventWritable = {
	category_id: number
	name: string
	description?: string | null
	/**
	 * True when this event is published on the website
	 */
	published?: boolean
	/**
	 * Visibility level set for this event
	 */
	visibility?: 'public' | 'protected' | 'private'
	start?: Date
	end?: Date
	whole_day?: boolean | null
	location?: string | null
	show_participants?: boolean | null
	show_waiting_list?: boolean | null
	show_rented_items?: boolean | null
	/**
	 * Enable sign up for this event
	 */
	participation_enabled?: boolean
	/**
	 * Participation mode for this event. Use `"single"` for registration (one ticket) or `"ticketing"` for multiple tickets per participation.
	 */
	participation_mode?: 'none' | 'single' | 'ticketing'
	/**
	 * Enable billing for this event. When enabled, Congressus will handle invoicing and payments.
	 */
	participation_billing_enabled?: boolean
	/**
	 * Define if the participant is billed direct or later. When set to `"later"`, it is possible to update prices after the event, before invoices are sent.
	 */
	participation_billing_type?: 'direct' | 'later'
	/**
	 * Enable payment method `iDeal`
	 */
	participation_payment_ideal?: boolean
	/**
	 * Enable payment method `direct debit`
	 */
	participation_payment_direct_debit?: boolean
	/**
	 * Enable payment method `on invoice`
	 */
	participation_payment_on_invoice?: boolean
	/**
	 * Define if name and email is required per participation or per ticket.
	 */
	participation_information_collection_type?: 'order' | 'ticket'
	/**
	 * When enabled, Congressus generates tickets with a QR code which could be used to scan tickets at the door of the event. _Please note: additional charges apply for QR tickets_
	 */
	qr_ticketing_enabled?: boolean
	/**
	 * Capacity for this event. Null means no capacity limit.
	 */
	num_tickets?: number | null
	/**
	 * Max. number of tickets that can be ordered at once. Only relevant for participation_mode=`"ticketing"`.
	 */
	num_tickets_max_per_order?: number
	/**
	 * Enables participants to add remarks to their order
	 */
	participant_remarks_enabled?: boolean
	/**
	 * Placeholder text for the participant remarks. Could be used for questions etc.
	 */
	participant_remarks_placeholder?: string
	/**
	 * Enables rental for participants. Only available when module rental is enabled.
	 */
	rental_enabled?: boolean
	/**
	 * Rental categories from which participants can rent items
	 */
	rental_categories?: Array<RentalCategory>
	/**
	 * Max. rental price per participation. When set to null, no limit is used.
	 */
	rental_max_price?: number | null
	comments_open?: boolean | null
	/**
	 * Internal notes for this event
	 */
	memo?: string
}

export type EventParticipationWritable = {
	event_id: number
	member_id?: number
	rental_reservation_id?: number
	/**
	 * Remarks added by the participant during order
	 */
	remarks?: string
	/**
	 * Number of credits for the participation certificate. Set to 0 to disable certificate. Set to null to use the default value from the event.
	 */
	participation_certificates_credits_override?: number | null
	/**
	 * Date override for the participation certificate. Set to null to use the default value from the event.
	 */
	participation_certificates_date_override?: Date | null
}

export type MembershipStatusWritable = {
	status_id: number
	member_from?: Date
}

export type MemberWithoutRelationsWritable = {
	username?: string
	statuses?: unknown
	gender?: 'm' | 'f' | 'o' | ''
	prefix?: string | null
	initials?: string | null
	nickname?: string | null
	given_name?: string | null
	first_name?: string | null
	primary_last_name_main?: string | null
	primary_last_name_prefix?: string | null
	secondary_last_name_main?: string | null
	secondary_last_name_prefix?: string | null
	last_name_display?: string | null
	suffix?: string | null
	date_of_birth?: Date | null
	email?: string | null
}

export type EventParticipationTicketWritable = {
	name?: string | null
	email?: string | null
	/**
	 * Status for the presence of this participation.
	 */
	status_presence?: 'unknown' | 'present' | 'not present'
}

export type SaleInvoiceItemWritable = {
	/**
	 * id of the product offer (variant) for this item
	 */
	product_offer_id: number
	/**
	 * quantity of the item, default is 1
	 */
	quantity?: number
	/**
	 * price for a single item, default is the price of the product offer
	 */
	price?: number
	sort_order?: unknown
}

export type SaleInvoiceWritable = {
	/**
	 * ID of the entity to use for this sale invoice.
	 */
	entity_id?: number
	invoice_date?: Date | null
	invoice_reference?: string | null
	member_id?: number
	/**
	 * ID of the collection (Group / Organisation) to which this sale invoice is addressed. Optional.
	 */
	collection_id?: number
	/**
	 * Set a contribution start date when this invoice contains contribution.
	 */
	contribution_start?: Date | null
	/**
	 * Set a contribution end date when this invoice contains contribution for a given period.
	 */
	contribution_end?: Date | null
	/**
	 * Set to true to use direct debit to collect this sale invoice. Take care: this value is normally set automatically when the associated member has a valid direct debit mandate, the workflow has direct debit enabled and the association has a valid direct debit contract with the bank.
	 */
	use_direct_debit?: boolean | null
	/**
	 * ID for the sale invoice workflow for this sale invoice. When omitted, the default workflow for the API is used.
	 */
	invoice_workflow_id?: number | null
	/**
	 * Required when collection_id and member_id are omitted.
	 */
	addressee?: string
	/**
	 * Attention of the addressee, commonly used when the addressee is a company.
	 */
	addressee_attention?: string
	email?: string
	address?: AddressWritable
	items: Array<SaleInvoiceItemWritable>
}

export type RentalItemWritable = {
	id?: number
	category_id: number
	name?: unknown
	description?: unknown
}

export type RentalReservationWritable = {
	id?: number
	type?: string | null
	start?: Date
	end?: Date
	whole_day?: boolean
	sale_invoice_id: number
}

export type EventParticipationWithRelationsWritable = {
	/**
	 * Remarks added by the participant during order
	 */
	remarks?: string
	/**
	 * Number of credits for the participation certificate. Set to 0 to disable certificate. Set to null to use the default value from the event.
	 */
	participation_certificates_credits_override?: number | null
	/**
	 * Date override for the participation certificate. Set to null to use the default value from the event.
	 */
	participation_certificates_date_override?: Date | null
}

export type GalleryAlbumPaginationWritable = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<unknown>
}

export type GalleryPhotoPaginationWritable = {
	total?: number
	has_prev?: boolean
	prev_num?: number | null
	has_next?: boolean
	next_num?: number | null
	data?: Array<unknown>
}

export type GroupFolderWithChildrenWritable = {
	parent_id?: number | null
	name: string | null
	/**
	 * Slug for this group folder, used for navigation on the website
	 */
	slug: string
	/**
	 * True if this folder is published
	 */
	published?: boolean
	/**
	 * Order preference for memberships
	 */
	order_type?: 'lastname' | 'date' | 'sorted' | 'function'
}

export type GroupFolderWritable = {
	parent_id?: number | null
	name: string | null
	/**
	 * Slug for this group folder, used for navigation on the website
	 */
	slug: string
	/**
	 * True if this folder is published
	 */
	published?: boolean
	/**
	 * Order preference for memberships
	 */
	order_type?: 'lastname' | 'date' | 'sorted' | 'function'
}

export type GroupWritable = {
	folder_id?: number | null
	name?: string | null
	address?: AddressWritable
	postal_address?: AddressWritable
	/**
	 * Description for this group. HTML is allowed.
	 */
	description?: string
	/**
	 * Brief description for this group. No HTML allowed.
	 */
	description_short?: string
	/**
	 * Email address for the group
	 */
	email?: string
	url?: string
	logo?: StorageObjectWritable
	/**
	 * Slug for this group, used for navigation on the website
	 */
	slug: string
	published?: boolean
	/**
	 * Start date of the group
	 */
	start: Date
	/**
	 * Optional end date of the group
	 */
	end?: Date
	/**
	 * Internal notes for this group
	 */
	memo?: string
}

export type CollectionMembershipWritable = {
	member_id: number
	/**
	 * Start date of the membership
	 */
	start: Date
	/**
	 * Optional end date of the membership
	 */
	end?: Date
	function?: string | null
	may_edit_profile?: boolean
	may_manage_memberships?: boolean
	may_manage_storage_objects?: boolean
	/**
	 * Order for this membership, only used when `order_type` is set to 'sorted'
	 */
	order?: number
}

export type GroupWithMembershipsWritable = {
	folder_id?: number | null
	name?: string | null
	address?: AddressWritable
	postal_address?: AddressWritable
	/**
	 * Description for this group. HTML is allowed.
	 */
	description?: string
	/**
	 * Brief description for this group. No HTML allowed.
	 */
	description_short?: string
	/**
	 * Email address for the group
	 */
	email?: string
	url?: string
	logo?: StorageObjectWritable
	/**
	 * Slug for this group, used for navigation on the website
	 */
	slug: string
	published?: boolean
	/**
	 * Start date of the group
	 */
	start: Date
	/**
	 * Optional end date of the group
	 */
	end?: Date
	/**
	 * Internal notes for this group
	 */
	memo?: string
}

export type GroupMembershipWritable = {
	member_id: number
	/**
	 * Start date of the membership
	 */
	start: Date
	/**
	 * Optional end date of the membership
	 */
	end?: Date
	function?: string | null
	may_edit_profile?: boolean
	may_manage_memberships?: boolean
	may_manage_storage_objects?: boolean
	/**
	 * Order for this membership, only used when `order_type` is set to 'sorted'
	 */
	order?: number
	group_id: number
}

export type TaskWritable = {
	text?: string | null
	assignee_type?: string | null
	assignee_id?: number | null
	is_completed?: boolean
	completed_by_id?: number | null
}

export type UpdateTaskWritable = {
	text?: string | null
	assignee_type?: string
	assignee_id?: number
	is_completed?: boolean
	completed_by_id?: number | null
}

export type MemberStatusWritable = {
	name: string
	/**
	 * Description for this member status, used for online sign up
	 */
	description?: string
	/**
	 * Archived status, members are not able to log in on the website(s)
	 */
	archived?: boolean
	/**
	 * Former member statuses, not currently in use in the administration
	 */
	hidden?: boolean
	/**
	 * Deceased status for passed away members, only available in our Enterprise plan
	 */
	deceased?: boolean
	/**
	 * Display order
	 */
	order?: number
}

export type ProductOfferWritable = {
	price?: number | null
	name?: unknown
}

export type MemberStatusWithFieldSettingsWritable = {
	name: string
	/**
	 * Description for this member status, used for online sign up
	 */
	description?: string
	/**
	 * Archived status, members are not able to log in on the website(s)
	 */
	archived?: boolean
	/**
	 * Former member statuses, not currently in use in the administration
	 */
	hidden?: boolean
	/**
	 * Deceased status for passed away members, only available in our Enterprise plan
	 */
	deceased?: boolean
	/**
	 * Display order
	 */
	order?: number
	/**
	 * True when new members can sign up online for this member status
	 */
	is_available_for_online_sign_up?: boolean
	registration_product_offer_id?: number
	membership_fee_product_offer_id?: number
}

export type MemberFieldOptionWritable = {
	option_id?: number
}

export type MemberFieldWritable = {
	id?: unknown
	/**
	 * Internal reference of the field.
	 */
	ref: string
	order?: number | null
	/**
	 * Title of the field.
	 */
	title: string
	/**
	 * Description of the field.
	 */
	description?: string | null
	/**
	 * Type of the field.
	 */
	type: string
}

export type NoteWritable = {
	text?: string | null
}

export type LogEntryWritable =
	| ({
			type: 'NoteWritable'
	  } & NoteWritable)
	| ({
			type: 'TaskWritable'
	  } & TaskWritable)

export type CreateNoteWritable = {
	text?: string | null
}

export type CreateTaskWritable = {
	text?: string | null
	assignee_type?: 'Administrator' | 'AdministratorGroup'
	assignee_id?: number
}

export type CreateLogEntryWritable =
	| ({
			type: 'CreateNoteWritable'
	  } & CreateNoteWritable)
	| ({
			type: 'CreateTaskWritable'
	  } & CreateTaskWritable)

export type UpdateNoteWritable = {
	text?: string | null
}

export type UpdateLogEntryWritable =
	| ({
			type: 'UpdateNoteWritable'
	  } & UpdateNoteWritable)
	| ({
			type: 'UpdateTaskWritable'
	  } & UpdateTaskWritable)

export type PhoneNumberWritable = {
	number?: string | null
	country_id?: number
}

export type SddMandateWritable = {
	reference?: unknown
	date?: unknown
	date_cancelled?: unknown
}

export type BankAccountWritable = {
	iban?: string | null
	bic?: string | null
}

export type MemberWritable = {
	username?: string
	gender?: 'm' | 'f' | 'o' | ''
	prefix?: string | null
	initials?: string | null
	nickname?: string | null
	given_name?: string | null
	first_name?: string | null
	primary_last_name_main?: string | null
	primary_last_name_prefix?: string | null
	secondary_last_name_main?: string | null
	secondary_last_name_prefix?: string | null
	last_name_display?: string | null
	suffix?: string | null
	date_of_birth?: Date | null
	email?: string | null
	phone_mobile?: PhoneNumberWritable | null
	phone_home?: PhoneNumberWritable | null
	address?: AddressWritable | null
	profile_picture_id?: number | null
	profile_picture?: StorageObjectWritable | null
	formal_picture_id?: number | null
	formal_picture?: StorageObjectWritable | null
	receive_sms?: boolean
	receive_mailings?: boolean
	show_almanac?: boolean
	show_almanac_addresses?: boolean
	show_almanac_phonenumbers?: boolean
	show_almanac_email?: boolean
	show_almanac_date_of_birth?: boolean
	show_almanac_custom_fields?: boolean
	/**
	 * Internal notes for this member
	 */
	memo?: string | null
	bank_account?: BankAccountWritable | null
}

export type CreateMemberWritable = {
	status_id: number
	member_from?: Date
	member_to?: Date
	username?: string
	gender?: 'm' | 'f' | 'o' | ''
	prefix?: string | null
	initials?: string | null
	nickname?: string | null
	given_name?: string | null
	first_name?: string | null
	primary_last_name_main: string
	primary_last_name_prefix?: string | null
	secondary_last_name_main?: string | null
	secondary_last_name_prefix?: string | null
	last_name_display?: string | null
	suffix?: string | null
	date_of_birth?: Date | null
	email?: string | null
	phone_mobile?: PhoneNumberWritable | null
	phone_home?: PhoneNumberWritable | null
	address?: AddressWritable | null
	profile_picture_id?: number | null
	profile_picture?: StorageObjectWritable | null
	formal_picture_id?: number | null
	formal_picture?: StorageObjectWritable | null
	receive_sms?: boolean
	receive_mailings?: boolean
	show_almanac?: boolean
	show_almanac_addresses?: boolean
	show_almanac_phonenumbers?: boolean
	show_almanac_email?: boolean
	show_almanac_date_of_birth?: boolean
	show_almanac_custom_fields?: boolean
	/**
	 * Internal notes for this member
	 */
	memo?: string | null
	bank_account?: BankAccountWritable | null
}

export type MemberWithCustomFieldsWritable = {
	username?: string
	gender?: 'm' | 'f' | 'o' | ''
	prefix?: string | null
	initials?: string | null
	nickname?: string | null
	given_name?: string | null
	first_name?: string | null
	primary_last_name_main?: string | null
	primary_last_name_prefix?: string | null
	secondary_last_name_main?: string | null
	secondary_last_name_prefix?: string | null
	last_name_display?: string | null
	suffix?: string | null
	date_of_birth?: Date | null
	email?: string | null
	phone_mobile?: PhoneNumberWritable | null
	phone_home?: PhoneNumberWritable | null
	address?: AddressWritable | null
	profile_picture_id?: number | null
	profile_picture?: StorageObjectWritable | null
	formal_picture_id?: number | null
	formal_picture?: StorageObjectWritable | null
	receive_sms?: boolean
	receive_mailings?: boolean
	show_almanac?: boolean
	show_almanac_addresses?: boolean
	show_almanac_phonenumbers?: boolean
	show_almanac_email?: boolean
	show_almanac_date_of_birth?: boolean
	show_almanac_custom_fields?: boolean
	/**
	 * Internal notes for this member
	 */
	memo?: string | null
	bank_account?: BankAccountWritable | null
}

export type ElasticMemberWritable = {
	_score?: number
	id?: number
	username?: string
	type?: unknown
	email?: string
	phone_mobile?: string
	phone_home?: string
	address?: string
	zip?: string
	city?: string
	province?: string
	country_id?: number
	country?: string
	membership_start?: Date
	membership_end?: Date
	current_member_status_name?: string
	current_member_status_id?: number
}

export type NewsCommentWritable = {
	member_id: number
	type?: string
	comment: string
	rates?: Array<CommentRateWritable>
	news_id?: number
}

export type NewsWritable = {
	title: string
	content?: unknown
	published_from: Date
	actual_to: Date
	/**
	 * Internal notes for this news
	 */
	memo?: string
}

export type NotificationsWritable = {
	messages?: Array<unknown>
	background_processes?: Array<unknown>
}

export type OrganisationCategoryWritable = {
	name: string
	color?: string | null
	published?: boolean
	visibility?: 'public' | 'protected' | 'private'
	/**
	 * Order preference for memberships
	 */
	order_type?: 'lastname' | 'date' | 'sorted' | 'function'
}

export type OrganisationWritable = {
	name?: string | null
	/**
	 * Slug for this organisation, used for navigation on the website
	 */
	slug: string
	category_id: number
	address?: AddressWritable
	postal_address?: AddressWritable
	/**
	 * Description for this organisation. HTML is allowed.
	 */
	description?: string
	/**
	 * Brief description for this organisation. No HTML allowed.
	 */
	description_short?: string
	/**
	 * Email address for the organisation
	 */
	email?: string
	url?: string
	logo?: StorageObjectWritable
	/**
	 * Internal notes for this organisation
	 */
	memo?: string
	/**
	 * Invoice reference for this organisation
	 */
	invoice_reference?: string
	/**
	 * Invoice addressee attention for this organisation
	 */
	invoice_addressee_attention?: string
	/**
	 * Invoice address field for this organisation
	 */
	invoice_address_field: 'address' | 'postal_address'
	/**
	 * Invoice email address for this organisation. Leave empty to use the general email address.
	 */
	invoice_email?: string
}

export type OrganisationMembershipWritable = {
	member_id: number
	/**
	 * Start date of the membership
	 */
	start: Date
	/**
	 * Optional end date of the membership
	 */
	end?: Date
	function?: string | null
	may_edit_profile?: boolean
	may_manage_memberships?: boolean
	may_manage_storage_objects?: boolean
	/**
	 * Order for this membership, only used when `order_type` is set to 'sorted'
	 */
	order?: number
	organisation_id: number
}

export type ProductFolderWithChildrenWritable = {
	parent_id?: number | null
	name: string | null
	/**
	 * Slug for this product folder, used for navigation on the website
	 */
	slug: string
	/**
	 * True if this folder is published
	 */
	published?: boolean
}

export type ProductFolderWritable = {
	parent_id?: number | null
	name: string | null
	/**
	 * Slug for this product folder, used for navigation on the website
	 */
	slug: string
	/**
	 * True if this folder is published
	 */
	published?: boolean
}

export type ProductWritable = {
	/**
	 * id for the product offer (variant)
	 */
	product_offer_id?: number
	/**
	 * id for the product folder
	 */
	folder_id: number
	name?: string | null
	description?: string | null
	/**
	 * True when this product is published on the website
	 */
	published?: boolean
	/**
	 * Price including VAT
	 */
	price?: number
	vat_category?: VatCategoryWritable
	vat_percentage?: number
	/**
	 * True when this product is archived
	 */
	is_archived?: boolean
	created?: Date | null
	modified?: Date | null
	/**
	 * Internal notes for this product
	 */
	memo?: string | null
}

export type SchemaWritable = {
	[key: string]: unknown
}

export type WebhookWritable = {
	url?: string
	signal?:
		| 'member'
		| 'member_added'
		| 'member_updated'
		| 'member_deleted'
		| 'event'
		| 'event_added'
		| 'event_updated'
		| 'event_deleted'
		| 'event_participation'
		| 'event_participation_added'
		| 'event_participation_updated'
		| 'event_participation_deleted'
		| 'sale_invoice'
		| 'sale_invoice_added'
		| 'sale_invoice_updated'
		| 'sale_invoice_deleted'
	technical_contact_email?: string
	http_basic_auth_enabled?: boolean
}

export type WebhookCallWritable = {
	status?: string
	object_id?: number | null
	object_type?: string | null
	triggered_signal?: string | null
}

export type ContentRowWritable = {
	[key: string]: unknown
}

export type WebsiteWritable = {
	active?: boolean | null
	locale?: Locale
	description?: string | null
	ga_tracking_id?: string | null
	custom_domain?: string | null
	domain_path?: string | null
	font_base?: string | null
	font_headings?: string | null
	color_primary?: string | null
	color_secondary?: string | null
	color_background?: string | null
}

export type ListBackgroundProcessesData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter by State
		 */
		state?: Array<'PENDING' | 'EXECUTING' | 'SUCCESS' | 'FAILURE'>
		/**
		 * Filter period on `created`
		 */
		created?: string
		/**
		 * Filter period on `modified`
		 */
		modified?: string
		page?: number
		page_size?: number
		order?: string | null
	}
	url: '/v30/background-processes'
}

export type ListBackgroundProcessesErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListBackgroundProcessesError = ListBackgroundProcessesErrors[keyof ListBackgroundProcessesErrors]

export type ListBackgroundProcessesResponses = {
	/**
	 * OK
	 */
	200: BackgroundProcessPagination
}

export type ListBackgroundProcessesResponse = ListBackgroundProcessesResponses[keyof ListBackgroundProcessesResponses]

export type RetrieveBackgroundProcessData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/background-processes/{obj_id}'
}

export type RetrieveBackgroundProcessErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveBackgroundProcessError = RetrieveBackgroundProcessErrors[keyof RetrieveBackgroundProcessErrors]

export type RetrieveBackgroundProcessResponses = {
	/**
	 * OK
	 */
	200: BackgroundProcess
}

export type RetrieveBackgroundProcessResponse =
	RetrieveBackgroundProcessResponses[keyof RetrieveBackgroundProcessResponses]

export type RetrieveBackgroundProcessResultData = {
	body?: never
	path: {
		obj_id: string
	}
	query?: never
	url: '/v30/background-processes/results/{obj_id}'
}

export type RetrieveBackgroundProcessResultErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveBackgroundProcessResultError =
	RetrieveBackgroundProcessResultErrors[keyof RetrieveBackgroundProcessResultErrors]

export type RetrieveBackgroundProcessResultResponses = {
	/**
	 * OK
	 */
	200: BackgroundProcessResult
}

export type RetrieveBackgroundProcessResultResponse =
	RetrieveBackgroundProcessResultResponses[keyof RetrieveBackgroundProcessResultResponses]

export type ListBankMutationsData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter period on `mutation_date`
		 */
		period_filter?: string
		/**
		 * Filter on `status`
		 */
		status?: 'matched' | 'not matched'
		/**
		 * Filter on `mutation_type`
		 */
		mutation_type?: 'sdd' | 'bank'
		/**
		 * Filter by Bank import
		 */
		bank_import_id?: Array<string>
		/**
		 * Filter by Bank statement
		 */
		bank_statement_id?: Array<string>
		/**
		 * Filter by Bank mutation
		 */
		bank_mutation_id?: Array<string>
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/bank'
}

export type ListBankMutationsErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListBankMutationsError = ListBankMutationsErrors[keyof ListBankMutationsErrors]

export type ListBankMutationsResponses = {
	/**
	 * OK
	 */
	200: BankMutationPagination
}

export type ListBankMutationsResponse = ListBankMutationsResponses[keyof ListBankMutationsResponses]

export type DeleteBankMutationData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/bank/{obj_id}'
}

export type DeleteBankMutationErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteBankMutationError = DeleteBankMutationErrors[keyof DeleteBankMutationErrors]

export type DeleteBankMutationResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteBankMutationResponse = DeleteBankMutationResponses[keyof DeleteBankMutationResponses]

export type RetrieveBankMutationData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/bank/{obj_id}'
}

export type RetrieveBankMutationErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveBankMutationError = RetrieveBankMutationErrors[keyof RetrieveBankMutationErrors]

export type RetrieveBankMutationResponses = {
	/**
	 * OK
	 */
	200: BankMutation
}

export type RetrieveBankMutationResponse = RetrieveBankMutationResponses[keyof RetrieveBankMutationResponses]

export type MatchBankMutationData = {
	body?: SaleInvoiceBankMutationMatch
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/bank/{obj_id}/match'
}

export type MatchBankMutationErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type MatchBankMutationError = MatchBankMutationErrors[keyof MatchBankMutationErrors]

export type MatchBankMutationResponses = {
	/**
	 * No content
	 */
	204: void
}

export type MatchBankMutationResponse = MatchBankMutationResponses[keyof MatchBankMutationResponses]

export type UnmatchBankMutationData = {
	body?: SaleInvoiceBankMutationMatch
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/bank/{obj_id}/unmatch'
}

export type UnmatchBankMutationErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UnmatchBankMutationError = UnmatchBankMutationErrors[keyof UnmatchBankMutationErrors]

export type UnmatchBankMutationResponses = {
	/**
	 * No content
	 */
	204: void
}

export type UnmatchBankMutationResponse = UnmatchBankMutationResponses[keyof UnmatchBankMutationResponses]

export type ListBlogAuthorsData = {
	body?: never
	path?: never
	query?: {
		page?: number
		page_size?: number
		order?: string | null
	}
	url: '/v30/blogs/authors'
}

export type ListBlogAuthorsErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListBlogAuthorsError = ListBlogAuthorsErrors[keyof ListBlogAuthorsErrors]

export type ListBlogAuthorsResponses = {
	/**
	 * OK
	 */
	200: BlogAuthorPagination
}

export type ListBlogAuthorsResponse = ListBlogAuthorsResponses[keyof ListBlogAuthorsResponses]

export type CreateBlogAuthorData = {
	body?: BlogAuthorWritable
	path?: never
	query?: never
	url: '/v30/blogs/authors'
}

export type CreateBlogAuthorErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateBlogAuthorError = CreateBlogAuthorErrors[keyof CreateBlogAuthorErrors]

export type CreateBlogAuthorResponses = {
	/**
	 * Created
	 */
	201: BlogAuthor
}

export type CreateBlogAuthorResponse = CreateBlogAuthorResponses[keyof CreateBlogAuthorResponses]

export type DeleteBlogAuthorData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/blogs/authors/{obj_id}'
}

export type DeleteBlogAuthorErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteBlogAuthorError = DeleteBlogAuthorErrors[keyof DeleteBlogAuthorErrors]

export type DeleteBlogAuthorResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteBlogAuthorResponse = DeleteBlogAuthorResponses[keyof DeleteBlogAuthorResponses]

export type RetrieveBlogAuthorData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/blogs/authors/{obj_id}'
}

export type RetrieveBlogAuthorErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveBlogAuthorError = RetrieveBlogAuthorErrors[keyof RetrieveBlogAuthorErrors]

export type RetrieveBlogAuthorResponses = {
	/**
	 * OK
	 */
	200: BlogAuthor
}

export type RetrieveBlogAuthorResponse = RetrieveBlogAuthorResponses[keyof RetrieveBlogAuthorResponses]

export type UpdateBlogAuthorData = {
	body?: BlogAuthorWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/blogs/authors/{obj_id}'
}

export type UpdateBlogAuthorErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateBlogAuthorError = UpdateBlogAuthorErrors[keyof UpdateBlogAuthorErrors]

export type UpdateBlogAuthorResponses = {
	/**
	 * Accepted
	 */
	202: BlogAuthor
}

export type UpdateBlogAuthorResponse = UpdateBlogAuthorResponses[keyof UpdateBlogAuthorResponses]

export type ListBlogsData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter period on `published_from`
		 */
		period_filter?: string
		/**
		 * Filter by Author
		 */
		author_id?: Array<number>
		/**
		 * Filter by Issue
		 */
		issue_id?: Array<number>
		/**
		 * Filter by Category
		 */
		category_id?: Array<number>
		/**
		 * Filter on `published`
		 */
		published?: 0 | 1
		/**
		 * Filter by Visibility
		 */
		visibility?: Array<'public' | 'protected'>
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/blogs'
}

export type ListBlogsErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListBlogsError = ListBlogsErrors[keyof ListBlogsErrors]

export type ListBlogsResponses = {
	/**
	 * OK
	 */
	200: BlogPagination
}

export type ListBlogsResponse = ListBlogsResponses[keyof ListBlogsResponses]

export type CreateBlogData = {
	body?: BlogWritable
	path?: never
	query?: never
	url: '/v30/blogs'
}

export type CreateBlogErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateBlogError = CreateBlogErrors[keyof CreateBlogErrors]

export type CreateBlogResponses = {
	/**
	 * Created
	 */
	201: Blog
}

export type CreateBlogResponse = CreateBlogResponses[keyof CreateBlogResponses]

export type DeleteBlogData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/blogs/{obj_id}'
}

export type DeleteBlogErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteBlogError = DeleteBlogErrors[keyof DeleteBlogErrors]

export type DeleteBlogResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteBlogResponse = DeleteBlogResponses[keyof DeleteBlogResponses]

export type RetrieveBlogData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/blogs/{obj_id}'
}

export type RetrieveBlogErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveBlogError = RetrieveBlogErrors[keyof RetrieveBlogErrors]

export type RetrieveBlogResponses = {
	/**
	 * OK
	 */
	200: BlogWithParagraph
}

export type RetrieveBlogResponse = RetrieveBlogResponses[keyof RetrieveBlogResponses]

export type UpdateBlogData = {
	body?: BlogWithParagraphWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/blogs/{obj_id}'
}

export type UpdateBlogErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateBlogError = UpdateBlogErrors[keyof UpdateBlogErrors]

export type UpdateBlogResponses = {
	/**
	 * Accepted
	 */
	202: BlogWithParagraph
}

export type UpdateBlogResponse = UpdateBlogResponses[keyof UpdateBlogResponses]

export type CreateBlogTextParagraphData = {
	body?: BlogTextParagraphWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/blogs/{obj_id}/paragraphs/text'
}

export type CreateBlogTextParagraphErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateBlogTextParagraphError = CreateBlogTextParagraphErrors[keyof CreateBlogTextParagraphErrors]

export type CreateBlogTextParagraphResponses = {
	/**
	 * Created
	 */
	201: BlogTextParagraph
}

export type CreateBlogTextParagraphResponse = CreateBlogTextParagraphResponses[keyof CreateBlogTextParagraphResponses]

export type CreateBlogImageParagraphData = {
	body?: BlogImageParagraphWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/blogs/{obj_id}/paragraphs/image'
}

export type CreateBlogImageParagraphErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateBlogImageParagraphError = CreateBlogImageParagraphErrors[keyof CreateBlogImageParagraphErrors]

export type CreateBlogImageParagraphResponses = {
	/**
	 * Created
	 */
	201: BlogImageParagraph
}

export type CreateBlogImageParagraphResponse =
	CreateBlogImageParagraphResponses[keyof CreateBlogImageParagraphResponses]

export type DeleteBlogTextParagraphData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/blogs/paragraphs/text/{obj_id}'
}

export type DeleteBlogTextParagraphErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteBlogTextParagraphError = DeleteBlogTextParagraphErrors[keyof DeleteBlogTextParagraphErrors]

export type DeleteBlogTextParagraphResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteBlogTextParagraphResponse = DeleteBlogTextParagraphResponses[keyof DeleteBlogTextParagraphResponses]

export type RetrieveBlogTextParagraphData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/blogs/paragraphs/text/{obj_id}'
}

export type RetrieveBlogTextParagraphErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveBlogTextParagraphError = RetrieveBlogTextParagraphErrors[keyof RetrieveBlogTextParagraphErrors]

export type RetrieveBlogTextParagraphResponses = {
	/**
	 * OK
	 */
	200: BlogTextParagraph
}

export type RetrieveBlogTextParagraphResponse =
	RetrieveBlogTextParagraphResponses[keyof RetrieveBlogTextParagraphResponses]

export type UpdateBlogTextParagraphData = {
	body?: BlogTextParagraphWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/blogs/paragraphs/text/{obj_id}'
}

export type UpdateBlogTextParagraphErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateBlogTextParagraphError = UpdateBlogTextParagraphErrors[keyof UpdateBlogTextParagraphErrors]

export type UpdateBlogTextParagraphResponses = {
	/**
	 * Accepted
	 */
	202: BlogTextParagraph
}

export type UpdateBlogTextParagraphResponse = UpdateBlogTextParagraphResponses[keyof UpdateBlogTextParagraphResponses]

export type DeleteBlogImageParagraphData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/blogs/paragraphs/image/{obj_id}'
}

export type DeleteBlogImageParagraphErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteBlogImageParagraphError = DeleteBlogImageParagraphErrors[keyof DeleteBlogImageParagraphErrors]

export type DeleteBlogImageParagraphResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteBlogImageParagraphResponse =
	DeleteBlogImageParagraphResponses[keyof DeleteBlogImageParagraphResponses]

export type RetrieveBlogImageParagraphData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/blogs/paragraphs/image/{obj_id}'
}

export type RetrieveBlogImageParagraphErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveBlogImageParagraphError = RetrieveBlogImageParagraphErrors[keyof RetrieveBlogImageParagraphErrors]

export type RetrieveBlogImageParagraphResponses = {
	/**
	 * OK
	 */
	200: BlogImageParagraph
}

export type RetrieveBlogImageParagraphResponse =
	RetrieveBlogImageParagraphResponses[keyof RetrieveBlogImageParagraphResponses]

export type UpdateBlogImageParagraphData = {
	body?: BlogImageParagraphWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/blogs/paragraphs/image/{obj_id}'
}

export type UpdateBlogImageParagraphErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateBlogImageParagraphError = UpdateBlogImageParagraphErrors[keyof UpdateBlogImageParagraphErrors]

export type UpdateBlogImageParagraphResponses = {
	/**
	 * Accepted
	 */
	202: BlogImageParagraph
}

export type UpdateBlogImageParagraphResponse =
	UpdateBlogImageParagraphResponses[keyof UpdateBlogImageParagraphResponses]

export type ListBlogCategoriesData = {
	body?: never
	path?: never
	query?: {
		page?: number
		page_size?: number
		order?: string | null
	}
	url: '/v30/blogs/categories'
}

export type ListBlogCategoriesErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListBlogCategoriesError = ListBlogCategoriesErrors[keyof ListBlogCategoriesErrors]

export type ListBlogCategoriesResponses = {
	/**
	 * OK
	 */
	200: BlogCategoryPagination
}

export type ListBlogCategoriesResponse = ListBlogCategoriesResponses[keyof ListBlogCategoriesResponses]

export type CreateBlogCategoryData = {
	body?: BlogCategoryWritable
	path?: never
	query?: never
	url: '/v30/blogs/categories'
}

export type CreateBlogCategoryErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateBlogCategoryError = CreateBlogCategoryErrors[keyof CreateBlogCategoryErrors]

export type CreateBlogCategoryResponses = {
	/**
	 * Created
	 */
	201: BlogCategory
}

export type CreateBlogCategoryResponse = CreateBlogCategoryResponses[keyof CreateBlogCategoryResponses]

export type DeleteBlogCategoryData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/blogs/categories/{obj_id}'
}

export type DeleteBlogCategoryErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteBlogCategoryError = DeleteBlogCategoryErrors[keyof DeleteBlogCategoryErrors]

export type DeleteBlogCategoryResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteBlogCategoryResponse = DeleteBlogCategoryResponses[keyof DeleteBlogCategoryResponses]

export type RetrieveBlogCategoryData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/blogs/categories/{obj_id}'
}

export type RetrieveBlogCategoryErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveBlogCategoryError = RetrieveBlogCategoryErrors[keyof RetrieveBlogCategoryErrors]

export type RetrieveBlogCategoryResponses = {
	/**
	 * OK
	 */
	200: BlogCategory
}

export type RetrieveBlogCategoryResponse = RetrieveBlogCategoryResponses[keyof RetrieveBlogCategoryResponses]

export type UpdateBlogCategoryData = {
	body?: BlogCategoryWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/blogs/categories/{obj_id}'
}

export type UpdateBlogCategoryErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateBlogCategoryError = UpdateBlogCategoryErrors[keyof UpdateBlogCategoryErrors]

export type UpdateBlogCategoryResponses = {
	/**
	 * Accepted
	 */
	202: BlogCategory
}

export type UpdateBlogCategoryResponse = UpdateBlogCategoryResponses[keyof UpdateBlogCategoryResponses]

export type ListBlogIssuesData = {
	body?: never
	path?: never
	query?: {
		page?: number
		page_size?: number
		order?: string | null
	}
	url: '/v30/blogs/issues'
}

export type ListBlogIssuesErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListBlogIssuesError = ListBlogIssuesErrors[keyof ListBlogIssuesErrors]

export type ListBlogIssuesResponses = {
	/**
	 * OK
	 */
	200: BlogIssuePagination
}

export type ListBlogIssuesResponse = ListBlogIssuesResponses[keyof ListBlogIssuesResponses]

export type CreateBlogIssueData = {
	body?: BlogIssueWritable
	path?: never
	query?: never
	url: '/v30/blogs/issues'
}

export type CreateBlogIssueErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateBlogIssueError = CreateBlogIssueErrors[keyof CreateBlogIssueErrors]

export type CreateBlogIssueResponses = {
	/**
	 * Created
	 */
	201: BlogIssue
}

export type CreateBlogIssueResponse = CreateBlogIssueResponses[keyof CreateBlogIssueResponses]

export type DeleteBlogIssueData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/blogs/issues/{obj_id}'
}

export type DeleteBlogIssueErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteBlogIssueError = DeleteBlogIssueErrors[keyof DeleteBlogIssueErrors]

export type DeleteBlogIssueResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteBlogIssueResponse = DeleteBlogIssueResponses[keyof DeleteBlogIssueResponses]

export type RetrieveBlogIssueData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/blogs/issues/{obj_id}'
}

export type RetrieveBlogIssueErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveBlogIssueError = RetrieveBlogIssueErrors[keyof RetrieveBlogIssueErrors]

export type RetrieveBlogIssueResponses = {
	/**
	 * OK
	 */
	200: BlogIssue
}

export type RetrieveBlogIssueResponse = RetrieveBlogIssueResponses[keyof RetrieveBlogIssueResponses]

export type UpdateBlogIssueData = {
	body?: BlogIssueWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/blogs/issues/{obj_id}'
}

export type UpdateBlogIssueErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateBlogIssueError = UpdateBlogIssueErrors[keyof UpdateBlogIssueErrors]

export type UpdateBlogIssueResponses = {
	/**
	 * Accepted
	 */
	202: BlogIssue
}

export type UpdateBlogIssueResponse = UpdateBlogIssueResponses[keyof UpdateBlogIssueResponses]

export type ListCareerPartnerCategoriesData = {
	body?: never
	path?: never
	query?: {
		page?: number
		page_size?: number
		order?: string | null
	}
	url: '/v30/career/partners/categories'
}

export type ListCareerPartnerCategoriesErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListCareerPartnerCategoriesError =
	ListCareerPartnerCategoriesErrors[keyof ListCareerPartnerCategoriesErrors]

export type ListCareerPartnerCategoriesResponses = {
	/**
	 * OK
	 */
	200: CareerPartnerCategoryPagination
}

export type ListCareerPartnerCategoriesResponse =
	ListCareerPartnerCategoriesResponses[keyof ListCareerPartnerCategoriesResponses]

export type CreateCareerPartnerCategoryData = {
	body?: CareerPartnerCategoryWritable
	path?: never
	query?: never
	url: '/v30/career/partners/categories'
}

export type CreateCareerPartnerCategoryErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateCareerPartnerCategoryError =
	CreateCareerPartnerCategoryErrors[keyof CreateCareerPartnerCategoryErrors]

export type CreateCareerPartnerCategoryResponses = {
	/**
	 * Created
	 */
	201: CareerPartnerCategory
}

export type CreateCareerPartnerCategoryResponse =
	CreateCareerPartnerCategoryResponses[keyof CreateCareerPartnerCategoryResponses]

export type DeleteCareerPartnerCategoryData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/career/partners/categories/{obj_id}'
}

export type DeleteCareerPartnerCategoryErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteCareerPartnerCategoryError =
	DeleteCareerPartnerCategoryErrors[keyof DeleteCareerPartnerCategoryErrors]

export type DeleteCareerPartnerCategoryResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteCareerPartnerCategoryResponse =
	DeleteCareerPartnerCategoryResponses[keyof DeleteCareerPartnerCategoryResponses]

export type RetrieveCareerPartnerCategoryData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/career/partners/categories/{obj_id}'
}

export type RetrieveCareerPartnerCategoryErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveCareerPartnerCategoryError =
	RetrieveCareerPartnerCategoryErrors[keyof RetrieveCareerPartnerCategoryErrors]

export type RetrieveCareerPartnerCategoryResponses = {
	/**
	 * OK
	 */
	200: CareerPartnerCategory
}

export type RetrieveCareerPartnerCategoryResponse =
	RetrieveCareerPartnerCategoryResponses[keyof RetrieveCareerPartnerCategoryResponses]

export type UpdateCareerPartnerCategoryData = {
	body?: CareerPartnerCategoryWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/career/partners/categories/{obj_id}'
}

export type UpdateCareerPartnerCategoryErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateCareerPartnerCategoryError =
	UpdateCareerPartnerCategoryErrors[keyof UpdateCareerPartnerCategoryErrors]

export type UpdateCareerPartnerCategoryResponses = {
	/**
	 * Accepted
	 */
	202: CareerPartnerCategory
}

export type UpdateCareerPartnerCategoryResponse =
	UpdateCareerPartnerCategoryResponses[keyof UpdateCareerPartnerCategoryResponses]

export type ListCareerPartnersData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter by Category
		 */
		career_partner_category_id?: Array<string>
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/career/partners'
}

export type ListCareerPartnersErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListCareerPartnersError = ListCareerPartnersErrors[keyof ListCareerPartnersErrors]

export type ListCareerPartnersResponses = {
	/**
	 * OK
	 */
	200: CareerPartnerPagination
}

export type ListCareerPartnersResponse = ListCareerPartnersResponses[keyof ListCareerPartnersResponses]

export type CreateCareerPartnerData = {
	body?: CareerPartnerWritable
	path?: never
	query?: never
	url: '/v30/career/partners'
}

export type CreateCareerPartnerErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateCareerPartnerError = CreateCareerPartnerErrors[keyof CreateCareerPartnerErrors]

export type CreateCareerPartnerResponses = {
	/**
	 * Created
	 */
	201: CareerPartner
}

export type CreateCareerPartnerResponse = CreateCareerPartnerResponses[keyof CreateCareerPartnerResponses]

export type DeleteCareerPartnerData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/career/partners/{obj_id}'
}

export type DeleteCareerPartnerErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteCareerPartnerError = DeleteCareerPartnerErrors[keyof DeleteCareerPartnerErrors]

export type DeleteCareerPartnerResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteCareerPartnerResponse = DeleteCareerPartnerResponses[keyof DeleteCareerPartnerResponses]

export type RetrieveCareerPartnerData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/career/partners/{obj_id}'
}

export type RetrieveCareerPartnerErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveCareerPartnerError = RetrieveCareerPartnerErrors[keyof RetrieveCareerPartnerErrors]

export type RetrieveCareerPartnerResponses = {
	/**
	 * OK
	 */
	200: CareerPartner
}

export type RetrieveCareerPartnerResponse = RetrieveCareerPartnerResponses[keyof RetrieveCareerPartnerResponses]

export type UpdateCareerPartnerData = {
	body?: CareerPartnerWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/career/partners/{obj_id}'
}

export type UpdateCareerPartnerErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateCareerPartnerError = UpdateCareerPartnerErrors[keyof UpdateCareerPartnerErrors]

export type UpdateCareerPartnerResponses = {
	/**
	 * Accepted
	 */
	202: CareerPartner
}

export type UpdateCareerPartnerResponse = UpdateCareerPartnerResponses[keyof UpdateCareerPartnerResponses]

export type ListSavedRepliesData = {
	body?: never
	path?: never
	query?: {
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/communication/saved-replies'
}

export type ListSavedRepliesErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListSavedRepliesError = ListSavedRepliesErrors[keyof ListSavedRepliesErrors]

export type ListSavedRepliesResponses = {
	/**
	 * OK
	 */
	200: SavedReplyPagination
}

export type ListSavedRepliesResponse = ListSavedRepliesResponses[keyof ListSavedRepliesResponses]

export type CreateSavedReplyData = {
	body?: SavedReply
	path?: never
	query?: never
	url: '/v30/communication/saved-replies'
}

export type CreateSavedReplyErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateSavedReplyError = CreateSavedReplyErrors[keyof CreateSavedReplyErrors]

export type CreateSavedReplyResponses = {
	/**
	 * Created
	 */
	201: SavedReply
}

export type CreateSavedReplyResponse = CreateSavedReplyResponses[keyof CreateSavedReplyResponses]

export type DeleteSavedReplyData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/communication/saved-replies/{obj_id}'
}

export type DeleteSavedReplyErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteSavedReplyError = DeleteSavedReplyErrors[keyof DeleteSavedReplyErrors]

export type DeleteSavedReplyResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteSavedReplyResponse = DeleteSavedReplyResponses[keyof DeleteSavedReplyResponses]

export type RetrieveSavedReplyData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/communication/saved-replies/{obj_id}'
}

export type RetrieveSavedReplyErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveSavedReplyError = RetrieveSavedReplyErrors[keyof RetrieveSavedReplyErrors]

export type RetrieveSavedReplyResponses = {
	/**
	 * OK
	 */
	200: SavedReply
}

export type RetrieveSavedReplyResponse = RetrieveSavedReplyResponses[keyof RetrieveSavedReplyResponses]

export type UpdateSavedReplyData = {
	body?: SavedReply
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/communication/saved-replies/{obj_id}'
}

export type UpdateSavedReplyErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateSavedReplyError = UpdateSavedReplyErrors[keyof UpdateSavedReplyErrors]

export type UpdateSavedReplyResponses = {
	/**
	 * Accepted
	 */
	202: SavedReply
}

export type UpdateSavedReplyResponse = UpdateSavedReplyResponses[keyof UpdateSavedReplyResponses]

export type ListCountriesData = {
	body?: never
	path?: never
	query?: {
		page?: number
		page_size?: number
		order?: string | null
	}
	url: '/v30/countries'
}

export type ListCountriesErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListCountriesError = ListCountriesErrors[keyof ListCountriesErrors]

export type ListCountriesResponses = {
	/**
	 * OK
	 */
	200: CountryPagination
}

export type ListCountriesResponse = ListCountriesResponses[keyof ListCountriesResponses]

export type RetrieveCountryData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/countries/{obj_id}'
}

export type RetrieveCountryErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveCountryError = RetrieveCountryErrors[keyof RetrieveCountryErrors]

export type RetrieveCountryResponses = {
	/**
	 * OK
	 */
	200: Country
}

export type RetrieveCountryResponse = RetrieveCountryResponses[keyof RetrieveCountryResponses]

export type ListEventCategoriesData = {
	body?: never
	path?: never
	query?: {
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/event-categories'
}

export type ListEventCategoriesErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListEventCategoriesError = ListEventCategoriesErrors[keyof ListEventCategoriesErrors]

export type ListEventCategoriesResponses = {
	/**
	 * OK
	 */
	200: EventCategoryPagination
}

export type ListEventCategoriesResponse = ListEventCategoriesResponses[keyof ListEventCategoriesResponses]

export type ListEventsData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter by Category
		 */
		category_id?: Array<number>
		/**
		 * Filter period on `start`, `end`
		 */
		period_filter?: string
		/**
		 * Filter on `published`
		 */
		published?: '0' | '1'
		/**
		 * Filter by Billing type
		 */
		participation_billing_enabled?: Array<'disabled' | 'direct' | 'later'>
		/**
		 * Filter by None
		 */
		participating_member_id?: Array<string>
		socie_app_id?: string
		member_id?: string
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/events'
}

export type ListEventsErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListEventsError = ListEventsErrors[keyof ListEventsErrors]

export type ListEventsResponses = {
	/**
	 * OK
	 */
	200: EventPagination
}

export type ListEventsResponse = ListEventsResponses[keyof ListEventsResponses]

export type CreateEventData = {
	body?: EventWritable
	path?: never
	query?: never
	url: '/v30/events'
}

export type CreateEventErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateEventError = CreateEventErrors[keyof CreateEventErrors]

export type CreateEventResponses = {
	/**
	 * Created
	 */
	201: Event
}

export type CreateEventResponse = CreateEventResponses[keyof CreateEventResponses]

export type DeleteEventData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/events/{obj_id}'
}

export type DeleteEventErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteEventError = DeleteEventErrors[keyof DeleteEventErrors]

export type DeleteEventResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteEventResponse = DeleteEventResponses[keyof DeleteEventResponses]

export type RetrieveEventData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/events/{obj_id}'
}

export type RetrieveEventErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveEventError = RetrieveEventErrors[keyof RetrieveEventErrors]

export type RetrieveEventResponses = {
	/**
	 * OK
	 */
	200: Event
}

export type RetrieveEventResponse = RetrieveEventResponses[keyof RetrieveEventResponses]

export type UpdateEventData = {
	body?: EventWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/events/{obj_id}'
}

export type UpdateEventErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateEventError = UpdateEventErrors[keyof UpdateEventErrors]

export type UpdateEventResponses = {
	/**
	 * Accepted
	 */
	202: Event
}

export type UpdateEventResponse = UpdateEventResponses[keyof UpdateEventResponses]

export type ListEventParticipationsData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: {
		/**
		 * Filter by Event
		 */
		event_id?: Array<string>
		/**
		 * Filter by Status
		 */
		status?: Array<'approved' | 'waiting list' | 'unsubscribed' | 'declined' | 'payment pending'>
		/**
		 * Filter on `has_invoice`
		 */
		has_invoice?: '0' | '1'
		/**
		 * Filter by Invoice status
		 */
		sale_invoice_status?: Array<'concept' | 'open' | 'late' | 'reminded' | 'pending_payment' | 'paid'>
		/**
		 * Filter by member_id
		 */
		member_id?: Array<number>
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/events/{obj_id}/participations'
}

export type ListEventParticipationsErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListEventParticipationsError = ListEventParticipationsErrors[keyof ListEventParticipationsErrors]

export type ListEventParticipationsResponses = {
	/**
	 * OK
	 */
	200: EventParticipationPagination
}

export type ListEventParticipationsResponse = ListEventParticipationsResponses[keyof ListEventParticipationsResponses]

export type RetrieveEventParticipationData = {
	body?: never
	path: {
		obj_id: number
		event_id: number
	}
	query?: never
	url: '/v30/events/{event_id}/participations/{obj_id}'
}

export type RetrieveEventParticipationErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveEventParticipationError = RetrieveEventParticipationErrors[keyof RetrieveEventParticipationErrors]

export type RetrieveEventParticipationResponses = {
	/**
	 * OK
	 */
	200: EventParticipationWithRelations
}

export type RetrieveEventParticipationResponse =
	RetrieveEventParticipationResponses[keyof RetrieveEventParticipationResponses]

export type UpdateEventParticipationData = {
	body?: EventParticipationWithRelationsWritable
	path: {
		obj_id: number
		event_id: number
	}
	query?: never
	url: '/v30/events/{event_id}/participations/{obj_id}'
}

export type UpdateEventParticipationErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateEventParticipationError = UpdateEventParticipationErrors[keyof UpdateEventParticipationErrors]

export type UpdateEventParticipationResponses = {
	/**
	 * Accepted
	 */
	202: EventParticipationWithRelations
}

export type UpdateEventParticipationResponse =
	UpdateEventParticipationResponses[keyof UpdateEventParticipationResponses]

export type SetPresenceData = {
	body?: EventParticipationPresence
	path: {
		obj_id: number
		event_id: number
	}
	query?: never
	url: '/v30/events/{event_id}/participations/{obj_id}/set-presence'
}

export type SetPresenceErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type SetPresenceError = SetPresenceErrors[keyof SetPresenceErrors]

export type SetPresenceResponses = {
	/**
	 * No content
	 */
	204: void
}

export type SetPresenceResponse = SetPresenceResponses[keyof SetPresenceResponses]

export type ApproveParticipationData = {
	body?: EventParticipationConditional
	path: {
		obj_id: number
		event_id: number
	}
	query?: never
	url: '/v30/events/{event_id}/participations/{obj_id}/approve'
}

export type ApproveParticipationErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ApproveParticipationError = ApproveParticipationErrors[keyof ApproveParticipationErrors]

export type ApproveParticipationResponses = {
	/**
	 * No content
	 */
	204: void
}

export type ApproveParticipationResponse = ApproveParticipationResponses[keyof ApproveParticipationResponses]

export type MoveToWaitingListData = {
	body?: EventParticipationConditional
	path: {
		obj_id: number
		event_id: number
	}
	query?: never
	url: '/v30/events/{event_id}/participations/{obj_id}/wait'
}

export type MoveToWaitingListErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type MoveToWaitingListError = MoveToWaitingListErrors[keyof MoveToWaitingListErrors]

export type MoveToWaitingListResponses = {
	/**
	 * No content
	 */
	204: void
}

export type MoveToWaitingListResponse = MoveToWaitingListResponses[keyof MoveToWaitingListResponses]

export type UnsubscribeParticipationData = {
	body?: EventParticipationFine
	path: {
		obj_id: number
		event_id: number
	}
	query?: never
	url: '/v30/events/{event_id}/participations/{obj_id}/unsubscribe'
}

export type UnsubscribeParticipationErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UnsubscribeParticipationError = UnsubscribeParticipationErrors[keyof UnsubscribeParticipationErrors]

export type UnsubscribeParticipationResponses = {
	/**
	 * No content
	 */
	204: void
}

export type UnsubscribeParticipationResponse =
	UnsubscribeParticipationResponses[keyof UnsubscribeParticipationResponses]

export type DeclineParticipationData = {
	body?: EventParticipationFine
	path: {
		obj_id: number
		event_id: number
	}
	query?: never
	url: '/v30/events/{event_id}/participations/{obj_id}/decline'
}

export type DeclineParticipationErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeclineParticipationError = DeclineParticipationErrors[keyof DeclineParticipationErrors]

export type DeclineParticipationResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeclineParticipationResponse = DeclineParticipationResponses[keyof DeclineParticipationResponses]

export type CreateEventParticipationData = {
	body?: EventParticipationBuilder
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/events/{obj_id}/sign-up'
}

export type CreateEventParticipationErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateEventParticipationError = CreateEventParticipationErrors[keyof CreateEventParticipationErrors]

export type CreateEventParticipationResponses = {
	/**
	 * Created
	 */
	201: EventParticipationBuilder
}

export type CreateEventParticipationResponse =
	CreateEventParticipationResponses[keyof CreateEventParticipationResponses]

export type ListTicketTypesData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: {
		/**
		 * Filter on `is_available_for_members`
		 */
		is_available_for_members?: '0' | '1'
		/**
		 * Filter on `is_available_for_external`
		 */
		is_available_for_external?: '0' | '1'
		/**
		 * Filter by Availability
		 */
		availability_status?: Array<
			'available' | 'limited' | 'waiting list' | 'sold out' | 'available soon' | 'unavailable'
		>
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/events/{obj_id}/ticket-types'
}

export type ListTicketTypesErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListTicketTypesError = ListTicketTypesErrors[keyof ListTicketTypesErrors]

export type ListTicketTypesResponses = {
	/**
	 * OK
	 */
	200: TicketTypePagination
}

export type ListTicketTypesResponse = ListTicketTypesResponses[keyof ListTicketTypesResponses]

export type CreateTicketTypeData = {
	body?: EventTicketTypeWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/events/{obj_id}/ticket-types'
}

export type CreateTicketTypeErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateTicketTypeError = CreateTicketTypeErrors[keyof CreateTicketTypeErrors]

export type CreateTicketTypeResponses = {
	/**
	 * Created
	 */
	201: EventTicketType
}

export type CreateTicketTypeResponse = CreateTicketTypeResponses[keyof CreateTicketTypeResponses]

export type DeleteTicketTypeData = {
	body?: never
	path: {
		obj_id: number
		event_id: number
	}
	query?: never
	url: '/v30/events/{event_id}/ticket-types/{obj_id}'
}

export type DeleteTicketTypeErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteTicketTypeError = DeleteTicketTypeErrors[keyof DeleteTicketTypeErrors]

export type DeleteTicketTypeResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteTicketTypeResponse = DeleteTicketTypeResponses[keyof DeleteTicketTypeResponses]

export type RetrieveTicketTypeData = {
	body?: never
	path: {
		obj_id: number
		event_id: number
	}
	query?: never
	url: '/v30/events/{event_id}/ticket-types/{obj_id}'
}

export type RetrieveTicketTypeErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveTicketTypeError = RetrieveTicketTypeErrors[keyof RetrieveTicketTypeErrors]

export type RetrieveTicketTypeResponses = {
	/**
	 * OK
	 */
	200: EventTicketType
}

export type RetrieveTicketTypeResponse = RetrieveTicketTypeResponses[keyof RetrieveTicketTypeResponses]

export type UpdateTicketTypeData = {
	body?: EventTicketTypeWritable
	path: {
		obj_id: number
		event_id: number
	}
	query?: never
	url: '/v30/events/{event_id}/ticket-types/{obj_id}'
}

export type UpdateTicketTypeErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateTicketTypeError = UpdateTicketTypeErrors[keyof UpdateTicketTypeErrors]

export type UpdateTicketTypeResponses = {
	/**
	 * Accepted
	 */
	202: EventTicketType
}

export type UpdateTicketTypeResponse = UpdateTicketTypeResponses[keyof UpdateTicketTypeResponses]

export type AddExternalInvoiceImportData = {
	body?: never
	path?: never
	query?: never
	url: '/v30/external-invoices/imports'
}

export type AddExternalInvoiceImportResponses = {
	/**
	 * Imported successfully
	 */
	204: void
}

export type AddExternalInvoiceImportResponse =
	AddExternalInvoiceImportResponses[keyof AddExternalInvoiceImportResponses]

export type ListGalleryAlbumsData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter on `filter_id`, `published`
		 */
		socie_app?: '0' | '1'
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/galleries/albums'
}

export type ListGalleryAlbumsErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListGalleryAlbumsError = ListGalleryAlbumsErrors[keyof ListGalleryAlbumsErrors]

export type ListGalleryAlbumsResponses = {
	/**
	 * OK
	 */
	200: GalleryAlbumPagination
}

export type ListGalleryAlbumsResponse = ListGalleryAlbumsResponses[keyof ListGalleryAlbumsResponses]

export type RetrieveGalleryAlbumData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/galleries/albums/{obj_id}'
}

export type RetrieveGalleryAlbumErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveGalleryAlbumError = RetrieveGalleryAlbumErrors[keyof RetrieveGalleryAlbumErrors]

export type RetrieveGalleryAlbumResponses = {
	/**
	 * OK
	 */
	200: GalleryAlbum
}

export type RetrieveGalleryAlbumResponse = RetrieveGalleryAlbumResponses[keyof RetrieveGalleryAlbumResponses]

export type ListGalleryPhotosData = {
	body?: never
	path: {
		album_id: number
	}
	query?: {
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/galleries/albums/{album_id}/photos'
}

export type ListGalleryPhotosErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListGalleryPhotosError = ListGalleryPhotosErrors[keyof ListGalleryPhotosErrors]

export type ListGalleryPhotosResponses = {
	/**
	 * OK
	 */
	200: GalleryPhotoPagination
}

export type ListGalleryPhotosResponse = ListGalleryPhotosResponses[keyof ListGalleryPhotosResponses]

export type RetrieveGalleryPhotoData = {
	body?: never
	path: {
		album_id: number
		obj_id: number
	}
	query?: never
	url: '/v30/galleries/albums/{album_id}/photos/{obj_id}'
}

export type RetrieveGalleryPhotoErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveGalleryPhotoError = RetrieveGalleryPhotoErrors[keyof RetrieveGalleryPhotoErrors]

export type RetrieveGalleryPhotoResponses = {
	/**
	 * OK
	 */
	200: GalleryPhoto
}

export type RetrieveGalleryPhotoResponse = RetrieveGalleryPhotoResponses[keyof RetrieveGalleryPhotoResponses]

export type ListGroupFoldersRecursiveData = {
	body?: never
	path?: never
	query?: {
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/group-folders/recursive'
}

export type ListGroupFoldersRecursiveErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListGroupFoldersRecursiveError = ListGroupFoldersRecursiveErrors[keyof ListGroupFoldersRecursiveErrors]

export type ListGroupFoldersRecursiveResponses = {
	/**
	 * OK
	 */
	200: GroupFolderListRecursivePagination
}

export type ListGroupFoldersRecursiveResponse =
	ListGroupFoldersRecursiveResponses[keyof ListGroupFoldersRecursiveResponses]

export type ListGroupFoldersData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter on `published`
		 */
		published?: '0' | '1'
		parent_id?: string
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/group-folders'
}

export type ListGroupFoldersErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListGroupFoldersError = ListGroupFoldersErrors[keyof ListGroupFoldersErrors]

export type ListGroupFoldersResponses = {
	/**
	 * OK
	 */
	200: GroupFolderPagination
}

export type ListGroupFoldersResponse = ListGroupFoldersResponses[keyof ListGroupFoldersResponses]

export type CreateGroupFolderData = {
	body?: GroupFolderWritable
	path?: never
	query?: never
	url: '/v30/group-folders'
}

export type CreateGroupFolderErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateGroupFolderError = CreateGroupFolderErrors[keyof CreateGroupFolderErrors]

export type CreateGroupFolderResponses = {
	/**
	 * Created
	 */
	201: GroupFolder
}

export type CreateGroupFolderResponse = CreateGroupFolderResponses[keyof CreateGroupFolderResponses]

export type DeleteGroupFolderData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/group-folders/{obj_id}'
}

export type DeleteGroupFolderErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteGroupFolderError = DeleteGroupFolderErrors[keyof DeleteGroupFolderErrors]

export type DeleteGroupFolderResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteGroupFolderResponse = DeleteGroupFolderResponses[keyof DeleteGroupFolderResponses]

export type RetrieveGroupFolderData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/group-folders/{obj_id}'
}

export type RetrieveGroupFolderErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveGroupFolderError = RetrieveGroupFolderErrors[keyof RetrieveGroupFolderErrors]

export type RetrieveGroupFolderResponses = {
	/**
	 * OK
	 */
	200: GroupFolder
}

export type RetrieveGroupFolderResponse = RetrieveGroupFolderResponses[keyof RetrieveGroupFolderResponses]

export type UpdateGroupFolderData = {
	body?: GroupFolderWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/group-folders/{obj_id}'
}

export type UpdateGroupFolderErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateGroupFolderError = UpdateGroupFolderErrors[keyof UpdateGroupFolderErrors]

export type UpdateGroupFolderResponses = {
	/**
	 * Accepted
	 */
	202: GroupFolder
}

export type UpdateGroupFolderResponse = UpdateGroupFolderResponses[keyof UpdateGroupFolderResponses]

export type GetV30GroupsFoldersRecursiveData = {
	body?: never
	path?: never
	query?: {
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/groups/folders/recursive'
}

export type GetV30GroupsFoldersRecursiveErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type GetV30GroupsFoldersRecursiveError =
	GetV30GroupsFoldersRecursiveErrors[keyof GetV30GroupsFoldersRecursiveErrors]

export type GetV30GroupsFoldersRecursiveResponses = {
	/**
	 * OK
	 */
	200: GroupFolderListRecursivePagination
}

export type GetV30GroupsFoldersRecursiveResponse =
	GetV30GroupsFoldersRecursiveResponses[keyof GetV30GroupsFoldersRecursiveResponses]

export type GetV30GroupsFoldersData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter on `published`
		 */
		published?: '0' | '1'
		parent_id?: string
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/groups/folders'
}

export type GetV30GroupsFoldersErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type GetV30GroupsFoldersError = GetV30GroupsFoldersErrors[keyof GetV30GroupsFoldersErrors]

export type GetV30GroupsFoldersResponses = {
	/**
	 * OK
	 */
	200: GroupFolderPagination
}

export type GetV30GroupsFoldersResponse = GetV30GroupsFoldersResponses[keyof GetV30GroupsFoldersResponses]

export type PostV30GroupsFoldersData = {
	body?: GroupFolderWritable
	path?: never
	query?: never
	url: '/v30/groups/folders'
}

export type PostV30GroupsFoldersErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type PostV30GroupsFoldersError = PostV30GroupsFoldersErrors[keyof PostV30GroupsFoldersErrors]

export type PostV30GroupsFoldersResponses = {
	/**
	 * Created
	 */
	201: GroupFolder
}

export type PostV30GroupsFoldersResponse = PostV30GroupsFoldersResponses[keyof PostV30GroupsFoldersResponses]

export type DeleteV30GroupsFoldersByObjIdData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/groups/folders/{obj_id}'
}

export type DeleteV30GroupsFoldersByObjIdErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteV30GroupsFoldersByObjIdError =
	DeleteV30GroupsFoldersByObjIdErrors[keyof DeleteV30GroupsFoldersByObjIdErrors]

export type DeleteV30GroupsFoldersByObjIdResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteV30GroupsFoldersByObjIdResponse =
	DeleteV30GroupsFoldersByObjIdResponses[keyof DeleteV30GroupsFoldersByObjIdResponses]

export type GetV30GroupsFoldersByObjIdData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/groups/folders/{obj_id}'
}

export type GetV30GroupsFoldersByObjIdErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type GetV30GroupsFoldersByObjIdError = GetV30GroupsFoldersByObjIdErrors[keyof GetV30GroupsFoldersByObjIdErrors]

export type GetV30GroupsFoldersByObjIdResponses = {
	/**
	 * OK
	 */
	200: GroupFolder
}

export type GetV30GroupsFoldersByObjIdResponse =
	GetV30GroupsFoldersByObjIdResponses[keyof GetV30GroupsFoldersByObjIdResponses]

export type PutV30GroupsFoldersByObjIdData = {
	body?: GroupFolderWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/groups/folders/{obj_id}'
}

export type PutV30GroupsFoldersByObjIdErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type PutV30GroupsFoldersByObjIdError = PutV30GroupsFoldersByObjIdErrors[keyof PutV30GroupsFoldersByObjIdErrors]

export type PutV30GroupsFoldersByObjIdResponses = {
	/**
	 * Accepted
	 */
	202: GroupFolder
}

export type PutV30GroupsFoldersByObjIdResponse =
	PutV30GroupsFoldersByObjIdResponses[keyof PutV30GroupsFoldersByObjIdResponses]

export type ListGroupsData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter on `published`
		 */
		published?: '0' | '1'
		/**
		 * Filter by Folder
		 */
		folder_id?: Array<string>
		/**
		 * Filter by Member
		 */
		member_id?: Array<string>
		/**
		 * Filter by None
		 */
		socie_app_id?: Array<string>
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/groups'
}

export type ListGroupsErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListGroupsError = ListGroupsErrors[keyof ListGroupsErrors]

export type ListGroupsResponses = {
	/**
	 * OK
	 */
	200: GroupPagination
}

export type ListGroupsResponse = ListGroupsResponses[keyof ListGroupsResponses]

export type DeleteGroupData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/groups/{obj_id}'
}

export type DeleteGroupErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteGroupError = DeleteGroupErrors[keyof DeleteGroupErrors]

export type DeleteGroupResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteGroupResponse = DeleteGroupResponses[keyof DeleteGroupResponses]

export type RetrieveGroupData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/groups/{obj_id}'
}

export type RetrieveGroupErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveGroupError = RetrieveGroupErrors[keyof RetrieveGroupErrors]

export type RetrieveGroupResponses = {
	/**
	 * OK
	 */
	200: GroupWithMemberships
}

export type RetrieveGroupResponse = RetrieveGroupResponses[keyof RetrieveGroupResponses]

export type UpdateGroupData = {
	body?: GroupWithMembershipsWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/groups/{obj_id}'
}

export type UpdateGroupErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateGroupError = UpdateGroupErrors[keyof UpdateGroupErrors]

export type UpdateGroupResponses = {
	/**
	 * Accepted
	 */
	202: GroupWithMemberships
}

export type UpdateGroupResponse = UpdateGroupResponses[keyof UpdateGroupResponses]

export type ListGroupMembershipsData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter by Group
		 */
		group_id?: Array<string>
		/**
		 * Filter by Member
		 */
		member_id?: Array<string>
		page?: number
		page_size?: number
		order?: string | null
	}
	url: '/v30/groups/memberships'
}

export type ListGroupMembershipsErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListGroupMembershipsError = ListGroupMembershipsErrors[keyof ListGroupMembershipsErrors]

export type ListGroupMembershipsResponses = {
	/**
	 * OK
	 */
	200: GroupMembershipPagination
}

export type ListGroupMembershipsResponse = ListGroupMembershipsResponses[keyof ListGroupMembershipsResponses]

export type CreateGroupMembershipData = {
	body?: GroupMembershipWritable
	path?: never
	query?: never
	url: '/v30/groups/memberships'
}

export type CreateGroupMembershipErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateGroupMembershipError = CreateGroupMembershipErrors[keyof CreateGroupMembershipErrors]

export type CreateGroupMembershipResponses = {
	/**
	 * Created
	 */
	201: GroupMembership
}

export type CreateGroupMembershipResponse = CreateGroupMembershipResponses[keyof CreateGroupMembershipResponses]

export type DeleteGroupMembershipData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/groups/memberships/{obj_id}'
}

export type DeleteGroupMembershipErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteGroupMembershipError = DeleteGroupMembershipErrors[keyof DeleteGroupMembershipErrors]

export type DeleteGroupMembershipResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteGroupMembershipResponse = DeleteGroupMembershipResponses[keyof DeleteGroupMembershipResponses]

export type RetrieveGroupMembershipData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/groups/memberships/{obj_id}'
}

export type RetrieveGroupMembershipErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveGroupMembershipError = RetrieveGroupMembershipErrors[keyof RetrieveGroupMembershipErrors]

export type RetrieveGroupMembershipResponses = {
	/**
	 * OK
	 */
	200: GroupMembership
}

export type RetrieveGroupMembershipResponse = RetrieveGroupMembershipResponses[keyof RetrieveGroupMembershipResponses]

export type UpdateGroupMembershipData = {
	body?: GroupMembershipWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/groups/memberships/{obj_id}'
}

export type UpdateGroupMembershipErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateGroupMembershipError = UpdateGroupMembershipErrors[keyof UpdateGroupMembershipErrors]

export type UpdateGroupMembershipResponses = {
	/**
	 * Accepted
	 */
	202: GroupMembership
}

export type UpdateGroupMembershipResponse = UpdateGroupMembershipResponses[keyof UpdateGroupMembershipResponses]

export type ListTasksData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter by None
		 */
		author_id?: Array<number>
		/**
		 * Filter by None
		 */
		assignee_id?: Array<number>
		/**
		 * Filter by None
		 */
		subject_type?: Array<'Membership' | 'SaleInvoice' | 'Other'>
		/**
		 * Filter on `is_completed`
		 */
		is_completed?: '0' | '1'
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/tasks'
}

export type ListTasksErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListTasksError = ListTasksErrors[keyof ListTasksErrors]

export type ListTasksResponses = {
	/**
	 * OK
	 */
	200: TaskPagination
}

export type ListTasksResponse = ListTasksResponses[keyof ListTasksResponses]

export type UpdateTaskData = {
	body?: UpdateTaskWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/tasks/{obj_id}'
}

export type UpdateTaskErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateTaskError = UpdateTaskErrors[keyof UpdateTaskErrors]

export type UpdateTaskResponses = {
	/**
	 * Accepted
	 */
	202: Task
}

export type UpdateTaskResponse = UpdateTaskResponses[keyof UpdateTaskResponses]

export type ListMemberStatusesData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter on `archived`
		 */
		archived?: '0' | '1'
		/**
		 * Filter on `hidden`
		 */
		hidden?: '0' | '1'
		/**
		 * Filter on `is_deceased`
		 */
		deceased?: '0' | '1'
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/member-statuses'
}

export type ListMemberStatusesErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListMemberStatusesError = ListMemberStatusesErrors[keyof ListMemberStatusesErrors]

export type ListMemberStatusesResponses = {
	/**
	 * OK
	 */
	200: MemberStatusListPagination
}

export type ListMemberStatusesResponse = ListMemberStatusesResponses[keyof ListMemberStatusesResponses]

export type DeleteMemberStatusData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/member-statuses/{obj_id}'
}

export type DeleteMemberStatusErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteMemberStatusError = DeleteMemberStatusErrors[keyof DeleteMemberStatusErrors]

export type DeleteMemberStatusResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteMemberStatusResponse = DeleteMemberStatusResponses[keyof DeleteMemberStatusResponses]

export type RetrieveMemberStatusData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/member-statuses/{obj_id}'
}

export type RetrieveMemberStatusErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveMemberStatusError = RetrieveMemberStatusErrors[keyof RetrieveMemberStatusErrors]

export type RetrieveMemberStatusResponses = {
	/**
	 * OK
	 */
	200: MemberStatusWithFieldSettings
}

export type RetrieveMemberStatusResponse = RetrieveMemberStatusResponses[keyof RetrieveMemberStatusResponses]

export type UpdateMemberStatusData = {
	body?: MemberStatusWithFieldSettingsWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/member-statuses/{obj_id}'
}

export type UpdateMemberStatusErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateMemberStatusError = UpdateMemberStatusErrors[keyof UpdateMemberStatusErrors]

export type UpdateMemberStatusResponses = {
	/**
	 * Accepted
	 */
	202: MemberStatusWithFieldSettings
}

export type UpdateMemberStatusResponse = UpdateMemberStatusResponses[keyof UpdateMemberStatusResponses]

export type ListCustomFieldsData = {
	body?: never
	path?: never
	query?: {
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/members/custom-fields'
}

export type ListCustomFieldsErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListCustomFieldsError = ListCustomFieldsErrors[keyof ListCustomFieldsErrors]

export type ListCustomFieldsResponses = {
	/**
	 * OK
	 */
	200: CustomFieldPagination
}

export type ListCustomFieldsResponse = ListCustomFieldsResponses[keyof ListCustomFieldsResponses]

export type RetrieveCustomFieldByIdData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/members/custom-fields/{obj_id}'
}

export type RetrieveCustomFieldByIdErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveCustomFieldByIdError = RetrieveCustomFieldByIdErrors[keyof RetrieveCustomFieldByIdErrors]

export type RetrieveCustomFieldByIdResponses = {
	/**
	 * OK
	 */
	200: MemberField
}

export type RetrieveCustomFieldByIdResponse = RetrieveCustomFieldByIdResponses[keyof RetrieveCustomFieldByIdResponses]

export type RetrieveCustomFieldByRefData = {
	body?: never
	path: {
		ref: string
	}
	query?: never
	url: '/v30/members/custom-fields/{ref}'
}

export type RetrieveCustomFieldByRefErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveCustomFieldByRefError = RetrieveCustomFieldByRefErrors[keyof RetrieveCustomFieldByRefErrors]

export type RetrieveCustomFieldByRefResponses = {
	/**
	 * OK
	 */
	200: MemberField
}

export type RetrieveCustomFieldByRefResponse =
	RetrieveCustomFieldByRefResponses[keyof RetrieveCustomFieldByRefResponses]

export type ListMemberLogEntriesData = {
	body?: never
	path: {
		member_id: number
	}
	query?: {
		/**
		 * Filter by None
		 */
		author_id?: Array<number>
		/**
		 * Filter by None
		 */
		type?: Array<'Note' | 'Task' | 'Action' | 'Change'>
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/members/{member_id}/logs'
}

export type ListMemberLogEntriesErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListMemberLogEntriesError = ListMemberLogEntriesErrors[keyof ListMemberLogEntriesErrors]

export type ListMemberLogEntriesResponses = {
	/**
	 * OK
	 */
	200: LogEntryPagination
}

export type ListMemberLogEntriesResponse = ListMemberLogEntriesResponses[keyof ListMemberLogEntriesResponses]

export type CreateMemberLogEntryData = {
	body?: CreateLogEntryWritable
	path: {
		member_id: number
	}
	query?: never
	url: '/v30/members/{member_id}/logs'
}

export type CreateMemberLogEntryErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateMemberLogEntryError = CreateMemberLogEntryErrors[keyof CreateMemberLogEntryErrors]

export type CreateMemberLogEntryResponses = {
	/**
	 * Created
	 */
	201: LogEntry
}

export type CreateMemberLogEntryResponse = CreateMemberLogEntryResponses[keyof CreateMemberLogEntryResponses]

export type DeleteMemberLogEntryData = {
	body?: never
	path: {
		member_id: number
		log_entry_id: number
	}
	query?: never
	url: '/v30/members/{member_id}/logs/{log_entry_id}'
}

export type DeleteMemberLogEntryErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteMemberLogEntryError = DeleteMemberLogEntryErrors[keyof DeleteMemberLogEntryErrors]

export type DeleteMemberLogEntryResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteMemberLogEntryResponse = DeleteMemberLogEntryResponses[keyof DeleteMemberLogEntryResponses]

export type RetrieveMemberLogEntryData = {
	body?: never
	path: {
		member_id: number
		log_entry_id: number
	}
	query?: never
	url: '/v30/members/{member_id}/logs/{log_entry_id}'
}

export type RetrieveMemberLogEntryErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveMemberLogEntryError = RetrieveMemberLogEntryErrors[keyof RetrieveMemberLogEntryErrors]

export type RetrieveMemberLogEntryResponses = {
	/**
	 * OK
	 */
	200: LogEntry
}

export type RetrieveMemberLogEntryResponse = RetrieveMemberLogEntryResponses[keyof RetrieveMemberLogEntryResponses]

export type UpdateMemberLogEntryData = {
	body?: UpdateLogEntryWritable
	path: {
		member_id: number
		log_entry_id: number
	}
	query?: never
	url: '/v30/members/{member_id}/logs/{log_entry_id}'
}

export type UpdateMemberLogEntryErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateMemberLogEntryError = UpdateMemberLogEntryErrors[keyof UpdateMemberLogEntryErrors]

export type UpdateMemberLogEntryResponses = {
	/**
	 * Accepted
	 */
	202: LogEntry
}

export type UpdateMemberLogEntryResponse = UpdateMemberLogEntryResponses[keyof UpdateMemberLogEntryResponses]

export type ListMembersData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter by None
		 */
		status_id?: Array<string>
		/**
		 * Filter by None
		 */
		socie_app_id?: Array<string>
		page?: number
		page_size?: number
		order?: string
		/**
		 * Filter by None
		 */
		context?: Array<'sign_up' | 'profile_activate' | 'profile_edit' | 'almanac' | 'manager_add' | 'manager_edit'>
	}
	url: '/v30/members'
}

export type ListMembersErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListMembersError = ListMembersErrors[keyof ListMembersErrors]

export type ListMembersResponses = {
	/**
	 * OK
	 */
	200: MemberPagination
}

export type ListMembersResponse = ListMembersResponses[keyof ListMembersResponses]

export type CreateMemberData = {
	body?: CreateMemberWritable
	path?: never
	query?: {
		/**
		 * Filter by None
		 */
		context?: Array<'sign_up' | 'profile_activate' | 'profile_edit' | 'almanac' | 'manager_add' | 'manager_edit'>
	}
	url: '/v30/members'
}

export type CreateMemberErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateMemberError = CreateMemberErrors[keyof CreateMemberErrors]

export type CreateMemberResponses = {
	/**
	 * Created
	 */
	201: Member
}

export type CreateMemberResponse = CreateMemberResponses[keyof CreateMemberResponses]

export type DeleteMemberData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/members/{obj_id}'
}

export type DeleteMemberErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteMemberError = DeleteMemberErrors[keyof DeleteMemberErrors]

export type DeleteMemberResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteMemberResponse = DeleteMemberResponses[keyof DeleteMemberResponses]

export type RetrieveMemberData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: {
		/**
		 * Filter by None
		 */
		context?: Array<'sign_up' | 'profile_activate' | 'profile_edit' | 'almanac' | 'manager_add' | 'manager_edit'>
	}
	url: '/v30/members/{obj_id}'
}

export type RetrieveMemberErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveMemberError = RetrieveMemberErrors[keyof RetrieveMemberErrors]

export type RetrieveMemberResponses = {
	/**
	 * OK
	 */
	200: MemberWithCustomFields
}

export type RetrieveMemberResponse = RetrieveMemberResponses[keyof RetrieveMemberResponses]

export type UpdateMemberData = {
	body?: MemberWithCustomFieldsWritable
	path: {
		obj_id: number
	}
	query?: {
		/**
		 * Filter by None
		 */
		context?: Array<'sign_up' | 'profile_activate' | 'profile_edit' | 'almanac' | 'manager_add' | 'manager_edit'>
	}
	url: '/v30/members/{obj_id}'
}

export type UpdateMemberErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateMemberError = UpdateMemberErrors[keyof UpdateMemberErrors]

export type UpdateMemberResponses = {
	/**
	 * Accepted
	 */
	202: MemberWithCustomFields
}

export type UpdateMemberResponse = UpdateMemberResponses[keyof UpdateMemberResponses]

export type ListMembershipStatusesData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: {
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/members/{obj_id}/statuses'
}

export type ListMembershipStatusesErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListMembershipStatusesError = ListMembershipStatusesErrors[keyof ListMembershipStatusesErrors]

export type ListMembershipStatusesResponses = {
	/**
	 * OK
	 */
	200: MembershipStatusPagination
}

export type ListMembershipStatusesResponse = ListMembershipStatusesResponses[keyof ListMembershipStatusesResponses]

export type CreateMembershipStatusData = {
	body?: MembershipStatusWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/members/{obj_id}/statuses'
}

export type CreateMembershipStatusErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateMembershipStatusError = CreateMembershipStatusErrors[keyof CreateMembershipStatusErrors]

export type CreateMembershipStatusResponses = {
	/**
	 * Created
	 */
	201: MembershipStatus
}

export type CreateMembershipStatusResponse = CreateMembershipStatusResponses[keyof CreateMembershipStatusResponses]

export type DeleteMembershipStatusData = {
	body?: never
	path: {
		obj_id: number
		membership_status_id: number
	}
	query?: never
	url: '/v30/members/{obj_id}/statuses/{membership_status_id}'
}

export type DeleteMembershipStatusErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteMembershipStatusError = DeleteMembershipStatusErrors[keyof DeleteMembershipStatusErrors]

export type DeleteMembershipStatusResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteMembershipStatusResponse = DeleteMembershipStatusResponses[keyof DeleteMembershipStatusResponses]

export type RetrieveMembershipStatusData = {
	body?: never
	path: {
		obj_id: number
		membership_status_id: number
	}
	query?: never
	url: '/v30/members/{obj_id}/statuses/{membership_status_id}'
}

export type RetrieveMembershipStatusErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveMembershipStatusError = RetrieveMembershipStatusErrors[keyof RetrieveMembershipStatusErrors]

export type RetrieveMembershipStatusResponses = {
	/**
	 * OK
	 */
	200: MembershipStatus
}

export type RetrieveMembershipStatusResponse =
	RetrieveMembershipStatusResponses[keyof RetrieveMembershipStatusResponses]

export type UpdateMembershipStatusData = {
	body?: MembershipStatusWritable
	path: {
		obj_id: number
		membership_status_id: number
	}
	query?: never
	url: '/v30/members/{obj_id}/statuses/{membership_status_id}'
}

export type UpdateMembershipStatusErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateMembershipStatusError = UpdateMembershipStatusErrors[keyof UpdateMembershipStatusErrors]

export type UpdateMembershipStatusResponses = {
	/**
	 * Accepted
	 */
	202: MembershipStatus
}

export type UpdateMembershipStatusResponse = UpdateMembershipStatusResponses[keyof UpdateMembershipStatusResponses]

export type SearchMembersData = {
	body?: never
	path?: never
	query: {
		term: string
		page?: number
		page_size?: number
		order?: string | null
	}
	url: '/v30/members/search'
}

export type SearchMembersErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type SearchMembersError = SearchMembersErrors[keyof SearchMembersErrors]

export type SearchMembersResponses = {
	/**
	 * OK
	 */
	200: ElasticMemberPagination
}

export type SearchMembersResponse = SearchMembersResponses[keyof SearchMembersResponses]

export type ListNewsData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter period on `published_from`
		 */
		period_filter?: string
		/**
		 * Filter on `actual`
		 */
		actual?: '0' | '1'
		/**
		 * Filter on `comments_open`
		 */
		comments_open?: '0' | '1'
		/**
		 * Filter by Visibility
		 */
		visibility?: Array<'public' | 'protected'>
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/news'
}

export type ListNewsErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListNewsError = ListNewsErrors[keyof ListNewsErrors]

export type ListNewsResponses = {
	/**
	 * OK
	 */
	200: NewsPagination
}

export type ListNewsResponse = ListNewsResponses[keyof ListNewsResponses]

export type CreateNewsData = {
	body?: NewsWritable
	path?: never
	query?: never
	url: '/v30/news'
}

export type CreateNewsErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateNewsError = CreateNewsErrors[keyof CreateNewsErrors]

export type CreateNewsResponses = {
	/**
	 * Created
	 */
	201: News
}

export type CreateNewsResponse = CreateNewsResponses[keyof CreateNewsResponses]

export type DeleteNewsData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/news/{obj_id}'
}

export type DeleteNewsErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteNewsError = DeleteNewsErrors[keyof DeleteNewsErrors]

export type DeleteNewsResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteNewsResponse = DeleteNewsResponses[keyof DeleteNewsResponses]

export type RetrieveNewsData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/news/{obj_id}'
}

export type RetrieveNewsErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveNewsError = RetrieveNewsErrors[keyof RetrieveNewsErrors]

export type RetrieveNewsResponses = {
	/**
	 * OK
	 */
	200: News
}

export type RetrieveNewsResponse = RetrieveNewsResponses[keyof RetrieveNewsResponses]

export type UpdateNewsData = {
	body?: NewsWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/news/{obj_id}'
}

export type UpdateNewsErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateNewsError = UpdateNewsErrors[keyof UpdateNewsErrors]

export type UpdateNewsResponses = {
	/**
	 * Accepted
	 */
	202: News
}

export type UpdateNewsResponse = UpdateNewsResponses[keyof UpdateNewsResponses]

export type ListNotificationsData = {
	body?: never
	path?: never
	query?: {
		page?: number
		page_size?: number
		order?: string | null
	}
	url: '/v30/notifications'
}

export type ListNotificationsErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListNotificationsError = ListNotificationsErrors[keyof ListNotificationsErrors]

export type ListNotificationsResponses = {
	/**
	 * OK
	 */
	200: NotificationPagination
}

export type ListNotificationsResponse = ListNotificationsResponses[keyof ListNotificationsResponses]

export type ListOrganisationCategoriesData = {
	body?: never
	path?: never
	query?: {
		page?: number
		page_size?: number
		order?: string | null
	}
	url: '/v30/organisations/categories'
}

export type ListOrganisationCategoriesErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListOrganisationCategoriesError = ListOrganisationCategoriesErrors[keyof ListOrganisationCategoriesErrors]

export type ListOrganisationCategoriesResponses = {
	/**
	 * OK
	 */
	200: OrganisationCategoryPagination
}

export type ListOrganisationCategoriesResponse =
	ListOrganisationCategoriesResponses[keyof ListOrganisationCategoriesResponses]

export type CreateOrganisationCategoryData = {
	body?: OrganisationCategoryWritable
	path?: never
	query?: never
	url: '/v30/organisations/categories'
}

export type CreateOrganisationCategoryErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateOrganisationCategoryError = CreateOrganisationCategoryErrors[keyof CreateOrganisationCategoryErrors]

export type CreateOrganisationCategoryResponses = {
	/**
	 * Created
	 */
	201: OrganisationCategory
}

export type CreateOrganisationCategoryResponse =
	CreateOrganisationCategoryResponses[keyof CreateOrganisationCategoryResponses]

export type DeleteOrganisationCategoryData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/organisations/categories/{obj_id}'
}

export type DeleteOrganisationCategoryErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteOrganisationCategoryError = DeleteOrganisationCategoryErrors[keyof DeleteOrganisationCategoryErrors]

export type DeleteOrganisationCategoryResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteOrganisationCategoryResponse =
	DeleteOrganisationCategoryResponses[keyof DeleteOrganisationCategoryResponses]

export type RetrieveOrganisationCategoryData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/organisations/categories/{obj_id}'
}

export type RetrieveOrganisationCategoryErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveOrganisationCategoryError =
	RetrieveOrganisationCategoryErrors[keyof RetrieveOrganisationCategoryErrors]

export type RetrieveOrganisationCategoryResponses = {
	/**
	 * OK
	 */
	200: OrganisationCategory
}

export type RetrieveOrganisationCategoryResponse =
	RetrieveOrganisationCategoryResponses[keyof RetrieveOrganisationCategoryResponses]

export type UpdateOrganisationCategoryData = {
	body?: OrganisationCategoryWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/organisations/categories/{obj_id}'
}

export type UpdateOrganisationCategoryErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateOrganisationCategoryError = UpdateOrganisationCategoryErrors[keyof UpdateOrganisationCategoryErrors]

export type UpdateOrganisationCategoryResponses = {
	/**
	 * Accepted
	 */
	202: OrganisationCategory
}

export type UpdateOrganisationCategoryResponse =
	UpdateOrganisationCategoryResponses[keyof UpdateOrganisationCategoryResponses]

export type ListOrganisationsData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter by Category
		 */
		category_id?: Array<string>
		/**
		 * Filter by SBI code
		 */
		sbi_code?: Array<string>
		/**
		 * Filter by Legal form
		 */
		legal_form?: Array<string>
		/**
		 * Filter by Member
		 */
		member_id?: Array<string>
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/organisations'
}

export type ListOrganisationsErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListOrganisationsError = ListOrganisationsErrors[keyof ListOrganisationsErrors]

export type ListOrganisationsResponses = {
	/**
	 * OK
	 */
	200: OrganisationPagination
}

export type ListOrganisationsResponse = ListOrganisationsResponses[keyof ListOrganisationsResponses]

export type CreateOrganisationData = {
	body?: OrganisationWritable
	path?: never
	query?: never
	url: '/v30/organisations'
}

export type CreateOrganisationErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateOrganisationError = CreateOrganisationErrors[keyof CreateOrganisationErrors]

export type CreateOrganisationResponses = {
	/**
	 * Created
	 */
	201: Organisation
}

export type CreateOrganisationResponse = CreateOrganisationResponses[keyof CreateOrganisationResponses]

export type DeleteOrganisationData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/organisations/{obj_id}'
}

export type DeleteOrganisationErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteOrganisationError = DeleteOrganisationErrors[keyof DeleteOrganisationErrors]

export type DeleteOrganisationResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteOrganisationResponse = DeleteOrganisationResponses[keyof DeleteOrganisationResponses]

export type RetrieveOrganisationData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/organisations/{obj_id}'
}

export type RetrieveOrganisationErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveOrganisationError = RetrieveOrganisationErrors[keyof RetrieveOrganisationErrors]

export type RetrieveOrganisationResponses = {
	/**
	 * OK
	 */
	200: Organisation
}

export type RetrieveOrganisationResponse = RetrieveOrganisationResponses[keyof RetrieveOrganisationResponses]

export type UpdateOrganisationData = {
	body?: OrganisationWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/organisations/{obj_id}'
}

export type UpdateOrganisationErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateOrganisationError = UpdateOrganisationErrors[keyof UpdateOrganisationErrors]

export type UpdateOrganisationResponses = {
	/**
	 * Accepted
	 */
	202: Organisation
}

export type UpdateOrganisationResponse = UpdateOrganisationResponses[keyof UpdateOrganisationResponses]

export type ListOrganisationMembershipsData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter by Organisation
		 */
		organisation_id?: Array<string>
		/**
		 * Filter by Member
		 */
		member_id?: Array<string>
		page?: number
		page_size?: number
		order?: string | null
	}
	url: '/v30/organisations/memberships'
}

export type ListOrganisationMembershipsErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListOrganisationMembershipsError =
	ListOrganisationMembershipsErrors[keyof ListOrganisationMembershipsErrors]

export type ListOrganisationMembershipsResponses = {
	/**
	 * OK
	 */
	200: OrganisationMembershipPagination
}

export type ListOrganisationMembershipsResponse =
	ListOrganisationMembershipsResponses[keyof ListOrganisationMembershipsResponses]

export type CreateOrganisationMembershipData = {
	body?: OrganisationMembershipWritable
	path?: never
	query?: never
	url: '/v30/organisations/memberships'
}

export type CreateOrganisationMembershipErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateOrganisationMembershipError =
	CreateOrganisationMembershipErrors[keyof CreateOrganisationMembershipErrors]

export type CreateOrganisationMembershipResponses = {
	/**
	 * Created
	 */
	201: OrganisationMembership
}

export type CreateOrganisationMembershipResponse =
	CreateOrganisationMembershipResponses[keyof CreateOrganisationMembershipResponses]

export type DeleteOrganisationMembershipData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/organisations/memberships/{obj_id}'
}

export type DeleteOrganisationMembershipErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteOrganisationMembershipError =
	DeleteOrganisationMembershipErrors[keyof DeleteOrganisationMembershipErrors]

export type DeleteOrganisationMembershipResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteOrganisationMembershipResponse =
	DeleteOrganisationMembershipResponses[keyof DeleteOrganisationMembershipResponses]

export type RetrieveOrganisationMembershipData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/organisations/memberships/{obj_id}'
}

export type RetrieveOrganisationMembershipErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveOrganisationMembershipError =
	RetrieveOrganisationMembershipErrors[keyof RetrieveOrganisationMembershipErrors]

export type RetrieveOrganisationMembershipResponses = {
	/**
	 * OK
	 */
	200: OrganisationMembership
}

export type RetrieveOrganisationMembershipResponse =
	RetrieveOrganisationMembershipResponses[keyof RetrieveOrganisationMembershipResponses]

export type UpdateOrganisationMembershipData = {
	body?: OrganisationMembershipWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/organisations/memberships/{obj_id}'
}

export type UpdateOrganisationMembershipErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateOrganisationMembershipError =
	UpdateOrganisationMembershipErrors[keyof UpdateOrganisationMembershipErrors]

export type UpdateOrganisationMembershipResponses = {
	/**
	 * Accepted
	 */
	202: OrganisationMembership
}

export type UpdateOrganisationMembershipResponse =
	UpdateOrganisationMembershipResponses[keyof UpdateOrganisationMembershipResponses]

export type ListProductFoldersRecursiveData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter on `published`
		 */
		published?: '0' | '1'
		parent_id?: string
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/product-folders/recursive'
}

export type ListProductFoldersRecursiveErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListProductFoldersRecursiveError =
	ListProductFoldersRecursiveErrors[keyof ListProductFoldersRecursiveErrors]

export type ListProductFoldersRecursiveResponses = {
	/**
	 * OK
	 */
	200: ProductFolderListRecursivePagination
}

export type ListProductFoldersRecursiveResponse =
	ListProductFoldersRecursiveResponses[keyof ListProductFoldersRecursiveResponses]

export type ListProductFoldersData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter on `published`
		 */
		published?: '0' | '1'
		parent_id?: string
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/product-folders'
}

export type ListProductFoldersErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListProductFoldersError = ListProductFoldersErrors[keyof ListProductFoldersErrors]

export type ListProductFoldersResponses = {
	/**
	 * OK
	 */
	200: ProductFolderPagination
}

export type ListProductFoldersResponse = ListProductFoldersResponses[keyof ListProductFoldersResponses]

export type CreateProductFolderData = {
	body?: ProductFolderWritable
	path?: never
	query?: never
	url: '/v30/product-folders'
}

export type CreateProductFolderErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateProductFolderError = CreateProductFolderErrors[keyof CreateProductFolderErrors]

export type CreateProductFolderResponses = {
	/**
	 * Created
	 */
	201: ProductFolder
}

export type CreateProductFolderResponse = CreateProductFolderResponses[keyof CreateProductFolderResponses]

export type DeleteProductFolderData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/product-folders/{obj_id}'
}

export type DeleteProductFolderErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteProductFolderError = DeleteProductFolderErrors[keyof DeleteProductFolderErrors]

export type DeleteProductFolderResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteProductFolderResponse = DeleteProductFolderResponses[keyof DeleteProductFolderResponses]

export type RetrieveProductFolderData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/product-folders/{obj_id}'
}

export type RetrieveProductFolderErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveProductFolderError = RetrieveProductFolderErrors[keyof RetrieveProductFolderErrors]

export type RetrieveProductFolderResponses = {
	/**
	 * OK
	 */
	200: ProductFolder
}

export type RetrieveProductFolderResponse = RetrieveProductFolderResponses[keyof RetrieveProductFolderResponses]

export type UpdateProductFolderData = {
	body?: ProductFolderWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/product-folders/{obj_id}'
}

export type UpdateProductFolderErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateProductFolderError = UpdateProductFolderErrors[keyof UpdateProductFolderErrors]

export type UpdateProductFolderResponses = {
	/**
	 * Accepted
	 */
	202: ProductFolder
}

export type UpdateProductFolderResponse = UpdateProductFolderResponses[keyof UpdateProductFolderResponses]

export type ListProductsData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter on `published`
		 */
		published?: '0' | '1'
		/**
		 * Filter on `status`
		 */
		status?: 'all' | 'published' | 'concept' | 'archived'
		/**
		 * Filter by Folder
		 */
		folder_id?: Array<string>
		page?: number
		page_size?: number
		order?: string | null
	}
	url: '/v30/products'
}

export type ListProductsErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListProductsError = ListProductsErrors[keyof ListProductsErrors]

export type ListProductsResponses = {
	/**
	 * OK
	 */
	200: ProductPagination
}

export type ListProductsResponse = ListProductsResponses[keyof ListProductsResponses]

export type CreateProductData = {
	body?: ProductWritable
	path?: never
	query?: never
	url: '/v30/products'
}

export type CreateProductErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateProductError = CreateProductErrors[keyof CreateProductErrors]

export type CreateProductResponses = {
	/**
	 * Created
	 */
	201: Product
}

export type CreateProductResponse = CreateProductResponses[keyof CreateProductResponses]

export type DeleteProductData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/products/{obj_id}'
}

export type DeleteProductErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteProductError = DeleteProductErrors[keyof DeleteProductErrors]

export type DeleteProductResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteProductResponse = DeleteProductResponses[keyof DeleteProductResponses]

export type RetrieveProductData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/products/{obj_id}'
}

export type RetrieveProductErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveProductError = RetrieveProductErrors[keyof RetrieveProductErrors]

export type RetrieveProductResponses = {
	/**
	 * OK
	 */
	200: Product
}

export type RetrieveProductResponse = RetrieveProductResponses[keyof RetrieveProductResponses]

export type UpdateProductData = {
	body?: ProductWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/products/{obj_id}'
}

export type UpdateProductErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateProductError = UpdateProductErrors[keyof UpdateProductErrors]

export type UpdateProductResponses = {
	/**
	 * Accepted
	 */
	202: Product
}

export type UpdateProductResponse = UpdateProductResponses[keyof UpdateProductResponses]

export type ListSaleInvoiceLogEntriesData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: {
		/**
		 * Filter by None
		 */
		author_id?: Array<number>
		/**
		 * Filter by None
		 */
		type?: Array<'Note' | 'Task' | 'Action' | 'Change'>
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/sale-invoices/{obj_id}/logs'
}

export type ListSaleInvoiceLogEntriesErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListSaleInvoiceLogEntriesError = ListSaleInvoiceLogEntriesErrors[keyof ListSaleInvoiceLogEntriesErrors]

export type ListSaleInvoiceLogEntriesResponses = {
	/**
	 * OK
	 */
	200: LogEntryPagination
}

export type ListSaleInvoiceLogEntriesResponse =
	ListSaleInvoiceLogEntriesResponses[keyof ListSaleInvoiceLogEntriesResponses]

export type CreateSaleInvoiceLogEntryData = {
	body?: CreateLogEntryWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/sale-invoices/{obj_id}/logs'
}

export type CreateSaleInvoiceLogEntryErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateSaleInvoiceLogEntryError = CreateSaleInvoiceLogEntryErrors[keyof CreateSaleInvoiceLogEntryErrors]

export type CreateSaleInvoiceLogEntryResponses = {
	/**
	 * Created
	 */
	201: LogEntry
}

export type CreateSaleInvoiceLogEntryResponse =
	CreateSaleInvoiceLogEntryResponses[keyof CreateSaleInvoiceLogEntryResponses]

export type DeleteSaleInvoiceLogEntryData = {
	body?: never
	path: {
		log_entry_id: number
		obj_id: number
	}
	query?: never
	url: '/v30/sale-invoices/{obj_id}/logs/{log_entry_id}'
}

export type DeleteSaleInvoiceLogEntryErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteSaleInvoiceLogEntryError = DeleteSaleInvoiceLogEntryErrors[keyof DeleteSaleInvoiceLogEntryErrors]

export type DeleteSaleInvoiceLogEntryResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteSaleInvoiceLogEntryResponse =
	DeleteSaleInvoiceLogEntryResponses[keyof DeleteSaleInvoiceLogEntryResponses]

export type RetrieveSaleInvoiceLogEntryData = {
	body?: never
	path: {
		log_entry_id: number
		obj_id: number
	}
	query?: never
	url: '/v30/sale-invoices/{obj_id}/logs/{log_entry_id}'
}

export type RetrieveSaleInvoiceLogEntryErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveSaleInvoiceLogEntryError =
	RetrieveSaleInvoiceLogEntryErrors[keyof RetrieveSaleInvoiceLogEntryErrors]

export type RetrieveSaleInvoiceLogEntryResponses = {
	/**
	 * OK
	 */
	200: LogEntry
}

export type RetrieveSaleInvoiceLogEntryResponse =
	RetrieveSaleInvoiceLogEntryResponses[keyof RetrieveSaleInvoiceLogEntryResponses]

export type UpdateSaleInvoiceLogEntryData = {
	body?: UpdateLogEntryWritable
	path: {
		log_entry_id: number
		obj_id: number
	}
	query?: never
	url: '/v30/sale-invoices/{obj_id}/logs/{log_entry_id}'
}

export type UpdateSaleInvoiceLogEntryErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateSaleInvoiceLogEntryError = UpdateSaleInvoiceLogEntryErrors[keyof UpdateSaleInvoiceLogEntryErrors]

export type UpdateSaleInvoiceLogEntryResponses = {
	/**
	 * Accepted
	 */
	202: LogEntry
}

export type UpdateSaleInvoiceLogEntryResponse =
	UpdateSaleInvoiceLogEntryResponses[keyof UpdateSaleInvoiceLogEntryResponses]

export type ListSaleInvoicesData = {
	body?: never
	path?: never
	query?: {
		entity_id?: string
		/**
		 * Filter period on `invoice_date`
		 */
		period_filter?: string
		/**
		 * Filter by Invoice status
		 */
		invoice_status?: Array<'concept' | 'open' | 'pending_payment' | 'late' | 'reminded' | 'paid' | 'uncollectible'>
		/**
		 * Filter by # Reminders
		 */
		invoice_num_reminders_send?: Array<'0' | '1' | '2' | '3'>
		/**
		 * Filter by Invoice type
		 */
		invoice_type?: Array<
			| 'credit'
			| 'debit'
			| 'is_credited'
			| 'is_not_credited'
			| 'overpaid'
			| 'suppressed'
			| 'member'
			| 'collection'
			| 'external'
		>
		/**
		 * Filter by Category
		 */
		category?: Array<'contribution' | 'event_participation' | 'planning' | 'rental' | 'webshop'>
		/**
		 * Filter by Product
		 */
		product_offer_id?: Array<string>
		/**
		 * Filter by Member
		 */
		member_id?: Array<string>
		/**
		 * Filter by Collection
		 */
		collection_id?: Array<string>
		/**
		 * Filter on `use_direct_debit`
		 */
		use_direct_debit?: '0' | '1'
		/**
		 * Filter period on `contribution_start`
		 */
		contribution_start?: string
		/**
		 * Filter period on `contribution_end`
		 */
		contribution_end?: string
		page?: number
		page_size?: number
		order?: string | null
	}
	url: '/v30/sale-invoices'
}

export type ListSaleInvoicesErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListSaleInvoicesError = ListSaleInvoicesErrors[keyof ListSaleInvoicesErrors]

export type ListSaleInvoicesResponses = {
	/**
	 * OK
	 */
	200: SaleInvoicePagination
}

export type ListSaleInvoicesResponse = ListSaleInvoicesResponses[keyof ListSaleInvoicesResponses]

export type CreateSaleInvoiceData = {
	body?: SaleInvoiceWritable
	path?: never
	query?: never
	url: '/v30/sale-invoices'
}

export type CreateSaleInvoiceErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateSaleInvoiceError = CreateSaleInvoiceErrors[keyof CreateSaleInvoiceErrors]

export type CreateSaleInvoiceResponses = {
	/**
	 * Created
	 */
	201: SaleInvoice
}

export type CreateSaleInvoiceResponse = CreateSaleInvoiceResponses[keyof CreateSaleInvoiceResponses]

export type DeleteSaleInvoiceData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/sale-invoices/{obj_id}'
}

export type DeleteSaleInvoiceErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteSaleInvoiceError = DeleteSaleInvoiceErrors[keyof DeleteSaleInvoiceErrors]

export type DeleteSaleInvoiceResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteSaleInvoiceResponse = DeleteSaleInvoiceResponses[keyof DeleteSaleInvoiceResponses]

export type RetrieveSaleInvoiceData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/sale-invoices/{obj_id}'
}

export type RetrieveSaleInvoiceErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveSaleInvoiceError = RetrieveSaleInvoiceErrors[keyof RetrieveSaleInvoiceErrors]

export type RetrieveSaleInvoiceResponses = {
	/**
	 * OK
	 */
	200: SaleInvoice
}

export type RetrieveSaleInvoiceResponse = RetrieveSaleInvoiceResponses[keyof RetrieveSaleInvoiceResponses]

export type UpdateSaleInvoiceData = {
	body?: SaleInvoiceWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/sale-invoices/{obj_id}'
}

export type UpdateSaleInvoiceErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateSaleInvoiceError = UpdateSaleInvoiceErrors[keyof UpdateSaleInvoiceErrors]

export type UpdateSaleInvoiceResponses = {
	/**
	 * Accepted
	 */
	202: SaleInvoice
}

export type UpdateSaleInvoiceResponse = UpdateSaleInvoiceResponses[keyof UpdateSaleInvoiceResponses]

export type SendSaleInvoiceData = {
	body?: SaleInvoiceSend
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/sale-invoices/{obj_id}/send'
}

export type SendSaleInvoiceErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type SendSaleInvoiceError = SendSaleInvoiceErrors[keyof SendSaleInvoiceErrors]

export type SendSaleInvoiceResponses = {
	/**
	 * No content
	 */
	204: void
}

export type SendSaleInvoiceResponse = SendSaleInvoiceResponses[keyof SendSaleInvoiceResponses]

export type RemindSaleInvoiceData = {
	body?: SchemaWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/sale-invoices/{obj_id}/remind'
}

export type RemindSaleInvoiceErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RemindSaleInvoiceError = RemindSaleInvoiceErrors[keyof RemindSaleInvoiceErrors]

export type RemindSaleInvoiceResponses = {
	/**
	 * No content
	 */
	204: void
}

export type RemindSaleInvoiceResponse = RemindSaleInvoiceResponses[keyof RemindSaleInvoiceResponses]

export type MarkSaleInvoiceAsUncollectibleData = {
	body?: SchemaWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/sale-invoices/{obj_id}/mark-uncollectible'
}

export type MarkSaleInvoiceAsUncollectibleErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type MarkSaleInvoiceAsUncollectibleError =
	MarkSaleInvoiceAsUncollectibleErrors[keyof MarkSaleInvoiceAsUncollectibleErrors]

export type MarkSaleInvoiceAsUncollectibleResponses = {
	/**
	 * No content
	 */
	204: void
}

export type MarkSaleInvoiceAsUncollectibleResponse =
	MarkSaleInvoiceAsUncollectibleResponses[keyof MarkSaleInvoiceAsUncollectibleResponses]

export type MarkSaleInvoiceAsCollectibleData = {
	body?: SchemaWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/sale-invoices/{obj_id}/mark-collectible'
}

export type MarkSaleInvoiceAsCollectibleErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type MarkSaleInvoiceAsCollectibleError =
	MarkSaleInvoiceAsCollectibleErrors[keyof MarkSaleInvoiceAsCollectibleErrors]

export type MarkSaleInvoiceAsCollectibleResponses = {
	/**
	 * No content
	 */
	204: void
}

export type MarkSaleInvoiceAsCollectibleResponse =
	MarkSaleInvoiceAsCollectibleResponses[keyof MarkSaleInvoiceAsCollectibleResponses]

export type DownloadSaleInvoiceData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/sale-invoices/{obj_id}/download'
}

export type DownloadSaleInvoiceErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DownloadSaleInvoiceError = DownloadSaleInvoiceErrors[keyof DownloadSaleInvoiceErrors]

export type DownloadSaleInvoiceResponses = {
	/**
	 * OK
	 */
	200: unknown
}

export type ListSaleInvoiceItemsData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: {
		page?: number
		page_size?: number
		order?: string | null
	}
	url: '/v30/sale-invoices/{obj_id}/items'
}

export type ListSaleInvoiceItemsErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListSaleInvoiceItemsError = ListSaleInvoiceItemsErrors[keyof ListSaleInvoiceItemsErrors]

export type ListSaleInvoiceItemsResponses = {
	/**
	 * OK
	 */
	200: SaleInvoiceItemPagination
}

export type ListSaleInvoiceItemsResponse = ListSaleInvoiceItemsResponses[keyof ListSaleInvoiceItemsResponses]

export type CreateSaleInvoiceItemData = {
	body?: SaleInvoiceItemWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/sale-invoices/{obj_id}/items'
}

export type CreateSaleInvoiceItemErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateSaleInvoiceItemError = CreateSaleInvoiceItemErrors[keyof CreateSaleInvoiceItemErrors]

export type CreateSaleInvoiceItemResponses = {
	/**
	 * Created
	 */
	201: SaleInvoiceItem
}

export type CreateSaleInvoiceItemResponse = CreateSaleInvoiceItemResponses[keyof CreateSaleInvoiceItemResponses]

export type ListSaleInvoiceWorkflowsData = {
	body?: never
	path?: never
	query?: {
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/sale-invoices/workflows'
}

export type ListSaleInvoiceWorkflowsErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListSaleInvoiceWorkflowsError = ListSaleInvoiceWorkflowsErrors[keyof ListSaleInvoiceWorkflowsErrors]

export type ListSaleInvoiceWorkflowsResponses = {
	/**
	 * OK
	 */
	200: SaleInvoiceWorkflowPagination
}

export type ListSaleInvoiceWorkflowsResponse =
	ListSaleInvoiceWorkflowsResponses[keyof ListSaleInvoiceWorkflowsResponses]

export type ListStorageObjectsData = {
	body?: never
	path?: never
	query?: {
		page?: number
		page_size?: number
		order?: string | null
	}
	url: '/v30/storage'
}

export type ListStorageObjectsErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListStorageObjectsError = ListStorageObjectsErrors[keyof ListStorageObjectsErrors]

export type ListStorageObjectsResponses = {
	/**
	 * OK
	 */
	200: StorageObjectPagination
}

export type ListStorageObjectsResponse = ListStorageObjectsResponses[keyof ListStorageObjectsResponses]

export type CreateStorageObjectData = {
	body?: StorageObjectWritable
	path?: never
	query?: never
	url: '/v30/storage'
}

export type CreateStorageObjectErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateStorageObjectError = CreateStorageObjectErrors[keyof CreateStorageObjectErrors]

export type CreateStorageObjectResponses = {
	/**
	 * Created
	 */
	201: StorageObject
}

export type CreateStorageObjectResponse = CreateStorageObjectResponses[keyof CreateStorageObjectResponses]

export type DeleteStorageObjectData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/storage/{obj_id}'
}

export type DeleteStorageObjectErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteStorageObjectError = DeleteStorageObjectErrors[keyof DeleteStorageObjectErrors]

export type DeleteStorageObjectResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteStorageObjectResponse = DeleteStorageObjectResponses[keyof DeleteStorageObjectResponses]

export type RetrieveStorageObjectData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/storage/{obj_id}'
}

export type RetrieveStorageObjectErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveStorageObjectError = RetrieveStorageObjectErrors[keyof RetrieveStorageObjectErrors]

export type RetrieveStorageObjectResponses = {
	/**
	 * OK
	 */
	200: StorageObject
}

export type RetrieveStorageObjectResponse = RetrieveStorageObjectResponses[keyof RetrieveStorageObjectResponses]

export type UpdateStorageObjectData = {
	body?: StorageObjectWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/storage/{obj_id}'
}

export type UpdateStorageObjectErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateStorageObjectError = UpdateStorageObjectErrors[keyof UpdateStorageObjectErrors]

export type UpdateStorageObjectResponses = {
	/**
	 * Accepted
	 */
	202: StorageObject
}

export type UpdateStorageObjectResponse = UpdateStorageObjectResponses[keyof UpdateStorageObjectResponses]

export type UploadFileToStorageObjectData = {
	/**
	 * The file to upload
	 */
	body: FileUpload
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/storage/{obj_id}/file-content'
}

export type UploadFileToStorageObjectErrors = {
	/**
	 * Unprocessable Entity
	 */
	422: _Error
}

export type UploadFileToStorageObjectError = UploadFileToStorageObjectErrors[keyof UploadFileToStorageObjectErrors]

export type UploadFileToStorageObjectResponses = {
	/**
	 * Created
	 */
	201: unknown
}

export type ListWebhooksData = {
	body?: never
	path?: never
	query?: {
		page?: number
		page_size?: number
		order?: string | null
	}
	url: '/v30/webhooks'
}

export type ListWebhooksErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListWebhooksError = ListWebhooksErrors[keyof ListWebhooksErrors]

export type ListWebhooksResponses = {
	/**
	 * OK
	 */
	200: WebhookPagination
}

export type ListWebhooksResponse = ListWebhooksResponses[keyof ListWebhooksResponses]

export type CreateWebhookData = {
	body?: WebhookWritable
	path?: never
	query?: never
	url: '/v30/webhooks'
}

export type CreateWebhookErrors = {
	/**
	 * Validation error
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type CreateWebhookError = CreateWebhookErrors[keyof CreateWebhookErrors]

export type CreateWebhookResponses = {
	/**
	 * Created
	 */
	201: Webhook
}

export type CreateWebhookResponse = CreateWebhookResponses[keyof CreateWebhookResponses]

export type DeleteWebhookData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/webhooks/{obj_id}'
}

export type DeleteWebhookErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type DeleteWebhookError = DeleteWebhookErrors[keyof DeleteWebhookErrors]

export type DeleteWebhookResponses = {
	/**
	 * No content
	 */
	204: void
}

export type DeleteWebhookResponse = DeleteWebhookResponses[keyof DeleteWebhookResponses]

export type RetrieveWebhookData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/webhooks/{obj_id}'
}

export type RetrieveWebhookErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveWebhookError = RetrieveWebhookErrors[keyof RetrieveWebhookErrors]

export type RetrieveWebhookResponses = {
	/**
	 * OK
	 */
	200: Webhook
}

export type RetrieveWebhookResponse = RetrieveWebhookResponses[keyof RetrieveWebhookResponses]

export type UpdateWebhookData = {
	body?: WebhookWritable
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/webhooks/{obj_id}'
}

export type UpdateWebhookErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type UpdateWebhookError = UpdateWebhookErrors[keyof UpdateWebhookErrors]

export type UpdateWebhookResponses = {
	/**
	 * Accepted
	 */
	202: Webhook
}

export type UpdateWebhookResponse = UpdateWebhookResponses[keyof UpdateWebhookResponses]

export type ListWebhookCallsData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: {
		/**
		 * Filter period on `requested_at`
		 */
		period_filter?: string
		/**
		 * Filter by Status code
		 */
		status_code?: Array<'200' | '404' | '500'>
		page?: number
		page_size?: number
		order?: string | null
	}
	url: '/v30/webhooks/{obj_id}/calls'
}

export type ListWebhookCallsErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListWebhookCallsError = ListWebhookCallsErrors[keyof ListWebhookCallsErrors]

export type ListWebhookCallsResponses = {
	/**
	 * OK
	 */
	200: WebhookCallPagination
}

export type ListWebhookCallsResponse = ListWebhookCallsResponses[keyof ListWebhookCallsResponses]

export type ListWebpagesData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter on `published`
		 */
		published?: '0' | '1'
		/**
		 * Filter by Website
		 */
		website_id?: Array<string>
		/**
		 * Filter by Template
		 */
		template_id?: Array<string>
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/webpages'
}

export type ListWebpagesErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListWebpagesError = ListWebpagesErrors[keyof ListWebpagesErrors]

export type ListWebpagesResponses = {
	/**
	 * OK
	 */
	200: WebpagePagination
}

export type ListWebpagesResponse = ListWebpagesResponses[keyof ListWebpagesResponses]

export type RetrieveWebpageData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/webpages/{obj_id}'
}

export type RetrieveWebpageErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveWebpageError = RetrieveWebpageErrors[keyof RetrieveWebpageErrors]

export type RetrieveWebpageResponses = {
	/**
	 * OK
	 */
	200: WebpageWithContent
}

export type RetrieveWebpageResponse = RetrieveWebpageResponses[keyof RetrieveWebpageResponses]

export type ListWebsitesData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Filter on `published`
		 */
		published?: '0' | '1'
		/**
		 * Filter by Website template
		 */
		template_id?: Array<string>
		page?: number
		page_size?: number
		order?: string | null
	}
	url: '/v30/websites'
}

export type ListWebsitesErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListWebsitesError = ListWebsitesErrors[keyof ListWebsitesErrors]

export type ListWebsitesResponses = {
	/**
	 * OK
	 */
	200: WebsitePagination
}

export type ListWebsitesResponse = ListWebsitesResponses[keyof ListWebsitesResponses]

export type RetrieveWebsiteData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: never
	url: '/v30/websites/{obj_id}'
}

export type RetrieveWebsiteErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type RetrieveWebsiteError = RetrieveWebsiteErrors[keyof RetrieveWebsiteErrors]

export type RetrieveWebsiteResponses = {
	/**
	 * OK
	 */
	200: Website
}

export type RetrieveWebsiteResponse = RetrieveWebsiteResponses[keyof RetrieveWebsiteResponses]

export type ListWebsiteWebpagesData = {
	body?: never
	path: {
		obj_id: number
	}
	query?: {
		/**
		 * Filter on `published`
		 */
		published?: '0' | '1'
		/**
		 * Filter by Website
		 */
		website_id?: Array<string>
		/**
		 * Filter by Template
		 */
		template_id?: Array<string>
		page?: number
		page_size?: number
		order?: string
	}
	url: '/v30/websites/{obj_id}/webpages'
}

export type ListWebsiteWebpagesErrors = {
	/**
	 * Bad request
	 */
	400: _Error
	/**
	 * Unauthorized
	 */
	401: _Error
	/**
	 * Forbidden
	 */
	403: _Error
	/**
	 * Not found
	 */
	404: _Error
	/**
	 * Internal server error
	 */
	500: _Error
}

export type ListWebsiteWebpagesError = ListWebsiteWebpagesErrors[keyof ListWebsiteWebpagesErrors]

export type ListWebsiteWebpagesResponses = {
	/**
	 * OK
	 */
	200: WebpagePagination
}

export type ListWebsiteWebpagesResponse = ListWebsiteWebpagesResponses[keyof ListWebsiteWebpagesResponses]

export type ClientOptions = {
	baseUrl: 'https://api.congressus.nl' | (string & {})
}
