// This file is auto-generated by @hey-api/openapi-ts

import { type Client, type Options as ClientOptions, formDataBodySerializer, type TDataShape } from './client'
import { client as _heyApiClient } from './client.gen'
import {
	createBlogImageParagraphResponseTransformer,
	createBlogResponseTransformer,
	createBlogTextParagraphResponseTransformer,
	createCareerPartnerResponseTransformer,
	createEventResponseTransformer,
	createGroupMembershipResponseTransformer,
	createMemberResponseTransformer,
	createMembershipStatusResponseTransformer,
	createNewsResponseTransformer,
	createOrganisationMembershipResponseTransformer,
	createProductResponseTransformer,
	createSaleInvoiceResponseTransformer,
	createTicketTypeResponseTransformer,
	getV30GroupsFoldersRecursiveResponseTransformer,
	listBackgroundProcessesResponseTransformer,
	listBankMutationsResponseTransformer,
	listBlogsResponseTransformer,
	listCareerPartnersResponseTransformer,
	listEventParticipationsResponseTransformer,
	listEventsResponseTransformer,
	listGalleryAlbumsResponseTransformer,
	listGroupFoldersRecursiveResponseTransformer,
	listGroupMembershipsResponseTransformer,
	listGroupsResponseTransformer,
	listMembershipStatusesResponseTransformer,
	listMembersResponseTransformer,
	listNewsResponseTransformer,
	listOrganisationMembershipsResponseTransformer,
	listProductFoldersRecursiveResponseTransformer,
	listProductsResponseTransformer,
	listSaleInvoicesResponseTransformer,
	listSaleInvoiceWorkflowsResponseTransformer,
	listTasksResponseTransformer,
	listTicketTypesResponseTransformer,
	listWebhookCallsResponseTransformer,
	listWebpagesResponseTransformer,
	listWebsiteWebpagesResponseTransformer,
	retrieveBackgroundProcessResponseTransformer,
	retrieveBankMutationResponseTransformer,
	retrieveBlogImageParagraphResponseTransformer,
	retrieveBlogResponseTransformer,
	retrieveBlogTextParagraphResponseTransformer,
	retrieveCareerPartnerResponseTransformer,
	retrieveEventParticipationResponseTransformer,
	retrieveEventResponseTransformer,
	retrieveGalleryAlbumResponseTransformer,
	retrieveGroupMembershipResponseTransformer,
	retrieveGroupResponseTransformer,
	retrieveMemberResponseTransformer,
	retrieveMembershipStatusResponseTransformer,
	retrieveNewsResponseTransformer,
	retrieveOrganisationMembershipResponseTransformer,
	retrieveProductResponseTransformer,
	retrieveSaleInvoiceResponseTransformer,
	retrieveTicketTypeResponseTransformer,
	retrieveWebpageResponseTransformer,
	searchMembersResponseTransformer,
	updateBlogImageParagraphResponseTransformer,
	updateBlogResponseTransformer,
	updateBlogTextParagraphResponseTransformer,
	updateCareerPartnerResponseTransformer,
	updateEventParticipationResponseTransformer,
	updateEventResponseTransformer,
	updateGroupMembershipResponseTransformer,
	updateGroupResponseTransformer,
	updateMemberResponseTransformer,
	updateMembershipStatusResponseTransformer,
	updateNewsResponseTransformer,
	updateOrganisationMembershipResponseTransformer,
	updateProductResponseTransformer,
	updateSaleInvoiceResponseTransformer,
	updateTaskResponseTransformer,
	updateTicketTypeResponseTransformer,
} from './transformers.gen'
import type {
	AddExternalInvoiceImportData,
	AddExternalInvoiceImportResponses,
	ApproveParticipationData,
	ApproveParticipationErrors,
	ApproveParticipationResponses,
	CreateBlogAuthorData,
	CreateBlogAuthorErrors,
	CreateBlogAuthorResponses,
	CreateBlogCategoryData,
	CreateBlogCategoryErrors,
	CreateBlogCategoryResponses,
	CreateBlogData,
	CreateBlogErrors,
	CreateBlogImageParagraphData,
	CreateBlogImageParagraphErrors,
	CreateBlogImageParagraphResponses,
	CreateBlogIssueData,
	CreateBlogIssueErrors,
	CreateBlogIssueResponses,
	CreateBlogResponses,
	CreateBlogTextParagraphData,
	CreateBlogTextParagraphErrors,
	CreateBlogTextParagraphResponses,
	CreateCareerPartnerCategoryData,
	CreateCareerPartnerCategoryErrors,
	CreateCareerPartnerCategoryResponses,
	CreateCareerPartnerData,
	CreateCareerPartnerErrors,
	CreateCareerPartnerResponses,
	CreateEventData,
	CreateEventErrors,
	CreateEventParticipationData,
	CreateEventParticipationErrors,
	CreateEventParticipationResponses,
	CreateEventResponses,
	CreateGroupFolderData,
	CreateGroupFolderErrors,
	CreateGroupFolderResponses,
	CreateGroupMembershipData,
	CreateGroupMembershipErrors,
	CreateGroupMembershipResponses,
	CreateMemberData,
	CreateMemberErrors,
	CreateMemberLogEntryData,
	CreateMemberLogEntryErrors,
	CreateMemberLogEntryResponses,
	CreateMemberResponses,
	CreateMembershipStatusData,
	CreateMembershipStatusErrors,
	CreateMembershipStatusResponses,
	CreateNewsData,
	CreateNewsErrors,
	CreateNewsResponses,
	CreateOrganisationCategoryData,
	CreateOrganisationCategoryErrors,
	CreateOrganisationCategoryResponses,
	CreateOrganisationData,
	CreateOrganisationErrors,
	CreateOrganisationMembershipData,
	CreateOrganisationMembershipErrors,
	CreateOrganisationMembershipResponses,
	CreateOrganisationResponses,
	CreateProductData,
	CreateProductErrors,
	CreateProductFolderData,
	CreateProductFolderErrors,
	CreateProductFolderResponses,
	CreateProductResponses,
	CreateSaleInvoiceData,
	CreateSaleInvoiceErrors,
	CreateSaleInvoiceItemData,
	CreateSaleInvoiceItemErrors,
	CreateSaleInvoiceItemResponses,
	CreateSaleInvoiceLogEntryData,
	CreateSaleInvoiceLogEntryErrors,
	CreateSaleInvoiceLogEntryResponses,
	CreateSaleInvoiceResponses,
	CreateSavedReplyData,
	CreateSavedReplyErrors,
	CreateSavedReplyResponses,
	CreateStorageObjectData,
	CreateStorageObjectErrors,
	CreateStorageObjectResponses,
	CreateTicketTypeData,
	CreateTicketTypeErrors,
	CreateTicketTypeResponses,
	CreateWebhookData,
	CreateWebhookErrors,
	CreateWebhookResponses,
	DeclineParticipationData,
	DeclineParticipationErrors,
	DeclineParticipationResponses,
	DeleteBankMutationData,
	DeleteBankMutationErrors,
	DeleteBankMutationResponses,
	DeleteBlogAuthorData,
	DeleteBlogAuthorErrors,
	DeleteBlogAuthorResponses,
	DeleteBlogCategoryData,
	DeleteBlogCategoryErrors,
	DeleteBlogCategoryResponses,
	DeleteBlogData,
	DeleteBlogErrors,
	DeleteBlogImageParagraphData,
	DeleteBlogImageParagraphErrors,
	DeleteBlogImageParagraphResponses,
	DeleteBlogIssueData,
	DeleteBlogIssueErrors,
	DeleteBlogIssueResponses,
	DeleteBlogResponses,
	DeleteBlogTextParagraphData,
	DeleteBlogTextParagraphErrors,
	DeleteBlogTextParagraphResponses,
	DeleteCareerPartnerCategoryData,
	DeleteCareerPartnerCategoryErrors,
	DeleteCareerPartnerCategoryResponses,
	DeleteCareerPartnerData,
	DeleteCareerPartnerErrors,
	DeleteCareerPartnerResponses,
	DeleteEventData,
	DeleteEventErrors,
	DeleteEventResponses,
	DeleteGroupData,
	DeleteGroupErrors,
	DeleteGroupFolderData,
	DeleteGroupFolderErrors,
	DeleteGroupFolderResponses,
	DeleteGroupMembershipData,
	DeleteGroupMembershipErrors,
	DeleteGroupMembershipResponses,
	DeleteGroupResponses,
	DeleteMemberData,
	DeleteMemberErrors,
	DeleteMemberLogEntryData,
	DeleteMemberLogEntryErrors,
	DeleteMemberLogEntryResponses,
	DeleteMemberResponses,
	DeleteMemberStatusData,
	DeleteMemberStatusErrors,
	DeleteMemberStatusResponses,
	DeleteMembershipStatusData,
	DeleteMembershipStatusErrors,
	DeleteMembershipStatusResponses,
	DeleteNewsData,
	DeleteNewsErrors,
	DeleteNewsResponses,
	DeleteOrganisationCategoryData,
	DeleteOrganisationCategoryErrors,
	DeleteOrganisationCategoryResponses,
	DeleteOrganisationData,
	DeleteOrganisationErrors,
	DeleteOrganisationMembershipData,
	DeleteOrganisationMembershipErrors,
	DeleteOrganisationMembershipResponses,
	DeleteOrganisationResponses,
	DeleteProductData,
	DeleteProductErrors,
	DeleteProductFolderData,
	DeleteProductFolderErrors,
	DeleteProductFolderResponses,
	DeleteProductResponses,
	DeleteSaleInvoiceData,
	DeleteSaleInvoiceErrors,
	DeleteSaleInvoiceLogEntryData,
	DeleteSaleInvoiceLogEntryErrors,
	DeleteSaleInvoiceLogEntryResponses,
	DeleteSaleInvoiceResponses,
	DeleteSavedReplyData,
	DeleteSavedReplyErrors,
	DeleteSavedReplyResponses,
	DeleteStorageObjectData,
	DeleteStorageObjectErrors,
	DeleteStorageObjectResponses,
	DeleteTicketTypeData,
	DeleteTicketTypeErrors,
	DeleteTicketTypeResponses,
	DeleteV30GroupsFoldersByObjIdData,
	DeleteV30GroupsFoldersByObjIdErrors,
	DeleteV30GroupsFoldersByObjIdResponses,
	DeleteWebhookData,
	DeleteWebhookErrors,
	DeleteWebhookResponses,
	DownloadSaleInvoiceData,
	DownloadSaleInvoiceErrors,
	DownloadSaleInvoiceResponses,
	GetV30GroupsFoldersByObjIdData,
	GetV30GroupsFoldersByObjIdErrors,
	GetV30GroupsFoldersByObjIdResponses,
	GetV30GroupsFoldersData,
	GetV30GroupsFoldersErrors,
	GetV30GroupsFoldersRecursiveData,
	GetV30GroupsFoldersRecursiveErrors,
	GetV30GroupsFoldersRecursiveResponses,
	GetV30GroupsFoldersResponses,
	ListBackgroundProcessesData,
	ListBackgroundProcessesErrors,
	ListBackgroundProcessesResponses,
	ListBankMutationsData,
	ListBankMutationsErrors,
	ListBankMutationsResponses,
	ListBlogAuthorsData,
	ListBlogAuthorsErrors,
	ListBlogAuthorsResponses,
	ListBlogCategoriesData,
	ListBlogCategoriesErrors,
	ListBlogCategoriesResponses,
	ListBlogIssuesData,
	ListBlogIssuesErrors,
	ListBlogIssuesResponses,
	ListBlogsData,
	ListBlogsErrors,
	ListBlogsResponses,
	ListCareerPartnerCategoriesData,
	ListCareerPartnerCategoriesErrors,
	ListCareerPartnerCategoriesResponses,
	ListCareerPartnersData,
	ListCareerPartnersErrors,
	ListCareerPartnersResponses,
	ListCountriesData,
	ListCountriesErrors,
	ListCountriesResponses,
	ListCustomFieldsData,
	ListCustomFieldsErrors,
	ListCustomFieldsResponses,
	ListEventCategoriesData,
	ListEventCategoriesErrors,
	ListEventCategoriesResponses,
	ListEventParticipationsData,
	ListEventParticipationsErrors,
	ListEventParticipationsResponses,
	ListEventsData,
	ListEventsErrors,
	ListEventsResponses,
	ListGalleryAlbumsData,
	ListGalleryAlbumsErrors,
	ListGalleryAlbumsResponses,
	ListGalleryPhotosData,
	ListGalleryPhotosErrors,
	ListGalleryPhotosResponses,
	ListGroupFoldersData,
	ListGroupFoldersErrors,
	ListGroupFoldersRecursiveData,
	ListGroupFoldersRecursiveErrors,
	ListGroupFoldersRecursiveResponses,
	ListGroupFoldersResponses,
	ListGroupMembershipsData,
	ListGroupMembershipsErrors,
	ListGroupMembershipsResponses,
	ListGroupsData,
	ListGroupsErrors,
	ListGroupsResponses,
	ListMemberLogEntriesData,
	ListMemberLogEntriesErrors,
	ListMemberLogEntriesResponses,
	ListMemberStatusesData,
	ListMemberStatusesErrors,
	ListMemberStatusesResponses,
	ListMembersData,
	ListMembersErrors,
	ListMembershipStatusesData,
	ListMembershipStatusesErrors,
	ListMembershipStatusesResponses,
	ListMembersResponses,
	ListNewsData,
	ListNewsErrors,
	ListNewsResponses,
	ListNotificationsData,
	ListNotificationsErrors,
	ListNotificationsResponses,
	ListOrganisationCategoriesData,
	ListOrganisationCategoriesErrors,
	ListOrganisationCategoriesResponses,
	ListOrganisationMembershipsData,
	ListOrganisationMembershipsErrors,
	ListOrganisationMembershipsResponses,
	ListOrganisationsData,
	ListOrganisationsErrors,
	ListOrganisationsResponses,
	ListProductFoldersData,
	ListProductFoldersErrors,
	ListProductFoldersRecursiveData,
	ListProductFoldersRecursiveErrors,
	ListProductFoldersRecursiveResponses,
	ListProductFoldersResponses,
	ListProductsData,
	ListProductsErrors,
	ListProductsResponses,
	ListSaleInvoiceItemsData,
	ListSaleInvoiceItemsErrors,
	ListSaleInvoiceItemsResponses,
	ListSaleInvoiceLogEntriesData,
	ListSaleInvoiceLogEntriesErrors,
	ListSaleInvoiceLogEntriesResponses,
	ListSaleInvoicesData,
	ListSaleInvoicesErrors,
	ListSaleInvoicesResponses,
	ListSaleInvoiceWorkflowsData,
	ListSaleInvoiceWorkflowsErrors,
	ListSaleInvoiceWorkflowsResponses,
	ListSavedRepliesData,
	ListSavedRepliesErrors,
	ListSavedRepliesResponses,
	ListStorageObjectsData,
	ListStorageObjectsErrors,
	ListStorageObjectsResponses,
	ListTasksData,
	ListTasksErrors,
	ListTasksResponses,
	ListTicketTypesData,
	ListTicketTypesErrors,
	ListTicketTypesResponses,
	ListWebhookCallsData,
	ListWebhookCallsErrors,
	ListWebhookCallsResponses,
	ListWebhooksData,
	ListWebhooksErrors,
	ListWebhooksResponses,
	ListWebpagesData,
	ListWebpagesErrors,
	ListWebpagesResponses,
	ListWebsitesData,
	ListWebsitesErrors,
	ListWebsitesResponses,
	ListWebsiteWebpagesData,
	ListWebsiteWebpagesErrors,
	ListWebsiteWebpagesResponses,
	MarkSaleInvoiceAsCollectibleData,
	MarkSaleInvoiceAsCollectibleErrors,
	MarkSaleInvoiceAsCollectibleResponses,
	MarkSaleInvoiceAsUncollectibleData,
	MarkSaleInvoiceAsUncollectibleErrors,
	MarkSaleInvoiceAsUncollectibleResponses,
	MatchBankMutationData,
	MatchBankMutationErrors,
	MatchBankMutationResponses,
	MoveToWaitingListData,
	MoveToWaitingListErrors,
	MoveToWaitingListResponses,
	PostV30GroupsFoldersData,
	PostV30GroupsFoldersErrors,
	PostV30GroupsFoldersResponses,
	PutV30GroupsFoldersByObjIdData,
	PutV30GroupsFoldersByObjIdErrors,
	PutV30GroupsFoldersByObjIdResponses,
	RemindSaleInvoiceData,
	RemindSaleInvoiceErrors,
	RemindSaleInvoiceResponses,
	RetrieveBackgroundProcessData,
	RetrieveBackgroundProcessErrors,
	RetrieveBackgroundProcessResponses,
	RetrieveBackgroundProcessResultData,
	RetrieveBackgroundProcessResultErrors,
	RetrieveBackgroundProcessResultResponses,
	RetrieveBankMutationData,
	RetrieveBankMutationErrors,
	RetrieveBankMutationResponses,
	RetrieveBlogAuthorData,
	RetrieveBlogAuthorErrors,
	RetrieveBlogAuthorResponses,
	RetrieveBlogCategoryData,
	RetrieveBlogCategoryErrors,
	RetrieveBlogCategoryResponses,
	RetrieveBlogData,
	RetrieveBlogErrors,
	RetrieveBlogImageParagraphData,
	RetrieveBlogImageParagraphErrors,
	RetrieveBlogImageParagraphResponses,
	RetrieveBlogIssueData,
	RetrieveBlogIssueErrors,
	RetrieveBlogIssueResponses,
	RetrieveBlogResponses,
	RetrieveBlogTextParagraphData,
	RetrieveBlogTextParagraphErrors,
	RetrieveBlogTextParagraphResponses,
	RetrieveCareerPartnerCategoryData,
	RetrieveCareerPartnerCategoryErrors,
	RetrieveCareerPartnerCategoryResponses,
	RetrieveCareerPartnerData,
	RetrieveCareerPartnerErrors,
	RetrieveCareerPartnerResponses,
	RetrieveCountryData,
	RetrieveCountryErrors,
	RetrieveCountryResponses,
	RetrieveCustomFieldByIdData,
	RetrieveCustomFieldByIdErrors,
	RetrieveCustomFieldByIdResponses,
	RetrieveCustomFieldByRefData,
	RetrieveCustomFieldByRefErrors,
	RetrieveCustomFieldByRefResponses,
	RetrieveEventData,
	RetrieveEventErrors,
	RetrieveEventParticipationData,
	RetrieveEventParticipationErrors,
	RetrieveEventParticipationResponses,
	RetrieveEventResponses,
	RetrieveGalleryAlbumData,
	RetrieveGalleryAlbumErrors,
	RetrieveGalleryAlbumResponses,
	RetrieveGalleryPhotoData,
	RetrieveGalleryPhotoErrors,
	RetrieveGalleryPhotoResponses,
	RetrieveGroupData,
	RetrieveGroupErrors,
	RetrieveGroupFolderData,
	RetrieveGroupFolderErrors,
	RetrieveGroupFolderResponses,
	RetrieveGroupMembershipData,
	RetrieveGroupMembershipErrors,
	RetrieveGroupMembershipResponses,
	RetrieveGroupResponses,
	RetrieveMemberData,
	RetrieveMemberErrors,
	RetrieveMemberLogEntryData,
	RetrieveMemberLogEntryErrors,
	RetrieveMemberLogEntryResponses,
	RetrieveMemberResponses,
	RetrieveMemberStatusData,
	RetrieveMemberStatusErrors,
	RetrieveMemberStatusResponses,
	RetrieveMembershipStatusData,
	RetrieveMembershipStatusErrors,
	RetrieveMembershipStatusResponses,
	RetrieveNewsData,
	RetrieveNewsErrors,
	RetrieveNewsResponses,
	RetrieveOrganisationCategoryData,
	RetrieveOrganisationCategoryErrors,
	RetrieveOrganisationCategoryResponses,
	RetrieveOrganisationData,
	RetrieveOrganisationErrors,
	RetrieveOrganisationMembershipData,
	RetrieveOrganisationMembershipErrors,
	RetrieveOrganisationMembershipResponses,
	RetrieveOrganisationResponses,
	RetrieveProductData,
	RetrieveProductErrors,
	RetrieveProductFolderData,
	RetrieveProductFolderErrors,
	RetrieveProductFolderResponses,
	RetrieveProductResponses,
	RetrieveSaleInvoiceData,
	RetrieveSaleInvoiceErrors,
	RetrieveSaleInvoiceLogEntryData,
	RetrieveSaleInvoiceLogEntryErrors,
	RetrieveSaleInvoiceLogEntryResponses,
	RetrieveSaleInvoiceResponses,
	RetrieveSavedReplyData,
	RetrieveSavedReplyErrors,
	RetrieveSavedReplyResponses,
	RetrieveStorageObjectData,
	RetrieveStorageObjectErrors,
	RetrieveStorageObjectResponses,
	RetrieveTicketTypeData,
	RetrieveTicketTypeErrors,
	RetrieveTicketTypeResponses,
	RetrieveWebhookData,
	RetrieveWebhookErrors,
	RetrieveWebhookResponses,
	RetrieveWebpageData,
	RetrieveWebpageErrors,
	RetrieveWebpageResponses,
	RetrieveWebsiteData,
	RetrieveWebsiteErrors,
	RetrieveWebsiteResponses,
	SearchMembersData,
	SearchMembersErrors,
	SearchMembersResponses,
	SendSaleInvoiceData,
	SendSaleInvoiceErrors,
	SendSaleInvoiceResponses,
	SetPresenceData,
	SetPresenceErrors,
	SetPresenceResponses,
	UnmatchBankMutationData,
	UnmatchBankMutationErrors,
	UnmatchBankMutationResponses,
	UnsubscribeParticipationData,
	UnsubscribeParticipationErrors,
	UnsubscribeParticipationResponses,
	UpdateBlogAuthorData,
	UpdateBlogAuthorErrors,
	UpdateBlogAuthorResponses,
	UpdateBlogCategoryData,
	UpdateBlogCategoryErrors,
	UpdateBlogCategoryResponses,
	UpdateBlogData,
	UpdateBlogErrors,
	UpdateBlogImageParagraphData,
	UpdateBlogImageParagraphErrors,
	UpdateBlogImageParagraphResponses,
	UpdateBlogIssueData,
	UpdateBlogIssueErrors,
	UpdateBlogIssueResponses,
	UpdateBlogResponses,
	UpdateBlogTextParagraphData,
	UpdateBlogTextParagraphErrors,
	UpdateBlogTextParagraphResponses,
	UpdateCareerPartnerCategoryData,
	UpdateCareerPartnerCategoryErrors,
	UpdateCareerPartnerCategoryResponses,
	UpdateCareerPartnerData,
	UpdateCareerPartnerErrors,
	UpdateCareerPartnerResponses,
	UpdateEventData,
	UpdateEventErrors,
	UpdateEventParticipationData,
	UpdateEventParticipationErrors,
	UpdateEventParticipationResponses,
	UpdateEventResponses,
	UpdateGroupData,
	UpdateGroupErrors,
	UpdateGroupFolderData,
	UpdateGroupFolderErrors,
	UpdateGroupFolderResponses,
	UpdateGroupMembershipData,
	UpdateGroupMembershipErrors,
	UpdateGroupMembershipResponses,
	UpdateGroupResponses,
	UpdateMemberData,
	UpdateMemberErrors,
	UpdateMemberLogEntryData,
	UpdateMemberLogEntryErrors,
	UpdateMemberLogEntryResponses,
	UpdateMemberResponses,
	UpdateMemberStatusData,
	UpdateMemberStatusErrors,
	UpdateMemberStatusResponses,
	UpdateMembershipStatusData,
	UpdateMembershipStatusErrors,
	UpdateMembershipStatusResponses,
	UpdateNewsData,
	UpdateNewsErrors,
	UpdateNewsResponses,
	UpdateOrganisationCategoryData,
	UpdateOrganisationCategoryErrors,
	UpdateOrganisationCategoryResponses,
	UpdateOrganisationData,
	UpdateOrganisationErrors,
	UpdateOrganisationMembershipData,
	UpdateOrganisationMembershipErrors,
	UpdateOrganisationMembershipResponses,
	UpdateOrganisationResponses,
	UpdateProductData,
	UpdateProductErrors,
	UpdateProductFolderData,
	UpdateProductFolderErrors,
	UpdateProductFolderResponses,
	UpdateProductResponses,
	UpdateSaleInvoiceData,
	UpdateSaleInvoiceErrors,
	UpdateSaleInvoiceLogEntryData,
	UpdateSaleInvoiceLogEntryErrors,
	UpdateSaleInvoiceLogEntryResponses,
	UpdateSaleInvoiceResponses,
	UpdateSavedReplyData,
	UpdateSavedReplyErrors,
	UpdateSavedReplyResponses,
	UpdateStorageObjectData,
	UpdateStorageObjectErrors,
	UpdateStorageObjectResponses,
	UpdateTaskData,
	UpdateTaskErrors,
	UpdateTaskResponses,
	UpdateTicketTypeData,
	UpdateTicketTypeErrors,
	UpdateTicketTypeResponses,
	UpdateWebhookData,
	UpdateWebhookErrors,
	UpdateWebhookResponses,
	UploadFileToStorageObjectData,
	UploadFileToStorageObjectErrors,
	UploadFileToStorageObjectResponses,
} from './types.gen'

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
	TData,
	ThrowOnError
> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>
}

/**
 * List Background processs
 */
export const listBackgroundProcesses = <ThrowOnError extends boolean = true>(
	options?: Options<ListBackgroundProcessesData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		ListBackgroundProcessesResponses,
		ListBackgroundProcessesErrors,
		ThrowOnError
	>({
		responseTransformer: listBackgroundProcessesResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/background-processes',
		...options,
	})
}

/**
 * Retrieve BackgroundProcess
 */
export const retrieveBackgroundProcess = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveBackgroundProcessData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		RetrieveBackgroundProcessResponses,
		RetrieveBackgroundProcessErrors,
		ThrowOnError
	>({
		responseTransformer: retrieveBackgroundProcessResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/background-processes/{obj_id}',
		...options,
	})
}

/**
 * Retrieve BackgroundProcess
 */
export const retrieveBackgroundProcessResult = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveBackgroundProcessResultData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		RetrieveBackgroundProcessResultResponses,
		RetrieveBackgroundProcessResultErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/background-processes/results/{obj_id}',
		...options,
	})
}

/**
 * List bank mutations
 */
export const listBankMutations = <ThrowOnError extends boolean = true>(
	options?: Options<ListBankMutationsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListBankMutationsResponses, ListBankMutationsErrors, ThrowOnError>({
		responseTransformer: listBankMutationsResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/bank',
		...options,
	})
}

/**
 * Delete bank mutation
 */
export const deleteBankMutation = <ThrowOnError extends boolean = true>(
	options: Options<DeleteBankMutationData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<DeleteBankMutationResponses, DeleteBankMutationErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/bank/{obj_id}',
		...options,
	})
}

/**
 * Retrieve bank mutation
 */
export const retrieveBankMutation = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveBankMutationData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<RetrieveBankMutationResponses, RetrieveBankMutationErrors, ThrowOnError>(
		{
			responseTransformer: retrieveBankMutationResponseTransformer,
			security: [
				{
					scheme: 'bearer',
					type: 'http',
				},
			],
			url: '/v30/bank/{obj_id}',
			...options,
		},
	)
}

/**
 * Match mutation with a sale invoice
 */
export const matchBankMutation = <ThrowOnError extends boolean = true>(
	options: Options<MatchBankMutationData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<MatchBankMutationResponses, MatchBankMutationErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/bank/{obj_id}/match',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Remove match with a sale invoice
 */
export const unmatchBankMutation = <ThrowOnError extends boolean = true>(
	options: Options<UnmatchBankMutationData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<UnmatchBankMutationResponses, UnmatchBankMutationErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/bank/{obj_id}/unmatch',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Blog authors
 */
export const listBlogAuthors = <ThrowOnError extends boolean = true>(
	options?: Options<ListBlogAuthorsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListBlogAuthorsResponses, ListBlogAuthorsErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/authors',
		...options,
	})
}

/**
 * Create BlogAuthor
 */
export const createBlogAuthor = <ThrowOnError extends boolean = true>(
	options?: Options<CreateBlogAuthorData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<CreateBlogAuthorResponses, CreateBlogAuthorErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/authors',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Delete BlogAuthor
 */
export const deleteBlogAuthor = <ThrowOnError extends boolean = true>(
	options: Options<DeleteBlogAuthorData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<DeleteBlogAuthorResponses, DeleteBlogAuthorErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/authors/{obj_id}',
		...options,
	})
}

/**
 * Retrieve BlogAuthor
 */
export const retrieveBlogAuthor = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveBlogAuthorData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<RetrieveBlogAuthorResponses, RetrieveBlogAuthorErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/authors/{obj_id}',
		...options,
	})
}

/**
 * Update BlogAuthor
 */
export const updateBlogAuthor = <ThrowOnError extends boolean = true>(
	options: Options<UpdateBlogAuthorData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<UpdateBlogAuthorResponses, UpdateBlogAuthorErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/authors/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Blogs
 */
export const listBlogs = <ThrowOnError extends boolean = true>(options?: Options<ListBlogsData, ThrowOnError>) => {
	return (options?.client ?? _heyApiClient).get<ListBlogsResponses, ListBlogsErrors, ThrowOnError>({
		responseTransformer: listBlogsResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs',
		...options,
	})
}

/**
 * Create Blog
 */
export const createBlog = <ThrowOnError extends boolean = true>(options?: Options<CreateBlogData, ThrowOnError>) => {
	return (options?.client ?? _heyApiClient).post<CreateBlogResponses, CreateBlogErrors, ThrowOnError>({
		responseTransformer: createBlogResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Delete Blog
 */
export const deleteBlog = <ThrowOnError extends boolean = true>(options: Options<DeleteBlogData, ThrowOnError>) => {
	return (options.client ?? _heyApiClient).delete<DeleteBlogResponses, DeleteBlogErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/{obj_id}',
		...options,
	})
}

/**
 * Retrieve Blog
 */
export const retrieveBlog = <ThrowOnError extends boolean = true>(options: Options<RetrieveBlogData, ThrowOnError>) => {
	return (options.client ?? _heyApiClient).get<RetrieveBlogResponses, RetrieveBlogErrors, ThrowOnError>({
		responseTransformer: retrieveBlogResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/{obj_id}',
		...options,
	})
}

/**
 * Update Blog
 */
export const updateBlog = <ThrowOnError extends boolean = true>(options: Options<UpdateBlogData, ThrowOnError>) => {
	return (options.client ?? _heyApiClient).put<UpdateBlogResponses, UpdateBlogErrors, ThrowOnError>({
		responseTransformer: updateBlogResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Create BlogTextParagraph
 */
export const createBlogTextParagraph = <ThrowOnError extends boolean = true>(
	options: Options<CreateBlogTextParagraphData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		CreateBlogTextParagraphResponses,
		CreateBlogTextParagraphErrors,
		ThrowOnError
	>({
		responseTransformer: createBlogTextParagraphResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/{obj_id}/paragraphs/text',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Create BlogImageParagraph
 */
export const createBlogImageParagraph = <ThrowOnError extends boolean = true>(
	options: Options<CreateBlogImageParagraphData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		CreateBlogImageParagraphResponses,
		CreateBlogImageParagraphErrors,
		ThrowOnError
	>({
		responseTransformer: createBlogImageParagraphResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/{obj_id}/paragraphs/image',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Delete BlogTextParagraph
 */
export const deleteBlogTextParagraph = <ThrowOnError extends boolean = true>(
	options: Options<DeleteBlogTextParagraphData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteBlogTextParagraphResponses,
		DeleteBlogTextParagraphErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/paragraphs/text/{obj_id}',
		...options,
	})
}

/**
 * Retrieve BlogTextParagraph
 */
export const retrieveBlogTextParagraph = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveBlogTextParagraphData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		RetrieveBlogTextParagraphResponses,
		RetrieveBlogTextParagraphErrors,
		ThrowOnError
	>({
		responseTransformer: retrieveBlogTextParagraphResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/paragraphs/text/{obj_id}',
		...options,
	})
}

/**
 * Update BlogTextParagraph
 */
export const updateBlogTextParagraph = <ThrowOnError extends boolean = true>(
	options: Options<UpdateBlogTextParagraphData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<
		UpdateBlogTextParagraphResponses,
		UpdateBlogTextParagraphErrors,
		ThrowOnError
	>({
		responseTransformer: updateBlogTextParagraphResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/paragraphs/text/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Delete BlogImageParagraph
 */
export const deleteBlogImageParagraph = <ThrowOnError extends boolean = true>(
	options: Options<DeleteBlogImageParagraphData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteBlogImageParagraphResponses,
		DeleteBlogImageParagraphErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/paragraphs/image/{obj_id}',
		...options,
	})
}

/**
 * Retrieve BlogImageParagraph
 */
export const retrieveBlogImageParagraph = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveBlogImageParagraphData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		RetrieveBlogImageParagraphResponses,
		RetrieveBlogImageParagraphErrors,
		ThrowOnError
	>({
		responseTransformer: retrieveBlogImageParagraphResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/paragraphs/image/{obj_id}',
		...options,
	})
}

/**
 * Update BlogImageParagraph
 */
export const updateBlogImageParagraph = <ThrowOnError extends boolean = true>(
	options: Options<UpdateBlogImageParagraphData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<
		UpdateBlogImageParagraphResponses,
		UpdateBlogImageParagraphErrors,
		ThrowOnError
	>({
		responseTransformer: updateBlogImageParagraphResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/paragraphs/image/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Blog categories
 */
export const listBlogCategories = <ThrowOnError extends boolean = true>(
	options?: Options<ListBlogCategoriesData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListBlogCategoriesResponses, ListBlogCategoriesErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/categories',
		...options,
	})
}

/**
 * Create Blog category
 */
export const createBlogCategory = <ThrowOnError extends boolean = true>(
	options?: Options<CreateBlogCategoryData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<CreateBlogCategoryResponses, CreateBlogCategoryErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/categories',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Delete Blog category
 */
export const deleteBlogCategory = <ThrowOnError extends boolean = true>(
	options: Options<DeleteBlogCategoryData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<DeleteBlogCategoryResponses, DeleteBlogCategoryErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/categories/{obj_id}',
		...options,
	})
}

/**
 * Retrieve Blog category
 */
export const retrieveBlogCategory = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveBlogCategoryData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<RetrieveBlogCategoryResponses, RetrieveBlogCategoryErrors, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http',
				},
			],
			url: '/v30/blogs/categories/{obj_id}',
			...options,
		},
	)
}

/**
 * Update Blog category
 */
export const updateBlogCategory = <ThrowOnError extends boolean = true>(
	options: Options<UpdateBlogCategoryData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<UpdateBlogCategoryResponses, UpdateBlogCategoryErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/categories/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Blog issues
 */
export const listBlogIssues = <ThrowOnError extends boolean = true>(
	options?: Options<ListBlogIssuesData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListBlogIssuesResponses, ListBlogIssuesErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/issues',
		...options,
	})
}

/**
 * Create BlogIssue
 */
export const createBlogIssue = <ThrowOnError extends boolean = true>(
	options?: Options<CreateBlogIssueData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<CreateBlogIssueResponses, CreateBlogIssueErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/issues',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Delete BlogIssue
 */
export const deleteBlogIssue = <ThrowOnError extends boolean = true>(
	options: Options<DeleteBlogIssueData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<DeleteBlogIssueResponses, DeleteBlogIssueErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/issues/{obj_id}',
		...options,
	})
}

/**
 * Retrieve BlogIssue
 */
export const retrieveBlogIssue = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveBlogIssueData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<RetrieveBlogIssueResponses, RetrieveBlogIssueErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/issues/{obj_id}',
		...options,
	})
}

/**
 * Update BlogIssue
 */
export const updateBlogIssue = <ThrowOnError extends boolean = true>(
	options: Options<UpdateBlogIssueData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<UpdateBlogIssueResponses, UpdateBlogIssueErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/blogs/issues/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Career partner categories
 */
export const listCareerPartnerCategories = <ThrowOnError extends boolean = true>(
	options?: Options<ListCareerPartnerCategoriesData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		ListCareerPartnerCategoriesResponses,
		ListCareerPartnerCategoriesErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/career/partners/categories',
		...options,
	})
}

/**
 * Create Career partner category
 */
export const createCareerPartnerCategory = <ThrowOnError extends boolean = true>(
	options?: Options<CreateCareerPartnerCategoryData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		CreateCareerPartnerCategoryResponses,
		CreateCareerPartnerCategoryErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/career/partners/categories',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Delete Career partner category
 */
export const deleteCareerPartnerCategory = <ThrowOnError extends boolean = true>(
	options: Options<DeleteCareerPartnerCategoryData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteCareerPartnerCategoryResponses,
		DeleteCareerPartnerCategoryErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/career/partners/categories/{obj_id}',
		...options,
	})
}

/**
 * Retrieve Career partner category
 */
export const retrieveCareerPartnerCategory = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveCareerPartnerCategoryData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		RetrieveCareerPartnerCategoryResponses,
		RetrieveCareerPartnerCategoryErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/career/partners/categories/{obj_id}',
		...options,
	})
}

/**
 * Update Career partner category
 */
export const updateCareerPartnerCategory = <ThrowOnError extends boolean = true>(
	options: Options<UpdateCareerPartnerCategoryData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<
		UpdateCareerPartnerCategoryResponses,
		UpdateCareerPartnerCategoryErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/career/partners/categories/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Career partners
 */
export const listCareerPartners = <ThrowOnError extends boolean = true>(
	options?: Options<ListCareerPartnersData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListCareerPartnersResponses, ListCareerPartnersErrors, ThrowOnError>({
		responseTransformer: listCareerPartnersResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/career/partners',
		...options,
	})
}

/**
 * Create Career partner
 */
export const createCareerPartner = <ThrowOnError extends boolean = true>(
	options?: Options<CreateCareerPartnerData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<CreateCareerPartnerResponses, CreateCareerPartnerErrors, ThrowOnError>(
		{
			responseTransformer: createCareerPartnerResponseTransformer,
			security: [
				{
					scheme: 'bearer',
					type: 'http',
				},
			],
			url: '/v30/career/partners',
			...options,
			headers: {
				'Content-Type': 'application/json',
				...options?.headers,
			},
		},
	)
}

/**
 * Delete Career partner
 */
export const deleteCareerPartner = <ThrowOnError extends boolean = true>(
	options: Options<DeleteCareerPartnerData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteCareerPartnerResponses,
		DeleteCareerPartnerErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/career/partners/{obj_id}',
		...options,
	})
}

/**
 * Retrieve Career partner
 */
export const retrieveCareerPartner = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveCareerPartnerData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		RetrieveCareerPartnerResponses,
		RetrieveCareerPartnerErrors,
		ThrowOnError
	>({
		responseTransformer: retrieveCareerPartnerResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/career/partners/{obj_id}',
		...options,
	})
}

/**
 * Update Career partner
 */
export const updateCareerPartner = <ThrowOnError extends boolean = true>(
	options: Options<UpdateCareerPartnerData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<UpdateCareerPartnerResponses, UpdateCareerPartnerErrors, ThrowOnError>({
		responseTransformer: updateCareerPartnerResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/career/partners/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List saved replies
 */
export const listSavedReplies = <ThrowOnError extends boolean = true>(
	options?: Options<ListSavedRepliesData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListSavedRepliesResponses, ListSavedRepliesErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/communication/saved-replies',
		...options,
	})
}

/**
 * Create SavedReply
 */
export const createSavedReply = <ThrowOnError extends boolean = true>(
	options?: Options<CreateSavedReplyData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<CreateSavedReplyResponses, CreateSavedReplyErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/communication/saved-replies',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Delete SavedReply
 */
export const deleteSavedReply = <ThrowOnError extends boolean = true>(
	options: Options<DeleteSavedReplyData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<DeleteSavedReplyResponses, DeleteSavedReplyErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/communication/saved-replies/{obj_id}',
		...options,
	})
}

/**
 * Retrieve SavedReply
 */
export const retrieveSavedReply = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveSavedReplyData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<RetrieveSavedReplyResponses, RetrieveSavedReplyErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/communication/saved-replies/{obj_id}',
		...options,
	})
}

/**
 * Update SavedReply
 */
export const updateSavedReply = <ThrowOnError extends boolean = true>(
	options: Options<UpdateSavedReplyData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<UpdateSavedReplyResponses, UpdateSavedReplyErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/communication/saved-replies/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Countries
 */
export const listCountries = <ThrowOnError extends boolean = true>(
	options?: Options<ListCountriesData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListCountriesResponses, ListCountriesErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/countries',
		...options,
	})
}

/**
 * Retrieve Country
 */
export const retrieveCountry = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveCountryData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<RetrieveCountryResponses, RetrieveCountryErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/countries/{obj_id}',
		...options,
	})
}

/**
 * List Event categories
 */
export const listEventCategories = <ThrowOnError extends boolean = true>(
	options?: Options<ListEventCategoriesData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListEventCategoriesResponses, ListEventCategoriesErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/event-categories',
		...options,
	})
}

/**
 * List Events
 */
export const listEvents = <ThrowOnError extends boolean = true>(options?: Options<ListEventsData, ThrowOnError>) => {
	return (options?.client ?? _heyApiClient).get<ListEventsResponses, ListEventsErrors, ThrowOnError>({
		responseTransformer: listEventsResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/events',
		...options,
	})
}

/**
 * Create Event
 */
export const createEvent = <ThrowOnError extends boolean = true>(options?: Options<CreateEventData, ThrowOnError>) => {
	return (options?.client ?? _heyApiClient).post<CreateEventResponses, CreateEventErrors, ThrowOnError>({
		responseTransformer: createEventResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/events',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Delete Event
 */
export const deleteEvent = <ThrowOnError extends boolean = true>(options: Options<DeleteEventData, ThrowOnError>) => {
	return (options.client ?? _heyApiClient).delete<DeleteEventResponses, DeleteEventErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/events/{obj_id}',
		...options,
	})
}

/**
 * Retrieve Event
 */
export const retrieveEvent = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveEventData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<RetrieveEventResponses, RetrieveEventErrors, ThrowOnError>({
		responseTransformer: retrieveEventResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/events/{obj_id}',
		...options,
	})
}

/**
 * Update Event
 */
export const updateEvent = <ThrowOnError extends boolean = true>(options: Options<UpdateEventData, ThrowOnError>) => {
	return (options.client ?? _heyApiClient).put<UpdateEventResponses, UpdateEventErrors, ThrowOnError>({
		responseTransformer: updateEventResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/events/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Event participations
 */
export const listEventParticipations = <ThrowOnError extends boolean = true>(
	options: Options<ListEventParticipationsData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		ListEventParticipationsResponses,
		ListEventParticipationsErrors,
		ThrowOnError
	>({
		responseTransformer: listEventParticipationsResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/events/{obj_id}/participations',
		...options,
	})
}

/**
 * Retrieve Event participation
 */
export const retrieveEventParticipation = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveEventParticipationData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		RetrieveEventParticipationResponses,
		RetrieveEventParticipationErrors,
		ThrowOnError
	>({
		responseTransformer: retrieveEventParticipationResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/events/{event_id}/participations/{obj_id}',
		...options,
	})
}

/**
 * Update Event participation
 */
export const updateEventParticipation = <ThrowOnError extends boolean = true>(
	options: Options<UpdateEventParticipationData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<
		UpdateEventParticipationResponses,
		UpdateEventParticipationErrors,
		ThrowOnError
	>({
		responseTransformer: updateEventParticipationResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/events/{event_id}/participations/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Set presence on all tickets within participation
 * This action endpoint requires valid `status_presence` data as payload. Optionally, both `participation_certificates_credits_override` and `participation_certificates_date_override` are accepted.
 */
export const setPresence = <ThrowOnError extends boolean = true>(options: Options<SetPresenceData, ThrowOnError>) => {
	return (options.client ?? _heyApiClient).post<SetPresenceResponses, SetPresenceErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/events/{event_id}/participations/{obj_id}/set-presence',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Approve participation
 * Approve a participation. Requires the participation to be in a state where it can be approved. When `check_conditions` is True, approval is only possible when there are tickets available.
 */
export const approveParticipation = <ThrowOnError extends boolean = true>(
	options: Options<ApproveParticipationData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		ApproveParticipationResponses,
		ApproveParticipationErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/events/{event_id}/participations/{obj_id}/approve',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Move participation to waiting list
 * Add participation to the waiting list. When `check_conditions` is True, the waiting list has to be active.
 */
export const moveToWaitingList = <ThrowOnError extends boolean = true>(
	options: Options<MoveToWaitingListData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<MoveToWaitingListResponses, MoveToWaitingListErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/events/{event_id}/participations/{obj_id}/wait',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Unsubscribe participation
 * Unsubscribe a participation. Requires the participation to be in a state where it can be unsubscribed.
 */
export const unsubscribeParticipation = <ThrowOnError extends boolean = true>(
	options: Options<UnsubscribeParticipationData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		UnsubscribeParticipationResponses,
		UnsubscribeParticipationErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/events/{event_id}/participations/{obj_id}/unsubscribe',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Decline participation
 * Decline a participation. Requires the participation to be in a state where it can be declined.
 */
export const declineParticipation = <ThrowOnError extends boolean = true>(
	options: Options<DeclineParticipationData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		DeclineParticipationResponses,
		DeclineParticipationErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/events/{event_id}/participations/{obj_id}/decline',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Create Event Participation (sign up)
 *  - Depending on the selected ticket types, `addressee` and e-mail are `required`. They can be omitted if `member_id` is given.
 * - `member_id` is required for tickets with `visibility_level=members|members_filter` and should be omitted for tickets with the `visibility_level=external_only`
 * - The invoice properties are required when the event has `participation_billing_enabled=True`.
 * - `remarks` can be submitted when the event has `participant_remarks_enabled=True`, otherwise they are not editable in the manager
 * - When an event has `participation_information_collection_type=ticket`, `name`  and `email` is required per ticket.
 */
export const createEventParticipation = <ThrowOnError extends boolean = true>(
	options: Options<CreateEventParticipationData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		CreateEventParticipationResponses,
		CreateEventParticipationErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/events/{obj_id}/sign-up',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Ticket types
 */
export const listTicketTypes = <ThrowOnError extends boolean = true>(
	options: Options<ListTicketTypesData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<ListTicketTypesResponses, ListTicketTypesErrors, ThrowOnError>({
		responseTransformer: listTicketTypesResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/events/{obj_id}/ticket-types',
		...options,
	})
}

/**
 * Create Ticket type
 */
export const createTicketType = <ThrowOnError extends boolean = true>(
	options: Options<CreateTicketTypeData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<CreateTicketTypeResponses, CreateTicketTypeErrors, ThrowOnError>({
		responseTransformer: createTicketTypeResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/events/{obj_id}/ticket-types',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Delete Ticket type
 */
export const deleteTicketType = <ThrowOnError extends boolean = true>(
	options: Options<DeleteTicketTypeData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<DeleteTicketTypeResponses, DeleteTicketTypeErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/events/{event_id}/ticket-types/{obj_id}',
		...options,
	})
}

/**
 * Retrieve Ticket type
 */
export const retrieveTicketType = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveTicketTypeData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<RetrieveTicketTypeResponses, RetrieveTicketTypeErrors, ThrowOnError>({
		responseTransformer: retrieveTicketTypeResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/events/{event_id}/ticket-types/{obj_id}',
		...options,
	})
}

/**
 * Update Ticket type
 */
export const updateTicketType = <ThrowOnError extends boolean = true>(
	options: Options<UpdateTicketTypeData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<UpdateTicketTypeResponses, UpdateTicketTypeErrors, ThrowOnError>({
		responseTransformer: updateTicketTypeResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/events/{event_id}/ticket-types/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Add a new external invoice import
 * **Note:** this endpoint is part of the external invoices module and is only available if the module is enabled.
 *
 * To import external invoices, you need to send a `multipart/form-data` POST request to this endpoint. The following
 * fields are required:
 *
 * - `file`: The file to import;
 * - `source`: The source of the file (e.g. "creo"), this value can be defined by the client but should be consistent;
 * - `format`: The format of the file (e.g. "eExact"), this value is used to validate and parse the file.
 *
 * ### Example
 *
 * Below is a raw HTTP request that can be used to import an external invoice file:
 *
 * ```http
 * POST http://api.congressus.nl/v30/external-invoices/imports
 * Authorization: Bearer [your bearer token]
 * Content-Type: multipart/form-data; boundary=WebAppBoundary
 *
 * --WebAppBoundary
 * Content-Disposition: form-data; name="source"
 * Content-Type: text/plain
 *
 * creo
 * --WebAppBoundary
 * Content-Disposition: form-data; name="format"
 * Content-Type: text/plain
 *
 * eExact
 * --WebAppBoundary
 * Content-Disposition: form-data; name="file"; filename="export_01-02-2023.xml"
 *
 * < /path/to/export_01-02-2023.xml
 * --WebAppBoundary--
 * ```
 *
 * You can perform the same request using `curl`:
 *
 * ```bash
 * curl -X POST --location "http://api.congressus.nl/v30/external-invoices/imports" \
 * -H "Authorization: Bearer [your bearer token]" \
 * -H "Content-Type: multipart/form-data; boundary=WebAppBoundary" \
 * -F "source=creo;type=text/plain" \
 * -F "format=eExact;type=text/plain" \
 * -F "file=@/path/to/export_01-02-2023.xml;filename=export_01-02-2023.xml;type=text/xml"
 * ```
 */
export const addExternalInvoiceImport = <ThrowOnError extends boolean = true>(
	options?: Options<AddExternalInvoiceImportData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<AddExternalInvoiceImportResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/external-invoices/imports',
		...options,
	})
}

/**
 * List Gallery albums
 */
export const listGalleryAlbums = <ThrowOnError extends boolean = true>(
	options?: Options<ListGalleryAlbumsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListGalleryAlbumsResponses, ListGalleryAlbumsErrors, ThrowOnError>({
		responseTransformer: listGalleryAlbumsResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/galleries/albums',
		...options,
	})
}

/**
 * Retrieve Gallery album
 */
export const retrieveGalleryAlbum = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveGalleryAlbumData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<RetrieveGalleryAlbumResponses, RetrieveGalleryAlbumErrors, ThrowOnError>(
		{
			responseTransformer: retrieveGalleryAlbumResponseTransformer,
			security: [
				{
					scheme: 'bearer',
					type: 'http',
				},
			],
			url: '/v30/galleries/albums/{obj_id}',
			...options,
		},
	)
}

/**
 * List Gallery photos
 */
export const listGalleryPhotos = <ThrowOnError extends boolean = true>(
	options: Options<ListGalleryPhotosData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<ListGalleryPhotosResponses, ListGalleryPhotosErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/galleries/albums/{album_id}/photos',
		...options,
	})
}

/**
 * Retrieve Gallery photo
 */
export const retrieveGalleryPhoto = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveGalleryPhotoData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<RetrieveGalleryPhotoResponses, RetrieveGalleryPhotoErrors, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http',
				},
			],
			url: '/v30/galleries/albums/{album_id}/photos/{obj_id}',
			...options,
		},
	)
}

/**
 * List Group folders - recursive
 * Recursive list with all group folders and their children. Added for convenience, e.g. when you
 * want to render a select dropdown with all folders.
 */
export const listGroupFoldersRecursive = <ThrowOnError extends boolean = true>(
	options?: Options<ListGroupFoldersRecursiveData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		ListGroupFoldersRecursiveResponses,
		ListGroupFoldersRecursiveErrors,
		ThrowOnError
	>({
		responseTransformer: listGroupFoldersRecursiveResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/group-folders/recursive',
		...options,
	})
}

/**
 * List Group folders
 */
export const listGroupFolders = <ThrowOnError extends boolean = true>(
	options?: Options<ListGroupFoldersData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListGroupFoldersResponses, ListGroupFoldersErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/group-folders',
		...options,
	})
}

/**
 * Create Group folder
 */
export const createGroupFolder = <ThrowOnError extends boolean = true>(
	options?: Options<CreateGroupFolderData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<CreateGroupFolderResponses, CreateGroupFolderErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/group-folders',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Delete Group folder
 */
export const deleteGroupFolder = <ThrowOnError extends boolean = true>(
	options: Options<DeleteGroupFolderData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<DeleteGroupFolderResponses, DeleteGroupFolderErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/group-folders/{obj_id}',
		...options,
	})
}

/**
 * Retrieve Group folder
 */
export const retrieveGroupFolder = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveGroupFolderData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<RetrieveGroupFolderResponses, RetrieveGroupFolderErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/group-folders/{obj_id}',
		...options,
	})
}

/**
 * Update Group folder
 */
export const updateGroupFolder = <ThrowOnError extends boolean = true>(
	options: Options<UpdateGroupFolderData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<UpdateGroupFolderResponses, UpdateGroupFolderErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/group-folders/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Group folders - recursive
 * Use /group-folders/recursive endpoint instead
 * @deprecated
 */
export const getV30GroupsFoldersRecursive = <ThrowOnError extends boolean = true>(
	options?: Options<GetV30GroupsFoldersRecursiveData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetV30GroupsFoldersRecursiveResponses,
		GetV30GroupsFoldersRecursiveErrors,
		ThrowOnError
	>({
		responseTransformer: getV30GroupsFoldersRecursiveResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/groups/folders/recursive',
		...options,
	})
}

/**
 * List Group folders
 * Use /group-folders endpoint instead
 * @deprecated
 */
export const getV30GroupsFolders = <ThrowOnError extends boolean = true>(
	options?: Options<GetV30GroupsFoldersData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<GetV30GroupsFoldersResponses, GetV30GroupsFoldersErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/groups/folders',
		...options,
	})
}

/**
 * Create Group folder
 * Use /group-folders endpoint instead
 * @deprecated
 */
export const postV30GroupsFolders = <ThrowOnError extends boolean = true>(
	options?: Options<PostV30GroupsFoldersData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		PostV30GroupsFoldersResponses,
		PostV30GroupsFoldersErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/groups/folders',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Delete Group folder
 * Use /group-folders/{obj_id} endpoint instead
 * @deprecated
 */
export const deleteV30GroupsFoldersByObjId = <ThrowOnError extends boolean = true>(
	options: Options<DeleteV30GroupsFoldersByObjIdData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteV30GroupsFoldersByObjIdResponses,
		DeleteV30GroupsFoldersByObjIdErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/groups/folders/{obj_id}',
		...options,
	})
}

/**
 * Retrieve Group folder
 * Use /group-folders/{obj_id} endpoint instead
 * @deprecated
 */
export const getV30GroupsFoldersByObjId = <ThrowOnError extends boolean = true>(
	options: Options<GetV30GroupsFoldersByObjIdData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetV30GroupsFoldersByObjIdResponses,
		GetV30GroupsFoldersByObjIdErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/groups/folders/{obj_id}',
		...options,
	})
}

/**
 * Update Group folder
 * Use /group-folders/{obj_id} endpoint instead
 * @deprecated
 */
export const putV30GroupsFoldersByObjId = <ThrowOnError extends boolean = true>(
	options: Options<PutV30GroupsFoldersByObjIdData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<
		PutV30GroupsFoldersByObjIdResponses,
		PutV30GroupsFoldersByObjIdErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/groups/folders/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Groups
 */
export const listGroups = <ThrowOnError extends boolean = true>(options?: Options<ListGroupsData, ThrowOnError>) => {
	return (options?.client ?? _heyApiClient).get<ListGroupsResponses, ListGroupsErrors, ThrowOnError>({
		responseTransformer: listGroupsResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/groups',
		...options,
	})
}

/**
 * Delete Group
 */
export const deleteGroup = <ThrowOnError extends boolean = true>(options: Options<DeleteGroupData, ThrowOnError>) => {
	return (options.client ?? _heyApiClient).delete<DeleteGroupResponses, DeleteGroupErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/groups/{obj_id}',
		...options,
	})
}

/**
 * Retrieve Group
 */
export const retrieveGroup = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveGroupData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<RetrieveGroupResponses, RetrieveGroupErrors, ThrowOnError>({
		responseTransformer: retrieveGroupResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/groups/{obj_id}',
		...options,
	})
}

/**
 * Update Group
 */
export const updateGroup = <ThrowOnError extends boolean = true>(options: Options<UpdateGroupData, ThrowOnError>) => {
	return (options.client ?? _heyApiClient).put<UpdateGroupResponses, UpdateGroupErrors, ThrowOnError>({
		responseTransformer: updateGroupResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/groups/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Group memberships
 */
export const listGroupMemberships = <ThrowOnError extends boolean = true>(
	options?: Options<ListGroupMembershipsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		ListGroupMembershipsResponses,
		ListGroupMembershipsErrors,
		ThrowOnError
	>({
		responseTransformer: listGroupMembershipsResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/groups/memberships',
		...options,
	})
}

/**
 * Create Group membership
 */
export const createGroupMembership = <ThrowOnError extends boolean = true>(
	options?: Options<CreateGroupMembershipData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		CreateGroupMembershipResponses,
		CreateGroupMembershipErrors,
		ThrowOnError
	>({
		responseTransformer: createGroupMembershipResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/groups/memberships',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Delete Group membership
 */
export const deleteGroupMembership = <ThrowOnError extends boolean = true>(
	options: Options<DeleteGroupMembershipData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteGroupMembershipResponses,
		DeleteGroupMembershipErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/groups/memberships/{obj_id}',
		...options,
	})
}

/**
 * Retrieve Group membership
 */
export const retrieveGroupMembership = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveGroupMembershipData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		RetrieveGroupMembershipResponses,
		RetrieveGroupMembershipErrors,
		ThrowOnError
	>({
		responseTransformer: retrieveGroupMembershipResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/groups/memberships/{obj_id}',
		...options,
	})
}

/**
 * Update Group membership
 */
export const updateGroupMembership = <ThrowOnError extends boolean = true>(
	options: Options<UpdateGroupMembershipData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<
		UpdateGroupMembershipResponses,
		UpdateGroupMembershipErrors,
		ThrowOnError
	>({
		responseTransformer: updateGroupMembershipResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/groups/memberships/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Tasks
 */
export const listTasks = <ThrowOnError extends boolean = true>(options?: Options<ListTasksData, ThrowOnError>) => {
	return (options?.client ?? _heyApiClient).get<ListTasksResponses, ListTasksErrors, ThrowOnError>({
		responseTransformer: listTasksResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/tasks',
		...options,
	})
}

/**
 * Update Task
 */
export const updateTask = <ThrowOnError extends boolean = true>(options: Options<UpdateTaskData, ThrowOnError>) => {
	return (options.client ?? _heyApiClient).put<UpdateTaskResponses, UpdateTaskErrors, ThrowOnError>({
		responseTransformer: updateTaskResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/tasks/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Member statuses
 * Use the _include_hidden_ parameter to include hidden member statuses. Hidden member statuses
 * are not shown by default.
 */
export const listMemberStatuses = <ThrowOnError extends boolean = true>(
	options?: Options<ListMemberStatusesData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListMemberStatusesResponses, ListMemberStatusesErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/member-statuses',
		...options,
	})
}

/**
 * Delete Member status
 */
export const deleteMemberStatus = <ThrowOnError extends boolean = true>(
	options: Options<DeleteMemberStatusData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<DeleteMemberStatusResponses, DeleteMemberStatusErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/member-statuses/{obj_id}',
		...options,
	})
}

/**
 * Retrieve Member status
 */
export const retrieveMemberStatus = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveMemberStatusData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<RetrieveMemberStatusResponses, RetrieveMemberStatusErrors, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http',
				},
			],
			url: '/v30/member-statuses/{obj_id}',
			...options,
		},
	)
}

/**
 * Update Member status
 */
export const updateMemberStatus = <ThrowOnError extends boolean = true>(
	options: Options<UpdateMemberStatusData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<UpdateMemberStatusResponses, UpdateMemberStatusErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/member-statuses/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Custom fields
 */
export const listCustomFields = <ThrowOnError extends boolean = true>(
	options?: Options<ListCustomFieldsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListCustomFieldsResponses, ListCustomFieldsErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/members/custom-fields',
		...options,
	})
}

/**
 * Retrieve Custom field by ID
 */
export const retrieveCustomFieldById = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveCustomFieldByIdData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		RetrieveCustomFieldByIdResponses,
		RetrieveCustomFieldByIdErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/members/custom-fields/{obj_id}',
		...options,
	})
}

/**
 * Retrieve Custom field by ref
 */
export const retrieveCustomFieldByRef = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveCustomFieldByRefData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		RetrieveCustomFieldByRefResponses,
		RetrieveCustomFieldByRefErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/members/custom-fields/{ref}',
		...options,
	})
}

/**
 * List LogEntries
 * List log entries. Log entries can be of type `note`, `task`, `action` or `change`.
 */
export const listMemberLogEntries = <ThrowOnError extends boolean = true>(
	options: Options<ListMemberLogEntriesData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<ListMemberLogEntriesResponses, ListMemberLogEntriesErrors, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http',
				},
			],
			url: '/v30/members/{member_id}/logs',
			...options,
		},
	)
}

/**
 * Create LogEntry
 * Create a log entry. This is only possible for log entries of type `note` or `task`.
 */
export const createMemberLogEntry = <ThrowOnError extends boolean = true>(
	options: Options<CreateMemberLogEntryData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		CreateMemberLogEntryResponses,
		CreateMemberLogEntryErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/members/{member_id}/logs',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Delete LogEntry
 * Delete a log entry. This is only possible for log entries of type `note` or `task`.
 */
export const deleteMemberLogEntry = <ThrowOnError extends boolean = true>(
	options: Options<DeleteMemberLogEntryData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteMemberLogEntryResponses,
		DeleteMemberLogEntryErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/members/{member_id}/logs/{log_entry_id}',
		...options,
	})
}

/**
 * Retrieve LogEntry
 */
export const retrieveMemberLogEntry = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveMemberLogEntryData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		RetrieveMemberLogEntryResponses,
		RetrieveMemberLogEntryErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/members/{member_id}/logs/{log_entry_id}',
		...options,
	})
}

/**
 * Update LogEntry
 *
 * ## Update a log entry
 *
 * ### Limitations:
 * This is only possible for log entries of type `note` or `task`.
 *
 * ### Updating simple fields:
 * For notes, only the `text` field can be updated. For tasks, it's also possible to update the assignee through the
 * `assignee_type` and `assignee_id` fields.
 *
 * ### Marking tasks as completed:
 * Tasks can also be marked as complete by setting `is_completed` to true and
 * optionally setting `completed_by_id` to the ID of the user that completed the task. If `completed_by_id` is not set,
 * the current user will be used.
 *
 */
export const updateMemberLogEntry = <ThrowOnError extends boolean = true>(
	options: Options<UpdateMemberLogEntryData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<UpdateMemberLogEntryResponses, UpdateMemberLogEntryErrors, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http',
				},
			],
			url: '/v30/members/{member_id}/logs/{log_entry_id}',
			...options,
			headers: {
				'Content-Type': 'application/json',
				...options.headers,
			},
		},
	)
}

/**
 * List Members
 * By passing the `context` query filter
 * each row is filtered according to the context derived by there status.
 * This means that each row will only contain the fields that are set to visible or higher.
 * The settings for each context can be found in the manager: https://manager.congressus.nl/settings/statuses
 */
export const listMembers = <ThrowOnError extends boolean = true>(options?: Options<ListMembersData, ThrowOnError>) => {
	return (options?.client ?? _heyApiClient).get<ListMembersResponses, ListMembersErrors, ThrowOnError>({
		responseTransformer: listMembersResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/members',
		...options,
	})
}

/**
 * Create Member
 */
export const createMember = <ThrowOnError extends boolean = true>(
	options?: Options<CreateMemberData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<CreateMemberResponses, CreateMemberErrors, ThrowOnError>({
		responseTransformer: createMemberResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/members',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Delete Member
 */
export const deleteMember = <ThrowOnError extends boolean = true>(options: Options<DeleteMemberData, ThrowOnError>) => {
	return (options.client ?? _heyApiClient).delete<DeleteMemberResponses, DeleteMemberErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/members/{obj_id}',
		...options,
	})
}

/**
 * Retrieve Member
 */
export const retrieveMember = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveMemberData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<RetrieveMemberResponses, RetrieveMemberErrors, ThrowOnError>({
		responseTransformer: retrieveMemberResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/members/{obj_id}',
		...options,
	})
}

/**
 * Update Member
 */
export const updateMember = <ThrowOnError extends boolean = true>(options: Options<UpdateMemberData, ThrowOnError>) => {
	return (options.client ?? _heyApiClient).put<UpdateMemberResponses, UpdateMemberErrors, ThrowOnError>({
		responseTransformer: updateMemberResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/members/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Membership statuses
 */
export const listMembershipStatuses = <ThrowOnError extends boolean = true>(
	options: Options<ListMembershipStatusesData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		ListMembershipStatusesResponses,
		ListMembershipStatusesErrors,
		ThrowOnError
	>({
		responseTransformer: listMembershipStatusesResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/members/{obj_id}/statuses',
		...options,
	})
}

/**
 * Create Membership status
 */
export const createMembershipStatus = <ThrowOnError extends boolean = true>(
	options: Options<CreateMembershipStatusData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		CreateMembershipStatusResponses,
		CreateMembershipStatusErrors,
		ThrowOnError
	>({
		responseTransformer: createMembershipStatusResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/members/{obj_id}/statuses',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Delete Membership status
 */
export const deleteMembershipStatus = <ThrowOnError extends boolean = true>(
	options: Options<DeleteMembershipStatusData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteMembershipStatusResponses,
		DeleteMembershipStatusErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/members/{obj_id}/statuses/{membership_status_id}',
		...options,
	})
}

/**
 * Retrieve Membership status
 */
export const retrieveMembershipStatus = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveMembershipStatusData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		RetrieveMembershipStatusResponses,
		RetrieveMembershipStatusErrors,
		ThrowOnError
	>({
		responseTransformer: retrieveMembershipStatusResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/members/{obj_id}/statuses/{membership_status_id}',
		...options,
	})
}

/**
 * Update Membership status
 */
export const updateMembershipStatus = <ThrowOnError extends boolean = true>(
	options: Options<UpdateMembershipStatusData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<
		UpdateMembershipStatusResponses,
		UpdateMembershipStatusErrors,
		ThrowOnError
	>({
		responseTransformer: updateMembershipStatusResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/members/{obj_id}/statuses/{membership_status_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Search Members
 */
export const searchMembers = <ThrowOnError extends boolean = true>(
	options: Options<SearchMembersData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<SearchMembersResponses, SearchMembersErrors, ThrowOnError>({
		responseTransformer: searchMembersResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/members/search',
		...options,
	})
}

/**
 * List News
 */
export const listNews = <ThrowOnError extends boolean = true>(options?: Options<ListNewsData, ThrowOnError>) => {
	return (options?.client ?? _heyApiClient).get<ListNewsResponses, ListNewsErrors, ThrowOnError>({
		responseTransformer: listNewsResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/news',
		...options,
	})
}

/**
 * Create News
 */
export const createNews = <ThrowOnError extends boolean = true>(options?: Options<CreateNewsData, ThrowOnError>) => {
	return (options?.client ?? _heyApiClient).post<CreateNewsResponses, CreateNewsErrors, ThrowOnError>({
		responseTransformer: createNewsResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/news',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Delete News
 */
export const deleteNews = <ThrowOnError extends boolean = true>(options: Options<DeleteNewsData, ThrowOnError>) => {
	return (options.client ?? _heyApiClient).delete<DeleteNewsResponses, DeleteNewsErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/news/{obj_id}',
		...options,
	})
}

/**
 * Retrieve News
 */
export const retrieveNews = <ThrowOnError extends boolean = true>(options: Options<RetrieveNewsData, ThrowOnError>) => {
	return (options.client ?? _heyApiClient).get<RetrieveNewsResponses, RetrieveNewsErrors, ThrowOnError>({
		responseTransformer: retrieveNewsResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/news/{obj_id}',
		...options,
	})
}

/**
 * Update News
 */
export const updateNews = <ThrowOnError extends boolean = true>(options: Options<UpdateNewsData, ThrowOnError>) => {
	return (options.client ?? _heyApiClient).put<UpdateNewsResponses, UpdateNewsErrors, ThrowOnError>({
		responseTransformer: updateNewsResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/news/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Notifications
 */
export const listNotifications = <ThrowOnError extends boolean = true>(
	options?: Options<ListNotificationsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListNotificationsResponses, ListNotificationsErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/notifications',
		...options,
	})
}

/**
 * List Organisation categories
 */
export const listOrganisationCategories = <ThrowOnError extends boolean = true>(
	options?: Options<ListOrganisationCategoriesData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		ListOrganisationCategoriesResponses,
		ListOrganisationCategoriesErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/organisations/categories',
		...options,
	})
}

/**
 * Create Organisation category
 */
export const createOrganisationCategory = <ThrowOnError extends boolean = true>(
	options?: Options<CreateOrganisationCategoryData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		CreateOrganisationCategoryResponses,
		CreateOrganisationCategoryErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/organisations/categories',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Delete Organisation category
 */
export const deleteOrganisationCategory = <ThrowOnError extends boolean = true>(
	options: Options<DeleteOrganisationCategoryData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteOrganisationCategoryResponses,
		DeleteOrganisationCategoryErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/organisations/categories/{obj_id}',
		...options,
	})
}

/**
 * Retrieve Organisation category
 */
export const retrieveOrganisationCategory = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveOrganisationCategoryData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		RetrieveOrganisationCategoryResponses,
		RetrieveOrganisationCategoryErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/organisations/categories/{obj_id}',
		...options,
	})
}

/**
 * Update Organisation category
 */
export const updateOrganisationCategory = <ThrowOnError extends boolean = true>(
	options: Options<UpdateOrganisationCategoryData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<
		UpdateOrganisationCategoryResponses,
		UpdateOrganisationCategoryErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/organisations/categories/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Organisations
 */
export const listOrganisations = <ThrowOnError extends boolean = true>(
	options?: Options<ListOrganisationsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListOrganisationsResponses, ListOrganisationsErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/organisations',
		...options,
	})
}

/**
 * Create Organisation
 */
export const createOrganisation = <ThrowOnError extends boolean = true>(
	options?: Options<CreateOrganisationData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<CreateOrganisationResponses, CreateOrganisationErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/organisations',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Delete Organisation
 */
export const deleteOrganisation = <ThrowOnError extends boolean = true>(
	options: Options<DeleteOrganisationData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<DeleteOrganisationResponses, DeleteOrganisationErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/organisations/{obj_id}',
		...options,
	})
}

/**
 * Retrieve Organisation
 */
export const retrieveOrganisation = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveOrganisationData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<RetrieveOrganisationResponses, RetrieveOrganisationErrors, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http',
				},
			],
			url: '/v30/organisations/{obj_id}',
			...options,
		},
	)
}

/**
 * Update Organisation
 */
export const updateOrganisation = <ThrowOnError extends boolean = true>(
	options: Options<UpdateOrganisationData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<UpdateOrganisationResponses, UpdateOrganisationErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/organisations/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Organisation memberships
 */
export const listOrganisationMemberships = <ThrowOnError extends boolean = true>(
	options?: Options<ListOrganisationMembershipsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		ListOrganisationMembershipsResponses,
		ListOrganisationMembershipsErrors,
		ThrowOnError
	>({
		responseTransformer: listOrganisationMembershipsResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/organisations/memberships',
		...options,
	})
}

/**
 * Create Organisation membership
 */
export const createOrganisationMembership = <ThrowOnError extends boolean = true>(
	options?: Options<CreateOrganisationMembershipData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		CreateOrganisationMembershipResponses,
		CreateOrganisationMembershipErrors,
		ThrowOnError
	>({
		responseTransformer: createOrganisationMembershipResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/organisations/memberships',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Delete Organisation membership
 */
export const deleteOrganisationMembership = <ThrowOnError extends boolean = true>(
	options: Options<DeleteOrganisationMembershipData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteOrganisationMembershipResponses,
		DeleteOrganisationMembershipErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/organisations/memberships/{obj_id}',
		...options,
	})
}

/**
 * Retrieve Organisation membership
 */
export const retrieveOrganisationMembership = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveOrganisationMembershipData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		RetrieveOrganisationMembershipResponses,
		RetrieveOrganisationMembershipErrors,
		ThrowOnError
	>({
		responseTransformer: retrieveOrganisationMembershipResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/organisations/memberships/{obj_id}',
		...options,
	})
}

/**
 * Update Organisation membership
 */
export const updateOrganisationMembership = <ThrowOnError extends boolean = true>(
	options: Options<UpdateOrganisationMembershipData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<
		UpdateOrganisationMembershipResponses,
		UpdateOrganisationMembershipErrors,
		ThrowOnError
	>({
		responseTransformer: updateOrganisationMembershipResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/organisations/memberships/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Product folders - recursive
 * Recursive list with all product folders and their children. Added for convenience, e.g. when you
 * want to render a select dropdown with all folders.
 */
export const listProductFoldersRecursive = <ThrowOnError extends boolean = true>(
	options?: Options<ListProductFoldersRecursiveData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		ListProductFoldersRecursiveResponses,
		ListProductFoldersRecursiveErrors,
		ThrowOnError
	>({
		responseTransformer: listProductFoldersRecursiveResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/product-folders/recursive',
		...options,
	})
}

/**
 * List Product folders
 */
export const listProductFolders = <ThrowOnError extends boolean = true>(
	options?: Options<ListProductFoldersData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListProductFoldersResponses, ListProductFoldersErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/product-folders',
		...options,
	})
}

/**
 * Create Product folder
 */
export const createProductFolder = <ThrowOnError extends boolean = true>(
	options?: Options<CreateProductFolderData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<CreateProductFolderResponses, CreateProductFolderErrors, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http',
				},
			],
			url: '/v30/product-folders',
			...options,
			headers: {
				'Content-Type': 'application/json',
				...options?.headers,
			},
		},
	)
}

/**
 * Delete Product folder
 */
export const deleteProductFolder = <ThrowOnError extends boolean = true>(
	options: Options<DeleteProductFolderData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteProductFolderResponses,
		DeleteProductFolderErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/product-folders/{obj_id}',
		...options,
	})
}

/**
 * Retrieve Product folder
 */
export const retrieveProductFolder = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveProductFolderData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		RetrieveProductFolderResponses,
		RetrieveProductFolderErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/product-folders/{obj_id}',
		...options,
	})
}

/**
 * Update Product folder
 */
export const updateProductFolder = <ThrowOnError extends boolean = true>(
	options: Options<UpdateProductFolderData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<UpdateProductFolderResponses, UpdateProductFolderErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/product-folders/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Products
 */
export const listProducts = <ThrowOnError extends boolean = true>(
	options?: Options<ListProductsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListProductsResponses, ListProductsErrors, ThrowOnError>({
		responseTransformer: listProductsResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/products',
		...options,
	})
}

/**
 * Create Product
 */
export const createProduct = <ThrowOnError extends boolean = true>(
	options?: Options<CreateProductData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<CreateProductResponses, CreateProductErrors, ThrowOnError>({
		responseTransformer: createProductResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/products',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Delete Product
 */
export const deleteProduct = <ThrowOnError extends boolean = true>(
	options: Options<DeleteProductData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<DeleteProductResponses, DeleteProductErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/products/{obj_id}',
		...options,
	})
}

/**
 * Retrieve Product
 */
export const retrieveProduct = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveProductData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<RetrieveProductResponses, RetrieveProductErrors, ThrowOnError>({
		responseTransformer: retrieveProductResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/products/{obj_id}',
		...options,
	})
}

/**
 * Update Product
 */
export const updateProduct = <ThrowOnError extends boolean = true>(
	options: Options<UpdateProductData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<UpdateProductResponses, UpdateProductErrors, ThrowOnError>({
		responseTransformer: updateProductResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/products/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List LogEntries
 * List log entries. Log entries can be of type `note`, `task`, `action` or `change`.
 */
export const listSaleInvoiceLogEntries = <ThrowOnError extends boolean = true>(
	options: Options<ListSaleInvoiceLogEntriesData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		ListSaleInvoiceLogEntriesResponses,
		ListSaleInvoiceLogEntriesErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/sale-invoices/{obj_id}/logs',
		...options,
	})
}

/**
 * Create LogEntry
 * Create a log entry. This is only possible for log entries of type `note` or `task`.
 */
export const createSaleInvoiceLogEntry = <ThrowOnError extends boolean = true>(
	options: Options<CreateSaleInvoiceLogEntryData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		CreateSaleInvoiceLogEntryResponses,
		CreateSaleInvoiceLogEntryErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/sale-invoices/{obj_id}/logs',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Delete LogEntry
 * Delete a log entry. This is only possible for log entries of type `note` or `task`.
 */
export const deleteSaleInvoiceLogEntry = <ThrowOnError extends boolean = true>(
	options: Options<DeleteSaleInvoiceLogEntryData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteSaleInvoiceLogEntryResponses,
		DeleteSaleInvoiceLogEntryErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/sale-invoices/{obj_id}/logs/{log_entry_id}',
		...options,
	})
}

/**
 * Retrieve LogEntry
 */
export const retrieveSaleInvoiceLogEntry = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveSaleInvoiceLogEntryData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		RetrieveSaleInvoiceLogEntryResponses,
		RetrieveSaleInvoiceLogEntryErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/sale-invoices/{obj_id}/logs/{log_entry_id}',
		...options,
	})
}

/**
 * Update LogEntry
 *
 * ## Update a log entry
 *
 * ### Limitations:
 * This is only possible for log entries of type `note` or `task`.
 *
 * ### Updating simple fields:
 * For notes, only the `text` field can be updated. For tasks, it's also possible to update the assignee through the
 * `assignee_type` and `assignee_id` fields.
 *
 * ### Marking tasks as completed:
 * Tasks can also be marked as complete by setting `is_completed` to true and
 * optionally setting `completed_by_id` to the ID of the user that completed the task. If `completed_by_id` is not set,
 * the current user will be used.
 *
 */
export const updateSaleInvoiceLogEntry = <ThrowOnError extends boolean = true>(
	options: Options<UpdateSaleInvoiceLogEntryData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<
		UpdateSaleInvoiceLogEntryResponses,
		UpdateSaleInvoiceLogEntryErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/sale-invoices/{obj_id}/logs/{log_entry_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Sale invoices
 */
export const listSaleInvoices = <ThrowOnError extends boolean = true>(
	options?: Options<ListSaleInvoicesData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListSaleInvoicesResponses, ListSaleInvoicesErrors, ThrowOnError>({
		responseTransformer: listSaleInvoicesResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/sale-invoices',
		...options,
	})
}

/**
 * Create SaleInvoice
 */
export const createSaleInvoice = <ThrowOnError extends boolean = true>(
	options?: Options<CreateSaleInvoiceData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<CreateSaleInvoiceResponses, CreateSaleInvoiceErrors, ThrowOnError>({
		responseTransformer: createSaleInvoiceResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/sale-invoices',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Delete sale invoice
 */
export const deleteSaleInvoice = <ThrowOnError extends boolean = true>(
	options: Options<DeleteSaleInvoiceData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<DeleteSaleInvoiceResponses, DeleteSaleInvoiceErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/sale-invoices/{obj_id}',
		...options,
	})
}

/**
 * Retrieve sale invoice
 */
export const retrieveSaleInvoice = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveSaleInvoiceData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<RetrieveSaleInvoiceResponses, RetrieveSaleInvoiceErrors, ThrowOnError>({
		responseTransformer: retrieveSaleInvoiceResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/sale-invoices/{obj_id}',
		...options,
	})
}

/**
 * Update sale invoice
 */
export const updateSaleInvoice = <ThrowOnError extends boolean = true>(
	options: Options<UpdateSaleInvoiceData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<UpdateSaleInvoiceResponses, UpdateSaleInvoiceErrors, ThrowOnError>({
		responseTransformer: updateSaleInvoiceResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/sale-invoices/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Send a sale invoice
 */
export const sendSaleInvoice = <ThrowOnError extends boolean = true>(
	options: Options<SendSaleInvoiceData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<SendSaleInvoiceResponses, SendSaleInvoiceErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/sale-invoices/{obj_id}/send',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Remind a sale invoice
 */
export const remindSaleInvoice = <ThrowOnError extends boolean = true>(
	options: Options<RemindSaleInvoiceData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<RemindSaleInvoiceResponses, RemindSaleInvoiceErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/sale-invoices/{obj_id}/remind',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Mark sale invoice as uncollectible
 */
export const markSaleInvoiceAsUncollectible = <ThrowOnError extends boolean = true>(
	options: Options<MarkSaleInvoiceAsUncollectibleData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		MarkSaleInvoiceAsUncollectibleResponses,
		MarkSaleInvoiceAsUncollectibleErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/sale-invoices/{obj_id}/mark-uncollectible',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Mark sale invoice as collectible
 */
export const markSaleInvoiceAsCollectible = <ThrowOnError extends boolean = true>(
	options: Options<MarkSaleInvoiceAsCollectibleData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		MarkSaleInvoiceAsCollectibleResponses,
		MarkSaleInvoiceAsCollectibleErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/sale-invoices/{obj_id}/mark-collectible',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Download a sale invoice as PDF file
 */
export const downloadSaleInvoice = <ThrowOnError extends boolean = true>(
	options: Options<DownloadSaleInvoiceData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<DownloadSaleInvoiceResponses, DownloadSaleInvoiceErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/sale-invoices/{obj_id}/download',
		...options,
	})
}

/**
 * List sale invoice items
 */
export const listSaleInvoiceItems = <ThrowOnError extends boolean = true>(
	options: Options<ListSaleInvoiceItemsData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<ListSaleInvoiceItemsResponses, ListSaleInvoiceItemsErrors, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http',
				},
			],
			url: '/v30/sale-invoices/{obj_id}/items',
			...options,
		},
	)
}

/**
 * Create sale invoice item
 */
export const createSaleInvoiceItem = <ThrowOnError extends boolean = true>(
	options: Options<CreateSaleInvoiceItemData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		CreateSaleInvoiceItemResponses,
		CreateSaleInvoiceItemErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/sale-invoices/{obj_id}/items',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List sale invoice workflows
 */
export const listSaleInvoiceWorkflows = <ThrowOnError extends boolean = true>(
	options?: Options<ListSaleInvoiceWorkflowsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		ListSaleInvoiceWorkflowsResponses,
		ListSaleInvoiceWorkflowsErrors,
		ThrowOnError
	>({
		responseTransformer: listSaleInvoiceWorkflowsResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/sale-invoices/workflows',
		...options,
	})
}

/**
 * List StorageObjects
 */
export const listStorageObjects = <ThrowOnError extends boolean = true>(
	options?: Options<ListStorageObjectsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListStorageObjectsResponses, ListStorageObjectsErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/storage',
		...options,
	})
}

/**
 * Create StorageObject
 */
export const createStorageObject = <ThrowOnError extends boolean = true>(
	options?: Options<CreateStorageObjectData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<CreateStorageObjectResponses, CreateStorageObjectErrors, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http',
				},
			],
			url: '/v30/storage',
			...options,
			headers: {
				'Content-Type': 'application/json',
				...options?.headers,
			},
		},
	)
}

/**
 * Delete StorageObject
 */
export const deleteStorageObject = <ThrowOnError extends boolean = true>(
	options: Options<DeleteStorageObjectData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteStorageObjectResponses,
		DeleteStorageObjectErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/storage/{obj_id}',
		...options,
	})
}

/**
 * Retrieve StorageObject
 */
export const retrieveStorageObject = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveStorageObjectData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		RetrieveStorageObjectResponses,
		RetrieveStorageObjectErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/storage/{obj_id}',
		...options,
	})
}

/**
 * Update StorageObject
 */
export const updateStorageObject = <ThrowOnError extends boolean = true>(
	options: Options<UpdateStorageObjectData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<UpdateStorageObjectResponses, UpdateStorageObjectErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/storage/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * Upload a file to an existing storage object
 */
export const uploadFileToStorageObject = <ThrowOnError extends boolean = true>(
	options: Options<UploadFileToStorageObjectData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<
		UploadFileToStorageObjectResponses,
		UploadFileToStorageObjectErrors,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/storage/{obj_id}/file-content',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers,
		},
	})
}

/**
 * List Webhooks
 */
export const listWebhooks = <ThrowOnError extends boolean = true>(
	options?: Options<ListWebhooksData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListWebhooksResponses, ListWebhooksErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/webhooks',
		...options,
	})
}

/**
 * Create Webhook
 */
export const createWebhook = <ThrowOnError extends boolean = true>(
	options?: Options<CreateWebhookData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<CreateWebhookResponses, CreateWebhookErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/webhooks',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	})
}

/**
 * Delete Webhook
 */
export const deleteWebhook = <ThrowOnError extends boolean = true>(
	options: Options<DeleteWebhookData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<DeleteWebhookResponses, DeleteWebhookErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/webhooks/{obj_id}',
		...options,
	})
}

/**
 * Retrieve Webhook
 */
export const retrieveWebhook = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveWebhookData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<RetrieveWebhookResponses, RetrieveWebhookErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/webhooks/{obj_id}',
		...options,
	})
}

/**
 * Update Webhook
 */
export const updateWebhook = <ThrowOnError extends boolean = true>(
	options: Options<UpdateWebhookData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<UpdateWebhookResponses, UpdateWebhookErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/webhooks/{obj_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	})
}

/**
 * List Webhook calls
 */
export const listWebhookCalls = <ThrowOnError extends boolean = true>(
	options: Options<ListWebhookCallsData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<ListWebhookCallsResponses, ListWebhookCallsErrors, ThrowOnError>({
		responseTransformer: listWebhookCallsResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/webhooks/{obj_id}/calls',
		...options,
	})
}

/**
 * List Webpages
 */
export const listWebpages = <ThrowOnError extends boolean = true>(
	options?: Options<ListWebpagesData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListWebpagesResponses, ListWebpagesErrors, ThrowOnError>({
		responseTransformer: listWebpagesResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/webpages',
		...options,
	})
}

/**
 * Retrieve Webpage
 */
export const retrieveWebpage = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveWebpageData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<RetrieveWebpageResponses, RetrieveWebpageErrors, ThrowOnError>({
		responseTransformer: retrieveWebpageResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/webpages/{obj_id}',
		...options,
	})
}

/**
 * List Websites
 */
export const listWebsites = <ThrowOnError extends boolean = true>(
	options?: Options<ListWebsitesData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListWebsitesResponses, ListWebsitesErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/websites',
		...options,
	})
}

/**
 * Retrieve Website
 */
export const retrieveWebsite = <ThrowOnError extends boolean = true>(
	options: Options<RetrieveWebsiteData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<RetrieveWebsiteResponses, RetrieveWebsiteErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/websites/{obj_id}',
		...options,
	})
}

/**
 * List Webpages
 * Retrieve the complete tree of Webpages on this Website.
 */
export const listWebsiteWebpages = <ThrowOnError extends boolean = true>(
	options: Options<ListWebsiteWebpagesData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<ListWebsiteWebpagesResponses, ListWebsiteWebpagesErrors, ThrowOnError>({
		responseTransformer: listWebsiteWebpagesResponseTransformer,
		security: [
			{
				scheme: 'bearer',
				type: 'http',
			},
		],
		url: '/v30/websites/{obj_id}/webpages',
		...options,
	})
}
